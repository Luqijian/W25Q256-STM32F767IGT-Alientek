
W25Q256-STM32F767IGT-OpenDev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e34  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  0800502c  0800502c  0001502c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050fc  080050fc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080050fc  080050fc  000150fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005104  08005104  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005104  08005104  00015104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005108  08005108  00015108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800510c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  20000070  0800517c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  0800517c  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb31  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023fd  00000000  00000000  0002ebcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ad8  00000000  00000000  00030fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009a0  00000000  00000000  00031aa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028d6d  00000000  00000000  00032448  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ae3a  00000000  00000000  0005b1b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f4414  00000000  00000000  00065fef  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015a403  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003030  00000000  00000000  0015a480  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000070 	.word	0x20000070
 8000214:	00000000 	.word	0x00000000
 8000218:	08005014 	.word	0x08005014

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000074 	.word	0x20000074
 8000234:	08005014 	.word	0x08005014

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800053e:	4b1b      	ldr	r3, [pc, #108]	; (80005ac <MX_GPIO_Init+0x74>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	4a1a      	ldr	r2, [pc, #104]	; (80005ac <MX_GPIO_Init+0x74>)
 8000544:	f043 0320 	orr.w	r3, r3, #32
 8000548:	6313      	str	r3, [r2, #48]	; 0x30
 800054a:	4b18      	ldr	r3, [pc, #96]	; (80005ac <MX_GPIO_Init+0x74>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f003 0320 	and.w	r3, r3, #32
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000556:	4b15      	ldr	r3, [pc, #84]	; (80005ac <MX_GPIO_Init+0x74>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	4a14      	ldr	r2, [pc, #80]	; (80005ac <MX_GPIO_Init+0x74>)
 800055c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000560:	6313      	str	r3, [r2, #48]	; 0x30
 8000562:	4b12      	ldr	r3, [pc, #72]	; (80005ac <MX_GPIO_Init+0x74>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056e:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <MX_GPIO_Init+0x74>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	4a0e      	ldr	r2, [pc, #56]	; (80005ac <MX_GPIO_Init+0x74>)
 8000574:	f043 0302 	orr.w	r3, r3, #2
 8000578:	6313      	str	r3, [r2, #48]	; 0x30
 800057a:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <MX_GPIO_Init+0x74>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	f003 0302 	and.w	r3, r3, #2
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <MX_GPIO_Init+0x74>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	4a08      	ldr	r2, [pc, #32]	; (80005ac <MX_GPIO_Init+0x74>)
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	6313      	str	r3, [r2, #48]	; 0x30
 8000592:	4b06      	ldr	r3, [pc, #24]	; (80005ac <MX_GPIO_Init+0x74>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	603b      	str	r3, [r7, #0]
 800059c:	683b      	ldr	r3, [r7, #0]

}
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	40023800 	.word	0x40023800

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	f5ad 3d80 	sub.w	sp, sp, #65536	; 0x10000
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80005ba:	f000 ff92 	bl	80014e2 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80005be:	f000 f8a9 	bl	8000714 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80005c2:	f7ff ffb9 	bl	8000538 <MX_GPIO_Init>
    MX_QUADSPI_Init();
 80005c6:	f000 f939 	bl	800083c <MX_QUADSPI_Init>
    MX_USART1_UART_Init();
 80005ca:	f000 fee5 	bl	8001398 <MX_USART1_UART_Init>
    /* USER CODE BEGIN 2 */
    uint8_t buffer_test[MEMORY_SECTOR_SIZE];
    uint32_t var = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	4a4c      	ldr	r2, [pc, #304]	; (8000704 <main+0x154>)
 80005d2:	443a      	add	r2, r7
 80005d4:	6013      	str	r3, [r2, #0]

    CSP_QUADSPI_Init();
 80005d6:	f000 fa07 	bl	80009e8 <CSP_QUADSPI_Init>

    for (var = 0; var < MEMORY_SECTOR_SIZE; var++)
 80005da:	2300      	movs	r3, #0
 80005dc:	4a49      	ldr	r2, [pc, #292]	; (8000704 <main+0x154>)
 80005de:	443a      	add	r2, r7
 80005e0:	6013      	str	r3, [r2, #0]
 80005e2:	e014      	b.n	800060e <main+0x5e>
    {
        buffer_test[var] = (var & 0xff);
 80005e4:	4b47      	ldr	r3, [pc, #284]	; (8000704 <main+0x154>)
 80005e6:	443b      	add	r3, r7
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	b2d9      	uxtb	r1, r3
 80005ec:	4b46      	ldr	r3, [pc, #280]	; (8000708 <main+0x158>)
 80005ee:	4a47      	ldr	r2, [pc, #284]	; (800070c <main+0x15c>)
 80005f0:	443a      	add	r2, r7
 80005f2:	4413      	add	r3, r2
 80005f4:	4a43      	ldr	r2, [pc, #268]	; (8000704 <main+0x154>)
 80005f6:	443a      	add	r2, r7
 80005f8:	6812      	ldr	r2, [r2, #0]
 80005fa:	4413      	add	r3, r2
 80005fc:	460a      	mov	r2, r1
 80005fe:	701a      	strb	r2, [r3, #0]
    for (var = 0; var < MEMORY_SECTOR_SIZE; var++)
 8000600:	4b40      	ldr	r3, [pc, #256]	; (8000704 <main+0x154>)
 8000602:	443b      	add	r3, r7
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	3301      	adds	r3, #1
 8000608:	4a3e      	ldr	r2, [pc, #248]	; (8000704 <main+0x154>)
 800060a:	443a      	add	r2, r7
 800060c:	6013      	str	r3, [r2, #0]
 800060e:	4b3d      	ldr	r3, [pc, #244]	; (8000704 <main+0x154>)
 8000610:	443b      	add	r3, r7
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000618:	d3e4      	bcc.n	80005e4 <main+0x34>
    }

    for (var = 0; var < SECTORS_COUNT; var++)
 800061a:	2300      	movs	r3, #0
 800061c:	4a39      	ldr	r2, [pc, #228]	; (8000704 <main+0x154>)
 800061e:	443a      	add	r2, r7
 8000620:	6013      	str	r3, [r2, #0]
 8000622:	e028      	b.n	8000676 <main+0xc6>
    {

        if (CSP_QSPI_EraseSector(var * MEMORY_SECTOR_SIZE,
 8000624:	4b37      	ldr	r3, [pc, #220]	; (8000704 <main+0x154>)
 8000626:	443b      	add	r3, r7
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	041a      	lsls	r2, r3, #16
                                 (var + 1) * MEMORY_SECTOR_SIZE - 1) != HAL_OK)
 800062c:	4b35      	ldr	r3, [pc, #212]	; (8000704 <main+0x154>)
 800062e:	443b      	add	r3, r7
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	3301      	adds	r3, #1
 8000634:	041b      	lsls	r3, r3, #16
        if (CSP_QSPI_EraseSector(var * MEMORY_SECTOR_SIZE,
 8000636:	3b01      	subs	r3, #1
 8000638:	4619      	mov	r1, r3
 800063a:	4610      	mov	r0, r2
 800063c:	f000 fbbc 	bl	8000db8 <CSP_QSPI_EraseSector>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d000      	beq.n	8000648 <main+0x98>
        {
            while (1)
 8000646:	e7fe      	b.n	8000646 <main+0x96>
                ; //breakpoint - error detected
        }

        if (CSP_QSPI_WriteMemory(buffer_test, var * MEMORY_SECTOR_SIZE, 255) != HAL_OK)
 8000648:	4b2e      	ldr	r3, [pc, #184]	; (8000704 <main+0x154>)
 800064a:	443b      	add	r3, r7
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	0419      	lsls	r1, r3, #16
 8000650:	4b2d      	ldr	r3, [pc, #180]	; (8000708 <main+0x158>)
 8000652:	4a2e      	ldr	r2, [pc, #184]	; (800070c <main+0x15c>)
 8000654:	443a      	add	r2, r7
 8000656:	4413      	add	r3, r2
 8000658:	22ff      	movs	r2, #255	; 0xff
 800065a:	4618      	mov	r0, r3
 800065c:	f000 fc08 	bl	8000e70 <CSP_QSPI_WriteMemory>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d000      	beq.n	8000668 <main+0xb8>
        {

            while (1)
 8000666:	e7fe      	b.n	8000666 <main+0xb6>
    for (var = 0; var < SECTORS_COUNT; var++)
 8000668:	4b26      	ldr	r3, [pc, #152]	; (8000704 <main+0x154>)
 800066a:	443b      	add	r3, r7
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	3301      	adds	r3, #1
 8000670:	4a24      	ldr	r2, [pc, #144]	; (8000704 <main+0x154>)
 8000672:	443a      	add	r2, r7
 8000674:	6013      	str	r3, [r2, #0]
 8000676:	4b23      	ldr	r3, [pc, #140]	; (8000704 <main+0x154>)
 8000678:	443b      	add	r3, r7
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000680:	d3d0      	bcc.n	8000624 <main+0x74>
                ; //breakpoint - error detected
        }
    }

    if (CSP_QSPI_ReadMemory(buffer_test, 0, MEMORY_SECTOR_SIZE) != HAL_OK)
 8000682:	4b21      	ldr	r3, [pc, #132]	; (8000708 <main+0x158>)
 8000684:	4a21      	ldr	r2, [pc, #132]	; (800070c <main+0x15c>)
 8000686:	443a      	add	r2, r7
 8000688:	4413      	add	r3, r2
 800068a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800068e:	2100      	movs	r1, #0
 8000690:	4618      	mov	r0, r3
 8000692:	f000 fc81 	bl	8000f98 <CSP_QSPI_ReadMemory>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d000      	beq.n	800069e <main+0xee>
    {
        while (1)
 800069c:	e7fe      	b.n	800069c <main+0xec>
            ;
    }

    if (CSP_QSPI_EnableMemoryMappedMode() != HAL_OK)
 800069e:	f000 fcc3 	bl	8001028 <CSP_QSPI_EnableMemoryMappedMode>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d000      	beq.n	80006aa <main+0xfa>
    {

        while (1)
 80006a8:	e7fe      	b.n	80006a8 <main+0xf8>
            ; //breakpoint - error detected
    }


    for (var = 0; var < SECTORS_COUNT; var++)
 80006aa:	2300      	movs	r3, #0
 80006ac:	4a15      	ldr	r2, [pc, #84]	; (8000704 <main+0x154>)
 80006ae:	443a      	add	r2, r7
 80006b0:	6013      	str	r3, [r2, #0]
 80006b2:	e01a      	b.n	80006ea <main+0x13a>
    {
        if (memcmp(buffer_test,
                   (uint8_t *)(0x90000000 + var * MEMORY_SECTOR_SIZE),
 80006b4:	4b13      	ldr	r3, [pc, #76]	; (8000704 <main+0x154>)
 80006b6:	443b      	add	r3, r7
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 80006be:	041b      	lsls	r3, r3, #16
        if (memcmp(buffer_test,
 80006c0:	4619      	mov	r1, r3
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <main+0x158>)
 80006c4:	4a11      	ldr	r2, [pc, #68]	; (800070c <main+0x15c>)
 80006c6:	443a      	add	r2, r7
 80006c8:	4413      	add	r3, r2
 80006ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006ce:	4618      	mov	r0, r3
 80006d0:	f004 f820 	bl	8004714 <memcmp>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d000      	beq.n	80006dc <main+0x12c>
                   MEMORY_SECTOR_SIZE) != HAL_OK)
        {
            while (1)
 80006da:	e7fe      	b.n	80006da <main+0x12a>
    for (var = 0; var < SECTORS_COUNT; var++)
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <main+0x154>)
 80006de:	443b      	add	r3, r7
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	3301      	adds	r3, #1
 80006e4:	4a07      	ldr	r2, [pc, #28]	; (8000704 <main+0x154>)
 80006e6:	443a      	add	r2, r7
 80006e8:	6013      	str	r3, [r2, #0]
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <main+0x154>)
 80006ec:	443b      	add	r3, r7
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006f4:	d3de      	bcc.n	80006b4 <main+0x104>

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
    {
        printf("Test passed! \r\n");
 80006f6:	4806      	ldr	r0, [pc, #24]	; (8000710 <main+0x160>)
 80006f8:	f004 f880 	bl	80047fc <puts>
        HAL_Delay(20);
 80006fc:	2014      	movs	r0, #20
 80006fe:	f000 ff4d 	bl	800159c <HAL_Delay>
        printf("Test passed! \r\n");
 8000702:	e7f8      	b.n	80006f6 <main+0x146>
 8000704:	00010004 	.word	0x00010004
 8000708:	fffefffc 	.word	0xfffefffc
 800070c:	00010008 	.word	0x00010008
 8000710:	0800502c 	.word	0x0800502c

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b0b8      	sub	sp, #224	; 0xe0
 8000718:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800071e:	2234      	movs	r2, #52	; 0x34
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f004 f805 	bl	8004732 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000738:	f107 0308 	add.w	r3, r7, #8
 800073c:	2290      	movs	r2, #144	; 0x90
 800073e:	2100      	movs	r1, #0
 8000740:	4618      	mov	r0, r3
 8000742:	f003 fff6 	bl	8004732 <memset>

    /** Configure the main internal regulator output voltage
  */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000746:	4b39      	ldr	r3, [pc, #228]	; (800082c <SystemClock_Config+0x118>)
 8000748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074a:	4a38      	ldr	r2, [pc, #224]	; (800082c <SystemClock_Config+0x118>)
 800074c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000750:	6413      	str	r3, [r2, #64]	; 0x40
 8000752:	4b36      	ldr	r3, [pc, #216]	; (800082c <SystemClock_Config+0x118>)
 8000754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800075e:	4b34      	ldr	r3, [pc, #208]	; (8000830 <SystemClock_Config+0x11c>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a33      	ldr	r2, [pc, #204]	; (8000830 <SystemClock_Config+0x11c>)
 8000764:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000768:	6013      	str	r3, [r2, #0]
 800076a:	4b31      	ldr	r3, [pc, #196]	; (8000830 <SystemClock_Config+0x11c>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]
    /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000776:	2301      	movs	r3, #1
 8000778:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800077c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000780:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000784:	2302      	movs	r3, #2
 8000786:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800078a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800078e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    RCC_OscInitStruct.PLL.PLLM = 25;
 8000792:	2319      	movs	r3, #25
 8000794:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    RCC_OscInitStruct.PLL.PLLN = 432;
 8000798:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800079c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    RCC_OscInitStruct.PLL.PLLQ = 2;
 80007a6:	2302      	movs	r3, #2
 80007a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ac:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80007b0:	4618      	mov	r0, r3
 80007b2:	f002 f83f 	bl	8002834 <HAL_RCC_OscConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0xac>
    {
        Error_Handler();
 80007bc:	f000 f83a 	bl	8000834 <Error_Handler>
    }
    /** Activate the Over-Drive mode
  */
    if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007c0:	f001 fb16 	bl	8001df0 <HAL_PWREx_EnableOverDrive>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0xba>
    {
        Error_Handler();
 80007ca:	f000 f833 	bl	8000834 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
  */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80007ce:	230f      	movs	r3, #15
 80007d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d4:	2302      	movs	r3, #2
 80007d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007f0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80007f4:	2107      	movs	r1, #7
 80007f6:	4618      	mov	r0, r3
 80007f8:	f002 faca 	bl	8002d90 <HAL_RCC_ClockConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0xf2>
    {
        Error_Handler();
 8000802:	f000 f817 	bl	8000834 <Error_Handler>
    }
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000806:	2340      	movs	r3, #64	; 0x40
 8000808:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800080a:	2300      	movs	r3, #0
 800080c:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800080e:	f107 0308 	add.w	r3, r7, #8
 8000812:	4618      	mov	r0, r3
 8000814:	f002 fc8e 	bl	8003134 <HAL_RCCEx_PeriphCLKConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0x10e>
    {
        Error_Handler();
 800081e:	f000 f809 	bl	8000834 <Error_Handler>
    }
}
 8000822:	bf00      	nop
 8000824:	37e0      	adds	r7, #224	; 0xe0
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800
 8000830:	40007000 	.word	0x40007000

08000834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000838:	b672      	cpsid	i
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 800083a:	e7fe      	b.n	800083a <Error_Handler+0x6>

0800083c <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0

    hqspi.Instance = QUADSPI;
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <MX_QUADSPI_Init+0x50>)
 8000842:	4a13      	ldr	r2, [pc, #76]	; (8000890 <MX_QUADSPI_Init+0x54>)
 8000844:	601a      	str	r2, [r3, #0]
    hqspi.Init.ClockPrescaler = 2;
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_QUADSPI_Init+0x50>)
 8000848:	2202      	movs	r2, #2
 800084a:	605a      	str	r2, [r3, #4]
    hqspi.Init.FifoThreshold = 4;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_QUADSPI_Init+0x50>)
 800084e:	2204      	movs	r2, #4
 8000850:	609a      	str	r2, [r3, #8]
    hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_QUADSPI_Init+0x50>)
 8000854:	2210      	movs	r2, #16
 8000856:	60da      	str	r2, [r3, #12]
    hqspi.Init.FlashSize = 24;
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_QUADSPI_Init+0x50>)
 800085a:	2218      	movs	r2, #24
 800085c:	611a      	str	r2, [r3, #16]
    hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <MX_QUADSPI_Init+0x50>)
 8000860:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000864:	615a      	str	r2, [r3, #20]
    hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_QUADSPI_Init+0x50>)
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
    hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <MX_QUADSPI_Init+0x50>)
 800086e:	2200      	movs	r2, #0
 8000870:	61da      	str	r2, [r3, #28]
    hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_QUADSPI_Init+0x50>)
 8000874:	2200      	movs	r2, #0
 8000876:	621a      	str	r2, [r3, #32]
    if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000878:	4804      	ldr	r0, [pc, #16]	; (800088c <MX_QUADSPI_Init+0x50>)
 800087a:	f001 fb09 	bl	8001e90 <HAL_QSPI_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_QUADSPI_Init+0x4c>
    {
        Error_Handler();
 8000884:	f7ff ffd6 	bl	8000834 <Error_Handler>
    }
}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000098 	.word	0x20000098
 8000890:	a0001000 	.word	0xa0001000

08000894 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef *qspiHandle)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08a      	sub	sp, #40	; 0x28
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct =
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
        {0};
    if (qspiHandle->Instance == QUADSPI)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a37      	ldr	r2, [pc, #220]	; (8000990 <HAL_QSPI_MspInit+0xfc>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d167      	bne.n	8000986 <HAL_QSPI_MspInit+0xf2>
    {
        /* USER CODE BEGIN QUADSPI_MspInit 0 */

        /* USER CODE END QUADSPI_MspInit 0 */
        /* QUADSPI clock enable */
        __HAL_RCC_QSPI_CLK_ENABLE();
 80008b6:	4b37      	ldr	r3, [pc, #220]	; (8000994 <HAL_QSPI_MspInit+0x100>)
 80008b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008ba:	4a36      	ldr	r2, [pc, #216]	; (8000994 <HAL_QSPI_MspInit+0x100>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	6393      	str	r3, [r2, #56]	; 0x38
 80008c2:	4b34      	ldr	r3, [pc, #208]	; (8000994 <HAL_QSPI_MspInit+0x100>)
 80008c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ce:	4b31      	ldr	r3, [pc, #196]	; (8000994 <HAL_QSPI_MspInit+0x100>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a30      	ldr	r2, [pc, #192]	; (8000994 <HAL_QSPI_MspInit+0x100>)
 80008d4:	f043 0320 	orr.w	r3, r3, #32
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b2e      	ldr	r3, [pc, #184]	; (8000994 <HAL_QSPI_MspInit+0x100>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0320 	and.w	r3, r3, #32
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
        __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e6:	4b2b      	ldr	r3, [pc, #172]	; (8000994 <HAL_QSPI_MspInit+0x100>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a2a      	ldr	r2, [pc, #168]	; (8000994 <HAL_QSPI_MspInit+0x100>)
 80008ec:	f043 0302 	orr.w	r3, r3, #2
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b28      	ldr	r3, [pc, #160]	; (8000994 <HAL_QSPI_MspInit+0x100>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0302 	and.w	r3, r3, #2
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	68bb      	ldr	r3, [r7, #8]
		 PF8     ------> QUADSPI_BK1_IO0
		 PF9     ------> QUADSPI_BK1_IO1
		 PB2     ------> QUADSPI_CLK
		 PB6     ------> QUADSPI_BK1_NCS
		 */
        GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 80008fe:	23c0      	movs	r3, #192	; 0xc0
 8000900:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000906:	2301      	movs	r3, #1
 8000908:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090a:	2303      	movs	r3, #3
 800090c:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800090e:	2309      	movs	r3, #9
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	4619      	mov	r1, r3
 8000918:	481f      	ldr	r0, [pc, #124]	; (8000998 <HAL_QSPI_MspInit+0x104>)
 800091a:	f000 ff95 	bl	8001848 <HAL_GPIO_Init>

        GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 800091e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000922:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000924:	2302      	movs	r3, #2
 8000926:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000928:	2301      	movs	r3, #1
 800092a:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092c:	2303      	movs	r3, #3
 800092e:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000930:	230a      	movs	r3, #10
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	4619      	mov	r1, r3
 800093a:	4817      	ldr	r0, [pc, #92]	; (8000998 <HAL_QSPI_MspInit+0x104>)
 800093c:	f000 ff84 	bl	8001848 <HAL_GPIO_Init>

        GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000940:	2304      	movs	r3, #4
 8000942:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	2302      	movs	r3, #2
 8000946:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000948:	2301      	movs	r3, #1
 800094a:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094c:	2303      	movs	r3, #3
 800094e:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000950:	2309      	movs	r3, #9
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	4619      	mov	r1, r3
 800095a:	4810      	ldr	r0, [pc, #64]	; (800099c <HAL_QSPI_MspInit+0x108>)
 800095c:	f000 ff74 	bl	8001848 <HAL_GPIO_Init>

        GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000960:	2340      	movs	r3, #64	; 0x40
 8000962:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000968:	2301      	movs	r3, #1
 800096a:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096c:	2303      	movs	r3, #3
 800096e:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000970:	230a      	movs	r3, #10
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4619      	mov	r1, r3
 800097a:	4808      	ldr	r0, [pc, #32]	; (800099c <HAL_QSPI_MspInit+0x108>)
 800097c:	f000 ff64 	bl	8001848 <HAL_GPIO_Init>

        HAL_I2CEx_EnableFastModePlus(SYSCFG_PMC_I2C_PB6_FMP);
 8000980:	2010      	movs	r0, #16
 8000982:	f001 fa15 	bl	8001db0 <HAL_I2CEx_EnableFastModePlus>

        /* USER CODE BEGIN QUADSPI_MspInit 1 */

        /* USER CODE END QUADSPI_MspInit 1 */
    }
}
 8000986:	bf00      	nop
 8000988:	3728      	adds	r7, #40	; 0x28
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	a0001000 	.word	0xa0001000
 8000994:	40023800 	.word	0x40023800
 8000998:	40021400 	.word	0x40021400
 800099c:	40020400 	.word	0x40020400

080009a0 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef *qspiHandle)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]

    if (qspiHandle->Instance == QUADSPI)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a0a      	ldr	r2, [pc, #40]	; (80009d8 <HAL_QSPI_MspDeInit+0x38>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d10e      	bne.n	80009d0 <HAL_QSPI_MspDeInit+0x30>
    {
        /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

        /* USER CODE END QUADSPI_MspDeInit 0 */
        /* Peripheral clock disable */
        __HAL_RCC_QSPI_CLK_DISABLE();
 80009b2:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <HAL_QSPI_MspDeInit+0x3c>)
 80009b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009b6:	4a09      	ldr	r2, [pc, #36]	; (80009dc <HAL_QSPI_MspDeInit+0x3c>)
 80009b8:	f023 0302 	bic.w	r3, r3, #2
 80009bc:	6393      	str	r3, [r2, #56]	; 0x38
		 PF8     ------> QUADSPI_BK1_IO0
		 PF9     ------> QUADSPI_BK1_IO1
		 PB2     ------> QUADSPI_CLK
		 PB6     ------> QUADSPI_BK1_NCS
		 */
        HAL_GPIO_DeInit(GPIOF,
 80009be:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80009c2:	4807      	ldr	r0, [pc, #28]	; (80009e0 <HAL_QSPI_MspDeInit+0x40>)
 80009c4:	f001 f8ea 	bl	8001b9c <HAL_GPIO_DeInit>
                        GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9);

        HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2 | GPIO_PIN_6);
 80009c8:	2144      	movs	r1, #68	; 0x44
 80009ca:	4806      	ldr	r0, [pc, #24]	; (80009e4 <HAL_QSPI_MspDeInit+0x44>)
 80009cc:	f001 f8e6 	bl	8001b9c <HAL_GPIO_DeInit>

        /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

        /* USER CODE END QUADSPI_MspDeInit 1 */
    }
}
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	a0001000 	.word	0xa0001000
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40021400 	.word	0x40021400
 80009e4:	40020400 	.word	0x40020400

080009e8 <CSP_QUADSPI_Init>:

/* USER CODE BEGIN 1 */
/* QUADSPI init function */
uint8_t CSP_QUADSPI_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
    //prepare QSPI peripheral for ST-Link Utility operations
    hqspi.Instance = QUADSPI;
 80009ec:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <CSP_QUADSPI_Init+0x70>)
 80009ee:	4a1b      	ldr	r2, [pc, #108]	; (8000a5c <CSP_QUADSPI_Init+0x74>)
 80009f0:	601a      	str	r2, [r3, #0]
    if (HAL_QSPI_DeInit(&hqspi) != HAL_OK)
 80009f2:	4819      	ldr	r0, [pc, #100]	; (8000a58 <CSP_QUADSPI_Init+0x70>)
 80009f4:	f001 fac8 	bl	8001f88 <HAL_QSPI_DeInit>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <CSP_QUADSPI_Init+0x1a>
    {
        return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	e028      	b.n	8000a54 <CSP_QUADSPI_Init+0x6c>
    }

    MX_QUADSPI_Init();
 8000a02:	f7ff ff1b 	bl	800083c <MX_QUADSPI_Init>

    // QSPI_QPIModeDisable();

    if (QSPI_ResetChip() != HAL_OK)
 8000a06:	f000 fb43 	bl	8001090 <QSPI_ResetChip>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <CSP_QUADSPI_Init+0x2c>
    {
        return HAL_ERROR;
 8000a10:	2301      	movs	r3, #1
 8000a12:	e01f      	b.n	8000a54 <CSP_QUADSPI_Init+0x6c>
    }

    HAL_Delay(1);
 8000a14:	2001      	movs	r0, #1
 8000a16:	f000 fdc1 	bl	800159c <HAL_Delay>

    if (QSPI_AutoPollingMemReady() != HAL_OK)
 8000a1a:	f000 f821 	bl	8000a60 <QSPI_AutoPollingMemReady>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <CSP_QUADSPI_Init+0x40>
    {
        return HAL_ERROR;
 8000a24:	2301      	movs	r3, #1
 8000a26:	e015      	b.n	8000a54 <CSP_QUADSPI_Init+0x6c>
    }

    if (QSPI_WriteEnable() != HAL_OK)
 8000a28:	f000 f858 	bl	8000adc <QSPI_WriteEnable>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <CSP_QUADSPI_Init+0x4e>
    {

        return HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
 8000a34:	e00e      	b.n	8000a54 <CSP_QUADSPI_Init+0x6c>
    }

    if (QSPI_Configuration() != HAL_OK)
 8000a36:	f000 f95f 	bl	8000cf8 <QSPI_Configuration>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <CSP_QUADSPI_Init+0x5c>
    {
        return HAL_ERROR;
 8000a40:	2301      	movs	r3, #1
 8000a42:	e007      	b.n	8000a54 <CSP_QUADSPI_Init+0x6c>
    }

    if (QSPI_QPIModeEnable() != HAL_OK)
 8000a44:	f000 f89a 	bl	8000b7c <QSPI_QPIModeEnable>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <CSP_QUADSPI_Init+0x6a>
    {
        return HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e000      	b.n	8000a54 <CSP_QUADSPI_Init+0x6c>
    }

    return HAL_OK;
 8000a52:	2300      	movs	r3, #0
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000098 	.word	0x20000098
 8000a5c:	a0001000 	.word	0xa0001000

08000a60 <QSPI_AutoPollingMemReady>:

    return HAL_OK;
}

uint8_t QSPI_AutoPollingMemReady(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b094      	sub	sp, #80	; 0x50
 8000a64:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    QSPI_AutoPollingTypeDef sConfig;

    /* Configure automatic polling mode to wait for memory ready ------ */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000a66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a6a:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.Instruction = READ_STATUS_REG_CMD;
 8000a6c:	2305      	movs	r3, #5
 8000a6e:	61bb      	str	r3, [r7, #24]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000a70:	2300      	movs	r3, #0
 8000a72:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.DataMode = QSPI_DATA_4_LINES;
 8000a78:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.DummyCycles = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000a82:	2300      	movs	r3, #0
 8000a84:	647b      	str	r3, [r7, #68]	; 0x44
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000a86:	2300      	movs	r3, #0
 8000a88:	64bb      	str	r3, [r7, #72]	; 0x48
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	64fb      	str	r3, [r7, #76]	; 0x4c

    sConfig.Match = 0x00;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	603b      	str	r3, [r7, #0]
    sConfig.Mask = 0x01;
 8000a92:	2301      	movs	r3, #1
 8000a94:	607b      	str	r3, [r7, #4]
    sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
    sConfig.StatusBytesSize = 1;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	60fb      	str	r3, [r7, #12]
    sConfig.Interval = 0x10;
 8000a9e:	2310      	movs	r3, #16
 8000aa0:	60bb      	str	r3, [r7, #8]
    sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000aa2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000aa6:	617b      	str	r3, [r7, #20]

    if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8000aa8:	463a      	mov	r2, r7
 8000aaa:	f107 0118 	add.w	r1, r7, #24
 8000aae:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ab2:	4808      	ldr	r0, [pc, #32]	; (8000ad4 <QSPI_AutoPollingMemReady+0x74>)
 8000ab4:	f001 fc19 	bl	80022ea <HAL_QSPI_AutoPolling>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d004      	beq.n	8000ac8 <QSPI_AutoPollingMemReady+0x68>
                             HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
    {
        printf("AutoPolling mode error!\r\n");
 8000abe:	4806      	ldr	r0, [pc, #24]	; (8000ad8 <QSPI_AutoPollingMemReady+0x78>)
 8000ac0:	f003 fe9c 	bl	80047fc <puts>
        return HAL_ERROR;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	e000      	b.n	8000aca <QSPI_AutoPollingMemReady+0x6a>
    }

    return HAL_OK;
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3750      	adds	r7, #80	; 0x50
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000098 	.word	0x20000098
 8000ad8:	0800503c 	.word	0x0800503c

08000adc <QSPI_WriteEnable>:

static uint8_t QSPI_WriteEnable(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b094      	sub	sp, #80	; 0x50
 8000ae0:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    QSPI_AutoPollingTypeDef sConfig;

    /* Enable write operations ------------------------------------------ */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000ae2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ae6:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.Instruction = WRITE_ENABLE_CMD;
 8000ae8:	2306      	movs	r3, #6
 8000aea:	61bb      	str	r3, [r7, #24]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.AddressSize = QSPI_ADDRESS_8_BITS;
 8000af0:	2300      	movs	r3, #0
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.DataMode = QSPI_DATA_4_LINES;
 8000af8:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000afc:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.DummyCycles = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000b02:	2300      	movs	r3, #0
 8000b04:	647b      	str	r3, [r7, #68]	; 0x44
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000b06:	2300      	movs	r3, #0
 8000b08:	64bb      	str	r3, [r7, #72]	; 0x48
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000b0e:	f107 0318 	add.w	r3, r7, #24
 8000b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b16:	4619      	mov	r1, r3
 8000b18:	4817      	ldr	r0, [pc, #92]	; (8000b78 <QSPI_WriteEnable+0x9c>)
 8000b1a:	f001 fa59 	bl	8001fd0 <HAL_QSPI_Command>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <QSPI_WriteEnable+0x4c>
    {
        return HAL_ERROR;
 8000b24:	2301      	movs	r3, #1
 8000b26:	e022      	b.n	8000b6e <QSPI_WriteEnable+0x92>
    }

    /* Configure automatic polling mode to wait for write enabling ---- */
    sConfig.Match = 0x02;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	603b      	str	r3, [r7, #0]
    sConfig.Mask = 0x02;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	607b      	str	r3, [r7, #4]
    sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8000b30:	2300      	movs	r3, #0
 8000b32:	613b      	str	r3, [r7, #16]
    sConfig.StatusBytesSize = 1;
 8000b34:	2301      	movs	r3, #1
 8000b36:	60fb      	str	r3, [r7, #12]
    sConfig.Interval = 0x10;
 8000b38:	2310      	movs	r3, #16
 8000b3a:	60bb      	str	r3, [r7, #8]
    sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000b3c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b40:	617b      	str	r3, [r7, #20]

    sCommand.Instruction = READ_STATUS_REG_CMD;
 8000b42:	2305      	movs	r3, #5
 8000b44:	61bb      	str	r3, [r7, #24]
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000b46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b4a:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DataMode = QSPI_DATA_4_LINES;
 8000b4c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000b50:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8000b52:	463a      	mov	r2, r7
 8000b54:	f107 0118 	add.w	r1, r7, #24
 8000b58:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b5c:	4806      	ldr	r0, [pc, #24]	; (8000b78 <QSPI_WriteEnable+0x9c>)
 8000b5e:	f001 fbc4 	bl	80022ea <HAL_QSPI_AutoPolling>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <QSPI_WriteEnable+0x90>
                             HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
    {
        return HAL_ERROR;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	e000      	b.n	8000b6e <QSPI_WriteEnable+0x92>
    }

    return HAL_OK;
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3750      	adds	r7, #80	; 0x50
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000098 	.word	0x20000098

08000b7c <QSPI_QPIModeEnable>:

static uint8_t QSPI_QPIModeEnable(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b090      	sub	sp, #64	; 0x40
 8000b80:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    uint8_t reg;

    /* Read out value of Status Resister 2 ---------------------- */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000b82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b86:	623b      	str	r3, [r7, #32]
    sCommand.Instruction = READ_STATUS_REG2_CMD;
 8000b88:	2335      	movs	r3, #53	; 0x35
 8000b8a:	60bb      	str	r3, [r7, #8]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DataMode = QSPI_DATA_4_LINES;
 8000b94:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.NbData = 1;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DummyCycles = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000baa:	2300      	movs	r3, #0
 8000bac:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000bae:	f107 0308 	add.w	r3, r7, #8
 8000bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	484e      	ldr	r0, [pc, #312]	; (8000cf4 <QSPI_QPIModeEnable+0x178>)
 8000bba:	f001 fa09 	bl	8001fd0 <HAL_QSPI_Command>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <QSPI_QPIModeEnable+0x4c>
    {
        return HAL_ERROR;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	e090      	b.n	8000cea <QSPI_QPIModeEnable+0x16e>
    }

    if (HAL_QSPI_Receive(&hqspi, &reg,
 8000bc8:	1dfb      	adds	r3, r7, #7
 8000bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4848      	ldr	r0, [pc, #288]	; (8000cf4 <QSPI_QPIModeEnable+0x178>)
 8000bd2:	f001 faed 	bl	80021b0 <HAL_QSPI_Receive>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <QSPI_QPIModeEnable+0x64>
                         HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
    {
        return HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	e084      	b.n	8000cea <QSPI_QPIModeEnable+0x16e>
    }

    if ((reg & 0X02) == 0)
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d128      	bne.n	8000c3c <QSPI_QPIModeEnable+0xc0>
    {
        if (QSPI_WriteEnable() != HAL_OK)
 8000bea:	f7ff ff77 	bl	8000adc <QSPI_WriteEnable>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <QSPI_QPIModeEnable+0x7c>
        {

            return HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e078      	b.n	8000cea <QSPI_QPIModeEnable+0x16e>
        }
        reg |= 1 << 1;
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	f043 0302 	orr.w	r3, r3, #2
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	71fb      	strb	r3, [r7, #7]

        sCommand.Instruction = WRITE_STATUS_REG2_CMD;
 8000c02:	2331      	movs	r3, #49	; 0x31
 8000c04:	60bb      	str	r3, [r7, #8]

        if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c06:	f107 0308 	add.w	r3, r7, #8
 8000c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4838      	ldr	r0, [pc, #224]	; (8000cf4 <QSPI_QPIModeEnable+0x178>)
 8000c12:	f001 f9dd 	bl	8001fd0 <HAL_QSPI_Command>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <QSPI_QPIModeEnable+0xa4>
        {
            return HAL_ERROR;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	e064      	b.n	8000cea <QSPI_QPIModeEnable+0x16e>
        }

        if (HAL_QSPI_Transmit(&hqspi, &reg,
 8000c20:	1dfb      	adds	r3, r7, #7
 8000c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c26:	4619      	mov	r1, r3
 8000c28:	4832      	ldr	r0, [pc, #200]	; (8000cf4 <QSPI_QPIModeEnable+0x178>)
 8000c2a:	f001 fa2f 	bl	800208c <HAL_QSPI_Transmit>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d003      	beq.n	8000c3c <QSPI_QPIModeEnable+0xc0>
                              HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
        {
            Error_Handler();
 8000c34:	f7ff fdfe 	bl	8000834 <Error_Handler>
            return HAL_ERROR;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	e056      	b.n	8000cea <QSPI_QPIModeEnable+0x16e>
        }
    }

    /* Enable QPI mode ------------------------------------------ */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000c3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c40:	623b      	str	r3, [r7, #32]
    sCommand.Instruction = ENTER_QPI_MODE_CMD;
 8000c42:	2338      	movs	r3, #56	; 0x38
 8000c44:	60bb      	str	r3, [r7, #8]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DataMode = QSPI_DATA_NONE;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DummyCycles = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000c56:	2300      	movs	r3, #0
 8000c58:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c62:	f107 0308 	add.w	r3, r7, #8
 8000c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4821      	ldr	r0, [pc, #132]	; (8000cf4 <QSPI_QPIModeEnable+0x178>)
 8000c6e:	f001 f9af 	bl	8001fd0 <HAL_QSPI_Command>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <QSPI_QPIModeEnable+0x100>
    {
        return HAL_ERROR;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	e036      	b.n	8000cea <QSPI_QPIModeEnable+0x16e>
    }

    /* Read out value of Status Resister 2 ---------------------- */
    sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8000c7c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c80:	623b      	str	r3, [r7, #32]
    sCommand.Instruction = READ_STATUS_REG2_CMD;
 8000c82:	2335      	movs	r3, #53	; 0x35
 8000c84:	60bb      	str	r3, [r7, #8]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000c86:	2300      	movs	r3, #0
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DataMode = QSPI_DATA_4_LINES;
 8000c8e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.NbData = 1;
 8000c94:	2301      	movs	r3, #1
 8000c96:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DummyCycles = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61fb      	str	r3, [r7, #28]
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ca8:	f107 0308 	add.w	r3, r7, #8
 8000cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4810      	ldr	r0, [pc, #64]	; (8000cf4 <QSPI_QPIModeEnable+0x178>)
 8000cb4:	f001 f98c 	bl	8001fd0 <HAL_QSPI_Command>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <QSPI_QPIModeEnable+0x146>
    {
        return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e013      	b.n	8000cea <QSPI_QPIModeEnable+0x16e>
    }

    if (HAL_QSPI_Receive(&hqspi, &reg,
 8000cc2:	1dfb      	adds	r3, r7, #7
 8000cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cc8:	4619      	mov	r1, r3
 8000cca:	480a      	ldr	r0, [pc, #40]	; (8000cf4 <QSPI_QPIModeEnable+0x178>)
 8000ccc:	f001 fa70 	bl	80021b0 <HAL_QSPI_Receive>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <QSPI_QPIModeEnable+0x15e>
                         HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
    {
        return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e007      	b.n	8000cea <QSPI_QPIModeEnable+0x16e>
    }

    if ((reg & 0X02) == 0)
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	f003 0302 	and.w	r3, r3, #2
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d101      	bne.n	8000ce8 <QSPI_QPIModeEnable+0x16c>
    {
        return HAL_ERROR;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	e000      	b.n	8000cea <QSPI_QPIModeEnable+0x16e>
    }

    return HAL_OK;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3740      	adds	r7, #64	; 0x40
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000098 	.word	0x20000098

08000cf8 <QSPI_Configuration>:
    return HAL_OK;
}

/*Enable quad mode and set dummy cycles count*/
uint8_t QSPI_Configuration(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b090      	sub	sp, #64	; 0x40
 8000cfc:	af00      	add	r7, sp, #0

    QSPI_CommandTypeDef sCommand;
    uint8_t reg = 3 << 4;
 8000cfe:	2330      	movs	r3, #48	; 0x30
 8000d00:	71fb      	strb	r3, [r7, #7]

    /*enter 4 byte address*/
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000d02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d06:	623b      	str	r3, [r7, #32]
    sCommand.Instruction = ENTER_4_BYTE_ADD_CMD;
 8000d08:	23b7      	movs	r3, #183	; 0xb7
 8000d0a:	60bb      	str	r3, [r7, #8]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DataMode = QSPI_DATA_4_LINES;
 8000d14:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000d18:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DummyCycles = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000d22:	2300      	movs	r3, #0
 8000d24:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000d26:	2300      	movs	r3, #0
 8000d28:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.NbData = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000d2e:	f107 0308 	add.w	r3, r7, #8
 8000d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d36:	4619      	mov	r1, r3
 8000d38:	481e      	ldr	r0, [pc, #120]	; (8000db4 <QSPI_Configuration+0xbc>)
 8000d3a:	f001 f949 	bl	8001fd0 <HAL_QSPI_Command>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <QSPI_Configuration+0x50>
    {
        return HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	e031      	b.n	8000dac <QSPI_Configuration+0xb4>
    // }

    // /*set dummy cycles*/
    // MODIFY_REG(reg, 0xF0, (DUMMY_CLOCK_CYCLES_READ_QUAD << POSITION_VAL(0xF0)));

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000d48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d4c:	623b      	str	r3, [r7, #32]
    sCommand.Instruction = WRITE_VOL_CFG_REG_CMD;
 8000d4e:	23c0      	movs	r3, #192	; 0xc0
 8000d50:	60bb      	str	r3, [r7, #8]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000d56:	2300      	movs	r3, #0
 8000d58:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000d62:	2300      	movs	r3, #0
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DataMode = QSPI_DATA_4_LINES;
 8000d66:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DummyCycles = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61fb      	str	r3, [r7, #28]
    sCommand.NbData = 1;
 8000d70:	2301      	movs	r3, #1
 8000d72:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000d74:	f107 0308 	add.w	r3, r7, #8
 8000d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	480d      	ldr	r0, [pc, #52]	; (8000db4 <QSPI_Configuration+0xbc>)
 8000d80:	f001 f926 	bl	8001fd0 <HAL_QSPI_Command>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <QSPI_Configuration+0x96>
    {
        return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e00e      	b.n	8000dac <QSPI_Configuration+0xb4>
    }

    if (HAL_QSPI_Transmit(&hqspi, &reg,
 8000d8e:	1dfb      	adds	r3, r7, #7
 8000d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d94:	4619      	mov	r1, r3
 8000d96:	4807      	ldr	r0, [pc, #28]	; (8000db4 <QSPI_Configuration+0xbc>)
 8000d98:	f001 f978 	bl	800208c <HAL_QSPI_Transmit>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d003      	beq.n	8000daa <QSPI_Configuration+0xb2>
                          HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
    {
        Error_Handler();
 8000da2:	f7ff fd47 	bl	8000834 <Error_Handler>
        return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e000      	b.n	8000dac <QSPI_Configuration+0xb4>
    }
    return HAL_OK;
 8000daa:	2300      	movs	r3, #0
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3740      	adds	r7, #64	; 0x40
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000098 	.word	0x20000098

08000db8 <CSP_QSPI_EraseSector>:

uint8_t CSP_QSPI_EraseSector(uint32_t EraseStartAddress,
                             uint32_t EraseEndAddress)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b090      	sub	sp, #64	; 0x40
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]

    QSPI_CommandTypeDef sCommand;

    EraseStartAddress = EraseStartAddress - EraseStartAddress % MEMORY_SECTOR_SIZE;
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	4b26      	ldr	r3, [pc, #152]	; (8000e60 <CSP_QSPI_EraseSector+0xa8>)
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	607b      	str	r3, [r7, #4]

    /* Erasing Sequence -------------------------------------------------- */
    sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8000dca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dce:	623b      	str	r3, [r7, #32]
    sCommand.Instruction = SECTOR_ERASE_CMD;
 8000dd0:	2320      	movs	r3, #32
 8000dd2:	60bb      	str	r3, [r7, #8]
    sCommand.AddressSize = QSPI_ADDRESS_32_BITS;
 8000dd4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000dd8:	617b      	str	r3, [r7, #20]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000dde:	2300      	movs	r3, #0
 8000de0:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000de2:	2300      	movs	r3, #0
 8000de4:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000de6:	2300      	movs	r3, #0
 8000de8:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.AddressMode = QSPI_ADDRESS_4_LINES;
 8000dea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DataMode = QSPI_DATA_NONE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DummyCycles = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	61fb      	str	r3, [r7, #28]

    while (EraseEndAddress >= EraseStartAddress)
 8000df8:	e028      	b.n	8000e4c <CSP_QSPI_EraseSector+0x94>
    {
        sCommand.Address = (EraseStartAddress & 0x0FFFFFFF);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000e00:	60fb      	str	r3, [r7, #12]

        if (QSPI_WriteEnable() != HAL_OK)
 8000e02:	f7ff fe6b 	bl	8000adc <QSPI_WriteEnable>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d004      	beq.n	8000e16 <CSP_QSPI_EraseSector+0x5e>
        {
            printf("Write enable error! \r\n");
 8000e0c:	4815      	ldr	r0, [pc, #84]	; (8000e64 <CSP_QSPI_EraseSector+0xac>)
 8000e0e:	f003 fcf5 	bl	80047fc <puts>
            return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e01f      	b.n	8000e56 <CSP_QSPI_EraseSector+0x9e>
        }

        if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000e16:	f107 0308 	add.w	r3, r7, #8
 8000e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4811      	ldr	r0, [pc, #68]	; (8000e68 <CSP_QSPI_EraseSector+0xb0>)
 8000e22:	f001 f8d5 	bl	8001fd0 <HAL_QSPI_Command>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d004      	beq.n	8000e36 <CSP_QSPI_EraseSector+0x7e>
        {
            printf("Erase error! \r\n");
 8000e2c:	480f      	ldr	r0, [pc, #60]	; (8000e6c <CSP_QSPI_EraseSector+0xb4>)
 8000e2e:	f003 fce5 	bl	80047fc <puts>
            return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e00f      	b.n	8000e56 <CSP_QSPI_EraseSector+0x9e>
        }
        EraseStartAddress += MEMORY_SECTOR_SIZE;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000e3c:	607b      	str	r3, [r7, #4]

        if (QSPI_AutoPollingMemReady() != HAL_OK)
 8000e3e:	f7ff fe0f 	bl	8000a60 <QSPI_AutoPollingMemReady>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <CSP_QSPI_EraseSector+0x94>
        {
            return HAL_ERROR;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	e004      	b.n	8000e56 <CSP_QSPI_EraseSector+0x9e>
    while (EraseEndAddress >= EraseStartAddress)
 8000e4c:	683a      	ldr	r2, [r7, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d2d2      	bcs.n	8000dfa <CSP_QSPI_EraseSector+0x42>
        }
    }

    return HAL_OK;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3740      	adds	r7, #64	; 0x40
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	ffff0000 	.word	0xffff0000
 8000e64:	08005058 	.word	0x08005058
 8000e68:	20000098 	.word	0x20000098
 8000e6c:	08005070 	.word	0x08005070

08000e70 <CSP_QSPI_WriteMemory>:

uint8_t CSP_QSPI_WriteMemory(uint8_t *buffer, uint32_t address,
                             uint32_t buffer_size)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b096      	sub	sp, #88	; 0x58
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]

    QSPI_CommandTypeDef sCommand;
    uint32_t end_addr, current_size, current_addr;

    /* Calculation of the size between the write address and the end of the page */
    current_addr = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	653b      	str	r3, [r7, #80]	; 0x50

    while (current_addr <= address)
 8000e80:	e003      	b.n	8000e8a <CSP_QSPI_WriteMemory+0x1a>
    {
        current_addr += MEMORY_PAGE_SIZE;
 8000e82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e88:	653b      	str	r3, [r7, #80]	; 0x50
    while (current_addr <= address)
 8000e8a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d9f7      	bls.n	8000e82 <CSP_QSPI_WriteMemory+0x12>
    }
    current_size = current_addr - address;
 8000e92:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	657b      	str	r3, [r7, #84]	; 0x54

    /* Check if the size of the data is less than the remaining place in the page */
    if (current_size > buffer_size)
 8000e9a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d901      	bls.n	8000ea6 <CSP_QSPI_WriteMemory+0x36>
    {
        current_size = buffer_size;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	657b      	str	r3, [r7, #84]	; 0x54
    }

    /* Initialize the adress variables */
    current_addr = address;
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	653b      	str	r3, [r7, #80]	; 0x50
    end_addr = address + buffer_size;
 8000eaa:	68ba      	ldr	r2, [r7, #8]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4413      	add	r3, r2
 8000eb0:	64fb      	str	r3, [r7, #76]	; 0x4c

    sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8000eb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.Instruction = QUAD_IN_FAST_PROG_CMD;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	617b      	str	r3, [r7, #20]
    sCommand.AddressSize = QSPI_ADDRESS_32_BITS;
 8000ebc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ec0:	623b      	str	r3, [r7, #32]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	643b      	str	r3, [r7, #64]	; 0x40
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	647b      	str	r3, [r7, #68]	; 0x44
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	64bb      	str	r3, [r7, #72]	; 0x48
    sCommand.AddressMode = QSPI_ADDRESS_4_LINES;
 8000ed2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ed6:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DataMode = QSPI_DATA_4_LINES;
 8000ed8:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000edc:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.NbData = buffer_size;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.Address = address;
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	61bb      	str	r3, [r7, #24]
    sCommand.DummyCycles = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Perform the write page by page */
    do
    {
        sCommand.Address = current_addr;
 8000eea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000eec:	61bb      	str	r3, [r7, #24]
        sCommand.NbData = current_size;
 8000eee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ef0:	63fb      	str	r3, [r7, #60]	; 0x3c

        if (current_size == 0)
 8000ef2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d101      	bne.n	8000efc <CSP_QSPI_WriteMemory+0x8c>
        {
            return HAL_OK;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	e046      	b.n	8000f8a <CSP_QSPI_WriteMemory+0x11a>
        }

        /* Enable write operations */
        if (QSPI_WriteEnable() != HAL_OK)
 8000efc:	f7ff fdee 	bl	8000adc <QSPI_WriteEnable>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <CSP_QSPI_WriteMemory+0x9a>
        {
            return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e03f      	b.n	8000f8a <CSP_QSPI_WriteMemory+0x11a>
        }

        /* Configure the command */
        if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f12:	4619      	mov	r1, r3
 8000f14:	481f      	ldr	r0, [pc, #124]	; (8000f94 <CSP_QSPI_WriteMemory+0x124>)
 8000f16:	f001 f85b 	bl	8001fd0 <HAL_QSPI_Command>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <CSP_QSPI_WriteMemory+0xb4>
        {

            return HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	e032      	b.n	8000f8a <CSP_QSPI_WriteMemory+0x11a>
        }

        /* Enable write operations */
        if (QSPI_WriteEnable() != HAL_OK)
 8000f24:	f7ff fdda 	bl	8000adc <QSPI_WriteEnable>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <CSP_QSPI_WriteMemory+0xc2>
        {
            return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e02b      	b.n	8000f8a <CSP_QSPI_WriteMemory+0x11a>
        }

        /* Transmission of the data */
        if (HAL_QSPI_Transmit(&hqspi, buffer, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f36:	68f9      	ldr	r1, [r7, #12]
 8000f38:	4816      	ldr	r0, [pc, #88]	; (8000f94 <CSP_QSPI_WriteMemory+0x124>)
 8000f3a:	f001 f8a7 	bl	800208c <HAL_QSPI_Transmit>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <CSP_QSPI_WriteMemory+0xd8>
        {

            return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e020      	b.n	8000f8a <CSP_QSPI_WriteMemory+0x11a>
        }

        /* Configure automatic polling mode to wait for end of program */
        if (QSPI_AutoPollingMemReady() != HAL_OK)
 8000f48:	f7ff fd8a 	bl	8000a60 <QSPI_AutoPollingMemReady>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <CSP_QSPI_WriteMemory+0xe6>
        {
            return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e019      	b.n	8000f8a <CSP_QSPI_WriteMemory+0x11a>
        }

        /* Update the address and size variables for next page programming */
        current_addr += current_size;
 8000f56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000f58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f5a:	4413      	add	r3, r2
 8000f5c:	653b      	str	r3, [r7, #80]	; 0x50
        buffer += current_size;
 8000f5e:	68fa      	ldr	r2, [r7, #12]
 8000f60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f62:	4413      	add	r3, r2
 8000f64:	60fb      	str	r3, [r7, #12]
        current_size =
            ((current_addr + MEMORY_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MEMORY_PAGE_SIZE;
 8000f66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d203      	bcs.n	8000f7a <CSP_QSPI_WriteMemory+0x10a>
 8000f72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	e001      	b.n	8000f7e <CSP_QSPI_WriteMemory+0x10e>
 8000f7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
        current_size =
 8000f7e:	657b      	str	r3, [r7, #84]	; 0x54
    } while (current_addr <= end_addr);
 8000f80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000f82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d9b0      	bls.n	8000eea <CSP_QSPI_WriteMemory+0x7a>

    return HAL_OK;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3758      	adds	r7, #88	; 0x58
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000098 	.word	0x20000098

08000f98 <CSP_QSPI_ReadMemory>:

uint8_t CSP_QSPI_ReadMemory(uint8_t *buffer, uint32_t address,
                            uint32_t buffer_size)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b092      	sub	sp, #72	; 0x48
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
    QSPI_CommandTypeDef sCommand;

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000fa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.Instruction = QUAD_OUT_FAST_READ_CMD;
 8000faa:	23eb      	movs	r3, #235	; 0xeb
 8000fac:	613b      	str	r3, [r7, #16]
    sCommand.AddressSize = QSPI_ADDRESS_32_BITS;
 8000fae:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000fb2:	61fb      	str	r3, [r7, #28]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	643b      	str	r3, [r7, #64]	; 0x40
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	647b      	str	r3, [r7, #68]	; 0x44
    sCommand.AddressMode = QSPI_ADDRESS_4_LINES;
 8000fc4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DataMode = QSPI_DATA_4_LINES;
 8000fca:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000fce:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.NbData = buffer_size;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Address = address;
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	617b      	str	r3, [r7, #20]
    sCommand.DummyCycles = 8;
 8000fd8:	2308      	movs	r3, #8
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24

    /* Enable write operations */
    if (QSPI_WriteEnable() != HAL_OK)
 8000fdc:	f7ff fd7e 	bl	8000adc <QSPI_WriteEnable>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <CSP_QSPI_ReadMemory+0x52>
    {
        return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e018      	b.n	800101c <CSP_QSPI_ReadMemory+0x84>
    }

    /* Configure the command */
    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000fea:	f107 0310 	add.w	r3, r7, #16
 8000fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	480b      	ldr	r0, [pc, #44]	; (8001024 <CSP_QSPI_ReadMemory+0x8c>)
 8000ff6:	f000 ffeb 	bl	8001fd0 <HAL_QSPI_Command>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <CSP_QSPI_ReadMemory+0x6c>
    {

        return HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	e00b      	b.n	800101c <CSP_QSPI_ReadMemory+0x84>
    }

    if (HAL_QSPI_Receive(&hqspi, buffer,
 8001004:	f241 3288 	movw	r2, #5000	; 0x1388
 8001008:	68f9      	ldr	r1, [r7, #12]
 800100a:	4806      	ldr	r0, [pc, #24]	; (8001024 <CSP_QSPI_ReadMemory+0x8c>)
 800100c:	f001 f8d0 	bl	80021b0 <HAL_QSPI_Receive>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <CSP_QSPI_ReadMemory+0x82>
                         HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
    {
        return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e000      	b.n	800101c <CSP_QSPI_ReadMemory+0x84>
    }

    return HAL_OK;
 800101a:	2300      	movs	r3, #0
}
 800101c:	4618      	mov	r0, r3
 800101e:	3748      	adds	r7, #72	; 0x48
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000098 	.word	0x20000098

08001028 <CSP_QSPI_EnableMemoryMappedMode>:

uint8_t CSP_QSPI_EnableMemoryMappedMode(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b090      	sub	sp, #64	; 0x40
 800102c:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    QSPI_MemoryMappedTypeDef sMemMappedCfg;

    /* Enable Memory-Mapped mode-------------------------------------------------- */

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800102e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001032:	623b      	str	r3, [r7, #32]
    sCommand.Instruction = QUAD_OUT_FAST_READ_CMD;
 8001034:	23eb      	movs	r3, #235	; 0xeb
 8001036:	60bb      	str	r3, [r7, #8]
    sCommand.AddressSize = QSPI_ADDRESS_32_BITS;
 8001038:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800103c:	617b      	str	r3, [r7, #20]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800103e:	2300      	movs	r3, #0
 8001040:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001042:	2300      	movs	r3, #0
 8001044:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001046:	2300      	movs	r3, #0
 8001048:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800104a:	2300      	movs	r3, #0
 800104c:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.AddressMode = QSPI_ADDRESS_4_LINES;
 800104e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DataMode = QSPI_DATA_4_LINES;
 8001054:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001058:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.NbData = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.Address = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
    sCommand.DummyCycles = 8;
 8001062:	2308      	movs	r3, #8
 8001064:	61fb      	str	r3, [r7, #28]

    sMemMappedCfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8001066:	2300      	movs	r3, #0
 8001068:	607b      	str	r3, [r7, #4]
    // sMemMappedCfg.TimeOutPeriod = 0;

    if (HAL_QSPI_MemoryMapped(&hqspi, &sCommand, &sMemMappedCfg) != HAL_OK)
 800106a:	463a      	mov	r2, r7
 800106c:	f107 0308 	add.w	r3, r7, #8
 8001070:	4619      	mov	r1, r3
 8001072:	4806      	ldr	r0, [pc, #24]	; (800108c <CSP_QSPI_EnableMemoryMappedMode+0x64>)
 8001074:	f001 f9b0 	bl	80023d8 <HAL_QSPI_MemoryMapped>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <CSP_QSPI_EnableMemoryMappedMode+0x5a>
    {
        return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e000      	b.n	8001084 <CSP_QSPI_EnableMemoryMappedMode+0x5c>
    }
    return HAL_OK;
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	3740      	adds	r7, #64	; 0x40
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000098 	.word	0x20000098

08001090 <QSPI_ResetChip>:

uint8_t QSPI_ResetChip()
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b090      	sub	sp, #64	; 0x40
 8001094:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    uint32_t temp = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Erasing Sequence -------------------------------------------------- */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800109a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800109e:	61fb      	str	r3, [r7, #28]
    sCommand.Instruction = RESET_ENABLE_CMD;
 80010a0:	2366      	movs	r3, #102	; 0x66
 80010a2:	607b      	str	r3, [r7, #4]
    sCommand.AddressSize = QSPI_ADDRESS_32_BITS;
 80010a4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80010a8:	613b      	str	r3, [r7, #16]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80010ae:	2300      	movs	r3, #0
 80010b0:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80010b2:	2300      	movs	r3, #0
 80010b4:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80010b6:	2300      	movs	r3, #0
 80010b8:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80010ba:	2300      	movs	r3, #0
 80010bc:	623b      	str	r3, [r7, #32]
    sCommand.Address = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
    sCommand.DataMode = QSPI_DATA_4_LINES;
 80010c2:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80010c6:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61bb      	str	r3, [r7, #24]

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80010d2:	4619      	mov	r1, r3
 80010d4:	481d      	ldr	r0, [pc, #116]	; (800114c <QSPI_ResetChip+0xbc>)
 80010d6:	f000 ff7b 	bl	8001fd0 <HAL_QSPI_Command>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <QSPI_ResetChip+0x54>
    {
        return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e02f      	b.n	8001144 <QSPI_ResetChip+0xb4>
    }
    for (temp = 0; temp < 0x2f; temp++)
 80010e4:	2300      	movs	r3, #0
 80010e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010e8:	e003      	b.n	80010f2 <QSPI_ResetChip+0x62>
    {
        __NOP();
 80010ea:	bf00      	nop
    for (temp = 0; temp < 0x2f; temp++)
 80010ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010ee:	3301      	adds	r3, #1
 80010f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010f4:	2b2e      	cmp	r3, #46	; 0x2e
 80010f6:	d9f8      	bls.n	80010ea <QSPI_ResetChip+0x5a>
    }

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80010f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010fc:	61fb      	str	r3, [r7, #28]
    sCommand.AddressSize = QSPI_ADDRESS_32_BITS;
 80010fe:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001102:	613b      	str	r3, [r7, #16]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001104:	2300      	movs	r3, #0
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001108:	2300      	movs	r3, #0
 800110a:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800110c:	2300      	movs	r3, #0
 800110e:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001110:	2300      	movs	r3, #0
 8001112:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = RESET_EXECUTE_CMD;
 8001114:	2399      	movs	r3, #153	; 0x99
 8001116:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001118:	2300      	movs	r3, #0
 800111a:	623b      	str	r3, [r7, #32]
    sCommand.Address = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	60bb      	str	r3, [r7, #8]
    sCommand.DataMode = QSPI_DATA_4_LINES;
 8001120:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001124:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	61bb      	str	r3, [r7, #24]

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001130:	4619      	mov	r1, r3
 8001132:	4806      	ldr	r0, [pc, #24]	; (800114c <QSPI_ResetChip+0xbc>)
 8001134:	f000 ff4c 	bl	8001fd0 <HAL_QSPI_Command>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <QSPI_ResetChip+0xb2>
    {
        return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e000      	b.n	8001144 <QSPI_ResetChip+0xb4>
    }
    return HAL_OK;
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	3740      	adds	r7, #64	; 0x40
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000098 	.word	0x20000098

08001150 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001156:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <HAL_MspInit+0x44>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	4a0e      	ldr	r2, [pc, #56]	; (8001194 <HAL_MspInit+0x44>)
 800115c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001160:	6413      	str	r3, [r2, #64]	; 0x40
 8001162:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <HAL_MspInit+0x44>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <HAL_MspInit+0x44>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	4a08      	ldr	r2, [pc, #32]	; (8001194 <HAL_MspInit+0x44>)
 8001174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001178:	6453      	str	r3, [r2, #68]	; 0x44
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <HAL_MspInit+0x44>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001182:	603b      	str	r3, [r7, #0]
 8001184:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40023800 	.word	0x40023800

08001198 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800119c:	e7fe      	b.n	800119c <NMI_Handler+0x4>

0800119e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a2:	e7fe      	b.n	80011a2 <HardFault_Handler+0x4>

080011a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <MemManage_Handler+0x4>

080011aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ae:	e7fe      	b.n	80011ae <BusFault_Handler+0x4>

080011b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <UsageFault_Handler+0x4>

080011b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e4:	f000 f9ba 	bl	800155c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}

080011ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011f0:	4802      	ldr	r0, [pc, #8]	; (80011fc <USART1_IRQHandler+0x10>)
 80011f2:	f002 fca5 	bl	8003b40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	200000e4 	.word	0x200000e4

08001200 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	e00a      	b.n	8001228 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001212:	f3af 8000 	nop.w
 8001216:	4601      	mov	r1, r0
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	1c5a      	adds	r2, r3, #1
 800121c:	60ba      	str	r2, [r7, #8]
 800121e:	b2ca      	uxtb	r2, r1
 8001220:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	3301      	adds	r3, #1
 8001226:	617b      	str	r3, [r7, #20]
 8001228:	697a      	ldr	r2, [r7, #20]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	429a      	cmp	r2, r3
 800122e:	dbf0      	blt.n	8001212 <_read+0x12>
	}

return len;
 8001230:	687b      	ldr	r3, [r7, #4]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b086      	sub	sp, #24
 800123e:	af00      	add	r7, sp, #0
 8001240:	60f8      	str	r0, [r7, #12]
 8001242:	60b9      	str	r1, [r7, #8]
 8001244:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
 800124a:	e009      	b.n	8001260 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	1c5a      	adds	r2, r3, #1
 8001250:	60ba      	str	r2, [r7, #8]
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f000 f88d 	bl	8001374 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	3301      	adds	r3, #1
 800125e:	617b      	str	r3, [r7, #20]
 8001260:	697a      	ldr	r2, [r7, #20]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	429a      	cmp	r2, r3
 8001266:	dbf1      	blt.n	800124c <_write+0x12>
	}
	return len;
 8001268:	687b      	ldr	r3, [r7, #4]
}
 800126a:	4618      	mov	r0, r3
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <_close>:

int _close(int file)
{
 8001272:	b480      	push	{r7}
 8001274:	b083      	sub	sp, #12
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
	return -1;
 800127a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800127e:	4618      	mov	r0, r3
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800129a:	605a      	str	r2, [r3, #4]
	return 0;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <_isatty>:

int _isatty(int file)
{
 80012aa:	b480      	push	{r7}
 80012ac:	b083      	sub	sp, #12
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
	return 1;
 80012b2:	2301      	movs	r3, #1
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
	return 0;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3714      	adds	r7, #20
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
	...

080012dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012e4:	4a14      	ldr	r2, [pc, #80]	; (8001338 <_sbrk+0x5c>)
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <_sbrk+0x60>)
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012f0:	4b13      	ldr	r3, [pc, #76]	; (8001340 <_sbrk+0x64>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d102      	bne.n	80012fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012f8:	4b11      	ldr	r3, [pc, #68]	; (8001340 <_sbrk+0x64>)
 80012fa:	4a12      	ldr	r2, [pc, #72]	; (8001344 <_sbrk+0x68>)
 80012fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012fe:	4b10      	ldr	r3, [pc, #64]	; (8001340 <_sbrk+0x64>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4413      	add	r3, r2
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	429a      	cmp	r2, r3
 800130a:	d207      	bcs.n	800131c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800130c:	f003 f9d8 	bl	80046c0 <__errno>
 8001310:	4602      	mov	r2, r0
 8001312:	230c      	movs	r3, #12
 8001314:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001316:	f04f 33ff 	mov.w	r3, #4294967295
 800131a:	e009      	b.n	8001330 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <_sbrk+0x64>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001322:	4b07      	ldr	r3, [pc, #28]	; (8001340 <_sbrk+0x64>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	4a05      	ldr	r2, [pc, #20]	; (8001340 <_sbrk+0x64>)
 800132c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800132e:	68fb      	ldr	r3, [r7, #12]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20080000 	.word	0x20080000
 800133c:	00000400 	.word	0x00000400
 8001340:	2000008c 	.word	0x2000008c
 8001344:	20000170 	.word	0x20000170

08001348 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <SystemInit+0x28>)
 800134e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001352:	4a07      	ldr	r2, [pc, #28]	; (8001370 <SystemInit+0x28>)
 8001354:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001358:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800135c:	4b04      	ldr	r3, [pc, #16]	; (8001370 <SystemInit+0x28>)
 800135e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001362:	609a      	str	r2, [r3, #8]
#endif
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800137c:	1d39      	adds	r1, r7, #4
 800137e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001382:	2201      	movs	r2, #1
 8001384:	4803      	ldr	r0, [pc, #12]	; (8001394 <__io_putchar+0x20>)
 8001386:	f002 fb49 	bl	8003a1c <HAL_UART_Transmit>
  return ch;
 800138a:	687b      	ldr	r3, [r7, #4]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	200000e4 	.word	0x200000e4

08001398 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800139c:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <MX_USART1_UART_Init+0x58>)
 800139e:	4a15      	ldr	r2, [pc, #84]	; (80013f4 <MX_USART1_UART_Init+0x5c>)
 80013a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80013a2:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <MX_USART1_UART_Init+0x58>)
 80013a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013aa:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <MX_USART1_UART_Init+0x58>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013b0:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <MX_USART1_UART_Init+0x58>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013b6:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <MX_USART1_UART_Init+0x58>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <MX_USART1_UART_Init+0x58>)
 80013be:	220c      	movs	r2, #12
 80013c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013c2:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <MX_USART1_UART_Init+0x58>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c8:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <MX_USART1_UART_Init+0x58>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ce:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <MX_USART1_UART_Init+0x58>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <MX_USART1_UART_Init+0x58>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013da:	4805      	ldr	r0, [pc, #20]	; (80013f0 <MX_USART1_UART_Init+0x58>)
 80013dc:	f002 fad0 	bl	8003980 <HAL_UART_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80013e6:	f7ff fa25 	bl	8000834 <Error_Handler>
  }

}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	200000e4 	.word	0x200000e4
 80013f4:	40011000 	.word	0x40011000

080013f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	; 0x28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a1b      	ldr	r2, [pc, #108]	; (8001484 <HAL_UART_MspInit+0x8c>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d130      	bne.n	800147c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800141a:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <HAL_UART_MspInit+0x90>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	4a1a      	ldr	r2, [pc, #104]	; (8001488 <HAL_UART_MspInit+0x90>)
 8001420:	f043 0310 	orr.w	r3, r3, #16
 8001424:	6453      	str	r3, [r2, #68]	; 0x44
 8001426:	4b18      	ldr	r3, [pc, #96]	; (8001488 <HAL_UART_MspInit+0x90>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	f003 0310 	and.w	r3, r3, #16
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <HAL_UART_MspInit+0x90>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a14      	ldr	r2, [pc, #80]	; (8001488 <HAL_UART_MspInit+0x90>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b12      	ldr	r3, [pc, #72]	; (8001488 <HAL_UART_MspInit+0x90>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800144a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800144e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001458:	2303      	movs	r3, #3
 800145a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800145c:	2307      	movs	r3, #7
 800145e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	4619      	mov	r1, r3
 8001466:	4809      	ldr	r0, [pc, #36]	; (800148c <HAL_UART_MspInit+0x94>)
 8001468:	f000 f9ee 	bl	8001848 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800146c:	2200      	movs	r2, #0
 800146e:	2100      	movs	r1, #0
 8001470:	2025      	movs	r0, #37	; 0x25
 8001472:	f000 f990 	bl	8001796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001476:	2025      	movs	r0, #37	; 0x25
 8001478:	f000 f9a9 	bl	80017ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800147c:	bf00      	nop
 800147e:	3728      	adds	r7, #40	; 0x28
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40011000 	.word	0x40011000
 8001488:	40023800 	.word	0x40023800
 800148c:	40020000 	.word	0x40020000

08001490 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001490:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001494:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001496:	e003      	b.n	80014a0 <LoopCopyDataInit>

08001498 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800149a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800149c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800149e:	3104      	adds	r1, #4

080014a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014a0:	480b      	ldr	r0, [pc, #44]	; (80014d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80014a2:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80014a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80014a8:	d3f6      	bcc.n	8001498 <CopyDataInit>
  ldr  r2, =_sbss
 80014aa:	4a0b      	ldr	r2, [pc, #44]	; (80014d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80014ac:	e002      	b.n	80014b4 <LoopFillZerobss>

080014ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80014ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80014b0:	f842 3b04 	str.w	r3, [r2], #4

080014b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80014b4:	4b09      	ldr	r3, [pc, #36]	; (80014dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80014b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014b8:	d3f9      	bcc.n	80014ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014ba:	f7ff ff45 	bl	8001348 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014be:	f003 f905 	bl	80046cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014c2:	f7ff f875 	bl	80005b0 <main>
  bx  lr    
 80014c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014c8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80014cc:	0800510c 	.word	0x0800510c
  ldr  r0, =_sdata
 80014d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80014d4:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80014d8:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80014dc:	2000016c 	.word	0x2000016c

080014e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014e0:	e7fe      	b.n	80014e0 <ADC_IRQHandler>

080014e2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e6:	2003      	movs	r0, #3
 80014e8:	f000 f94a 	bl	8001780 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ec:	2000      	movs	r0, #0
 80014ee:	f000 f805 	bl	80014fc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80014f2:	f7ff fe2d 	bl	8001150 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	bd80      	pop	{r7, pc}

080014fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001504:	4b12      	ldr	r3, [pc, #72]	; (8001550 <HAL_InitTick+0x54>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_InitTick+0x58>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	4619      	mov	r1, r3
 800150e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001512:	fbb3 f3f1 	udiv	r3, r3, r1
 8001516:	fbb2 f3f3 	udiv	r3, r2, r3
 800151a:	4618      	mov	r0, r3
 800151c:	f000 f965 	bl	80017ea <HAL_SYSTICK_Config>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e00e      	b.n	8001548 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b0f      	cmp	r3, #15
 800152e:	d80a      	bhi.n	8001546 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001530:	2200      	movs	r2, #0
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	f04f 30ff 	mov.w	r0, #4294967295
 8001538:	f000 f92d 	bl	8001796 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800153c:	4a06      	ldr	r2, [pc, #24]	; (8001558 <HAL_InitTick+0x5c>)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001542:	2300      	movs	r3, #0
 8001544:	e000      	b.n	8001548 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
}
 8001548:	4618      	mov	r0, r3
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000000 	.word	0x20000000
 8001554:	20000008 	.word	0x20000008
 8001558:	20000004 	.word	0x20000004

0800155c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_IncTick+0x20>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	461a      	mov	r2, r3
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_IncTick+0x24>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4413      	add	r3, r2
 800156c:	4a04      	ldr	r2, [pc, #16]	; (8001580 <HAL_IncTick+0x24>)
 800156e:	6013      	str	r3, [r2, #0]
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	20000008 	.word	0x20000008
 8001580:	20000164 	.word	0x20000164

08001584 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return uwTick;
 8001588:	4b03      	ldr	r3, [pc, #12]	; (8001598 <HAL_GetTick+0x14>)
 800158a:	681b      	ldr	r3, [r3, #0]
}
 800158c:	4618      	mov	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	20000164 	.word	0x20000164

0800159c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a4:	f7ff ffee 	bl	8001584 <HAL_GetTick>
 80015a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b4:	d005      	beq.n	80015c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <HAL_Delay+0x40>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	461a      	mov	r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4413      	add	r3, r2
 80015c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015c2:	bf00      	nop
 80015c4:	f7ff ffde 	bl	8001584 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d8f7      	bhi.n	80015c4 <HAL_Delay+0x28>
  {
  }
}
 80015d4:	bf00      	nop
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000008 	.word	0x20000008

080015e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f0:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <__NVIC_SetPriorityGrouping+0x40>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015fc:	4013      	ands	r3, r2
 80015fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001608:	4b06      	ldr	r3, [pc, #24]	; (8001624 <__NVIC_SetPriorityGrouping+0x44>)
 800160a:	4313      	orrs	r3, r2
 800160c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800160e:	4a04      	ldr	r2, [pc, #16]	; (8001620 <__NVIC_SetPriorityGrouping+0x40>)
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	60d3      	str	r3, [r2, #12]
}
 8001614:	bf00      	nop
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000ed00 	.word	0xe000ed00
 8001624:	05fa0000 	.word	0x05fa0000

08001628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800162c:	4b04      	ldr	r3, [pc, #16]	; (8001640 <__NVIC_GetPriorityGrouping+0x18>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	0a1b      	lsrs	r3, r3, #8
 8001632:	f003 0307 	and.w	r3, r3, #7
}
 8001636:	4618      	mov	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	2b00      	cmp	r3, #0
 8001654:	db0b      	blt.n	800166e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	f003 021f 	and.w	r2, r3, #31
 800165c:	4907      	ldr	r1, [pc, #28]	; (800167c <__NVIC_EnableIRQ+0x38>)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	095b      	lsrs	r3, r3, #5
 8001664:	2001      	movs	r0, #1
 8001666:	fa00 f202 	lsl.w	r2, r0, r2
 800166a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	e000e100 	.word	0xe000e100

08001680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	6039      	str	r1, [r7, #0]
 800168a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001690:	2b00      	cmp	r3, #0
 8001692:	db0a      	blt.n	80016aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	b2da      	uxtb	r2, r3
 8001698:	490c      	ldr	r1, [pc, #48]	; (80016cc <__NVIC_SetPriority+0x4c>)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	0112      	lsls	r2, r2, #4
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	440b      	add	r3, r1
 80016a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a8:	e00a      	b.n	80016c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	4908      	ldr	r1, [pc, #32]	; (80016d0 <__NVIC_SetPriority+0x50>)
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	3b04      	subs	r3, #4
 80016b8:	0112      	lsls	r2, r2, #4
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	440b      	add	r3, r1
 80016be:	761a      	strb	r2, [r3, #24]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000e100 	.word	0xe000e100
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b089      	sub	sp, #36	; 0x24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f1c3 0307 	rsb	r3, r3, #7
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	bf28      	it	cs
 80016f2:	2304      	movcs	r3, #4
 80016f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3304      	adds	r3, #4
 80016fa:	2b06      	cmp	r3, #6
 80016fc:	d902      	bls.n	8001704 <NVIC_EncodePriority+0x30>
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3b03      	subs	r3, #3
 8001702:	e000      	b.n	8001706 <NVIC_EncodePriority+0x32>
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	f04f 32ff 	mov.w	r2, #4294967295
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43da      	mvns	r2, r3
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	401a      	ands	r2, r3
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800171c:	f04f 31ff 	mov.w	r1, #4294967295
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	fa01 f303 	lsl.w	r3, r1, r3
 8001726:	43d9      	mvns	r1, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172c:	4313      	orrs	r3, r2
         );
}
 800172e:	4618      	mov	r0, r3
 8001730:	3724      	adds	r7, #36	; 0x24
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
	...

0800173c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3b01      	subs	r3, #1
 8001748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800174c:	d301      	bcc.n	8001752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800174e:	2301      	movs	r3, #1
 8001750:	e00f      	b.n	8001772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001752:	4a0a      	ldr	r2, [pc, #40]	; (800177c <SysTick_Config+0x40>)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3b01      	subs	r3, #1
 8001758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800175a:	210f      	movs	r1, #15
 800175c:	f04f 30ff 	mov.w	r0, #4294967295
 8001760:	f7ff ff8e 	bl	8001680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001764:	4b05      	ldr	r3, [pc, #20]	; (800177c <SysTick_Config+0x40>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800176a:	4b04      	ldr	r3, [pc, #16]	; (800177c <SysTick_Config+0x40>)
 800176c:	2207      	movs	r2, #7
 800176e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	e000e010 	.word	0xe000e010

08001780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff ff29 	bl	80015e0 <__NVIC_SetPriorityGrouping>
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001796:	b580      	push	{r7, lr}
 8001798:	b086      	sub	sp, #24
 800179a:	af00      	add	r7, sp, #0
 800179c:	4603      	mov	r3, r0
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	607a      	str	r2, [r7, #4]
 80017a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017a8:	f7ff ff3e 	bl	8001628 <__NVIC_GetPriorityGrouping>
 80017ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	68b9      	ldr	r1, [r7, #8]
 80017b2:	6978      	ldr	r0, [r7, #20]
 80017b4:	f7ff ff8e 	bl	80016d4 <NVIC_EncodePriority>
 80017b8:	4602      	mov	r2, r0
 80017ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017be:	4611      	mov	r1, r2
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff ff5d 	bl	8001680 <__NVIC_SetPriority>
}
 80017c6:	bf00      	nop
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	4603      	mov	r3, r0
 80017d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff31 	bl	8001644 <__NVIC_EnableIRQ>
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff ffa2 	bl	800173c <SysTick_Config>
 80017f8:	4603      	mov	r3, r0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d004      	beq.n	8001820 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2280      	movs	r2, #128	; 0x80
 800181a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e00c      	b.n	800183a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2205      	movs	r2, #5
 8001824:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 0201 	bic.w	r2, r2, #1
 8001836:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
	...

08001848 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001848:	b480      	push	{r7}
 800184a:	b089      	sub	sp, #36	; 0x24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001852:	2300      	movs	r3, #0
 8001854:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800185e:	2300      	movs	r3, #0
 8001860:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
 8001866:	e175      	b.n	8001b54 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001868:	2201      	movs	r2, #1
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	697a      	ldr	r2, [r7, #20]
 8001878:	4013      	ands	r3, r2
 800187a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	429a      	cmp	r2, r3
 8001882:	f040 8164 	bne.w	8001b4e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d00b      	beq.n	80018a6 <HAL_GPIO_Init+0x5e>
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b02      	cmp	r3, #2
 8001894:	d007      	beq.n	80018a6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800189a:	2b11      	cmp	r3, #17
 800189c:	d003      	beq.n	80018a6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b12      	cmp	r3, #18
 80018a4:	d130      	bne.n	8001908 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	2203      	movs	r2, #3
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43db      	mvns	r3, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4013      	ands	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	68da      	ldr	r2, [r3, #12]
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018dc:	2201      	movs	r2, #1
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4013      	ands	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	091b      	lsrs	r3, r3, #4
 80018f2:	f003 0201 	and.w	r2, r3, #1
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4313      	orrs	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	2203      	movs	r2, #3
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4013      	ands	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4313      	orrs	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	2b02      	cmp	r3, #2
 800193e:	d003      	beq.n	8001948 <HAL_GPIO_Init+0x100>
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	2b12      	cmp	r3, #18
 8001946:	d123      	bne.n	8001990 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	08da      	lsrs	r2, r3, #3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3208      	adds	r2, #8
 8001950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	220f      	movs	r2, #15
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4013      	ands	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	691a      	ldr	r2, [r3, #16]
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4313      	orrs	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	08da      	lsrs	r2, r3, #3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	3208      	adds	r2, #8
 800198a:	69b9      	ldr	r1, [r7, #24]
 800198c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	2203      	movs	r2, #3
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 0203 	and.w	r2, r3, #3
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f000 80be 	beq.w	8001b4e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d2:	4b65      	ldr	r3, [pc, #404]	; (8001b68 <HAL_GPIO_Init+0x320>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d6:	4a64      	ldr	r2, [pc, #400]	; (8001b68 <HAL_GPIO_Init+0x320>)
 80019d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019dc:	6453      	str	r3, [r2, #68]	; 0x44
 80019de:	4b62      	ldr	r3, [pc, #392]	; (8001b68 <HAL_GPIO_Init+0x320>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80019ea:	4a60      	ldr	r2, [pc, #384]	; (8001b6c <HAL_GPIO_Init+0x324>)
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	089b      	lsrs	r3, r3, #2
 80019f0:	3302      	adds	r3, #2
 80019f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	f003 0303 	and.w	r3, r3, #3
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	220f      	movs	r2, #15
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43db      	mvns	r3, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a57      	ldr	r2, [pc, #348]	; (8001b70 <HAL_GPIO_Init+0x328>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d037      	beq.n	8001a86 <HAL_GPIO_Init+0x23e>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a56      	ldr	r2, [pc, #344]	; (8001b74 <HAL_GPIO_Init+0x32c>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d031      	beq.n	8001a82 <HAL_GPIO_Init+0x23a>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a55      	ldr	r2, [pc, #340]	; (8001b78 <HAL_GPIO_Init+0x330>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d02b      	beq.n	8001a7e <HAL_GPIO_Init+0x236>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a54      	ldr	r2, [pc, #336]	; (8001b7c <HAL_GPIO_Init+0x334>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d025      	beq.n	8001a7a <HAL_GPIO_Init+0x232>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a53      	ldr	r2, [pc, #332]	; (8001b80 <HAL_GPIO_Init+0x338>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d01f      	beq.n	8001a76 <HAL_GPIO_Init+0x22e>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a52      	ldr	r2, [pc, #328]	; (8001b84 <HAL_GPIO_Init+0x33c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d019      	beq.n	8001a72 <HAL_GPIO_Init+0x22a>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a51      	ldr	r2, [pc, #324]	; (8001b88 <HAL_GPIO_Init+0x340>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d013      	beq.n	8001a6e <HAL_GPIO_Init+0x226>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a50      	ldr	r2, [pc, #320]	; (8001b8c <HAL_GPIO_Init+0x344>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d00d      	beq.n	8001a6a <HAL_GPIO_Init+0x222>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a4f      	ldr	r2, [pc, #316]	; (8001b90 <HAL_GPIO_Init+0x348>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d007      	beq.n	8001a66 <HAL_GPIO_Init+0x21e>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a4e      	ldr	r2, [pc, #312]	; (8001b94 <HAL_GPIO_Init+0x34c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d101      	bne.n	8001a62 <HAL_GPIO_Init+0x21a>
 8001a5e:	2309      	movs	r3, #9
 8001a60:	e012      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a62:	230a      	movs	r3, #10
 8001a64:	e010      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a66:	2308      	movs	r3, #8
 8001a68:	e00e      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a6a:	2307      	movs	r3, #7
 8001a6c:	e00c      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a6e:	2306      	movs	r3, #6
 8001a70:	e00a      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a72:	2305      	movs	r3, #5
 8001a74:	e008      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a76:	2304      	movs	r3, #4
 8001a78:	e006      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e004      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e002      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a82:	2301      	movs	r3, #1
 8001a84:	e000      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a86:	2300      	movs	r3, #0
 8001a88:	69fa      	ldr	r2, [r7, #28]
 8001a8a:	f002 0203 	and.w	r2, r2, #3
 8001a8e:	0092      	lsls	r2, r2, #2
 8001a90:	4093      	lsls	r3, r2
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a98:	4934      	ldr	r1, [pc, #208]	; (8001b6c <HAL_GPIO_Init+0x324>)
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	089b      	lsrs	r3, r3, #2
 8001a9e:	3302      	adds	r3, #2
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aa6:	4b3c      	ldr	r3, [pc, #240]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001aca:	4a33      	ldr	r2, [pc, #204]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ad0:	4b31      	ldr	r3, [pc, #196]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001af4:	4a28      	ldr	r2, [pc, #160]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001afa:	4b27      	ldr	r3, [pc, #156]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	43db      	mvns	r3, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4013      	ands	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b1e:	4a1e      	ldr	r2, [pc, #120]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b24:	4b1c      	ldr	r3, [pc, #112]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b48:	4a13      	ldr	r2, [pc, #76]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3301      	adds	r3, #1
 8001b52:	61fb      	str	r3, [r7, #28]
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	2b0f      	cmp	r3, #15
 8001b58:	f67f ae86 	bls.w	8001868 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	3724      	adds	r7, #36	; 0x24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40013800 	.word	0x40013800
 8001b70:	40020000 	.word	0x40020000
 8001b74:	40020400 	.word	0x40020400
 8001b78:	40020800 	.word	0x40020800
 8001b7c:	40020c00 	.word	0x40020c00
 8001b80:	40021000 	.word	0x40021000
 8001b84:	40021400 	.word	0x40021400
 8001b88:	40021800 	.word	0x40021800
 8001b8c:	40021c00 	.word	0x40021c00
 8001b90:	40022000 	.word	0x40022000
 8001b94:	40022400 	.word	0x40022400
 8001b98:	40013c00 	.word	0x40013c00

08001b9c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b087      	sub	sp, #28
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]
 8001bb6:	e0d9      	b.n	8001d6c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001bb8:	2201      	movs	r2, #1
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	f040 80c9 	bne.w	8001d66 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8001bd4:	4a6a      	ldr	r2, [pc, #424]	; (8001d80 <HAL_GPIO_DeInit+0x1e4>)
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	089b      	lsrs	r3, r3, #2
 8001bda:	3302      	adds	r3, #2
 8001bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be0:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	220f      	movs	r2, #15
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	68ba      	ldr	r2, [r7, #8]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a62      	ldr	r2, [pc, #392]	; (8001d84 <HAL_GPIO_DeInit+0x1e8>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d037      	beq.n	8001c6e <HAL_GPIO_DeInit+0xd2>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a61      	ldr	r2, [pc, #388]	; (8001d88 <HAL_GPIO_DeInit+0x1ec>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d031      	beq.n	8001c6a <HAL_GPIO_DeInit+0xce>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a60      	ldr	r2, [pc, #384]	; (8001d8c <HAL_GPIO_DeInit+0x1f0>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d02b      	beq.n	8001c66 <HAL_GPIO_DeInit+0xca>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a5f      	ldr	r2, [pc, #380]	; (8001d90 <HAL_GPIO_DeInit+0x1f4>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d025      	beq.n	8001c62 <HAL_GPIO_DeInit+0xc6>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a5e      	ldr	r2, [pc, #376]	; (8001d94 <HAL_GPIO_DeInit+0x1f8>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d01f      	beq.n	8001c5e <HAL_GPIO_DeInit+0xc2>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a5d      	ldr	r2, [pc, #372]	; (8001d98 <HAL_GPIO_DeInit+0x1fc>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d019      	beq.n	8001c5a <HAL_GPIO_DeInit+0xbe>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a5c      	ldr	r2, [pc, #368]	; (8001d9c <HAL_GPIO_DeInit+0x200>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d013      	beq.n	8001c56 <HAL_GPIO_DeInit+0xba>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a5b      	ldr	r2, [pc, #364]	; (8001da0 <HAL_GPIO_DeInit+0x204>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d00d      	beq.n	8001c52 <HAL_GPIO_DeInit+0xb6>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a5a      	ldr	r2, [pc, #360]	; (8001da4 <HAL_GPIO_DeInit+0x208>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d007      	beq.n	8001c4e <HAL_GPIO_DeInit+0xb2>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a59      	ldr	r2, [pc, #356]	; (8001da8 <HAL_GPIO_DeInit+0x20c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d101      	bne.n	8001c4a <HAL_GPIO_DeInit+0xae>
 8001c46:	2309      	movs	r3, #9
 8001c48:	e012      	b.n	8001c70 <HAL_GPIO_DeInit+0xd4>
 8001c4a:	230a      	movs	r3, #10
 8001c4c:	e010      	b.n	8001c70 <HAL_GPIO_DeInit+0xd4>
 8001c4e:	2308      	movs	r3, #8
 8001c50:	e00e      	b.n	8001c70 <HAL_GPIO_DeInit+0xd4>
 8001c52:	2307      	movs	r3, #7
 8001c54:	e00c      	b.n	8001c70 <HAL_GPIO_DeInit+0xd4>
 8001c56:	2306      	movs	r3, #6
 8001c58:	e00a      	b.n	8001c70 <HAL_GPIO_DeInit+0xd4>
 8001c5a:	2305      	movs	r3, #5
 8001c5c:	e008      	b.n	8001c70 <HAL_GPIO_DeInit+0xd4>
 8001c5e:	2304      	movs	r3, #4
 8001c60:	e006      	b.n	8001c70 <HAL_GPIO_DeInit+0xd4>
 8001c62:	2303      	movs	r3, #3
 8001c64:	e004      	b.n	8001c70 <HAL_GPIO_DeInit+0xd4>
 8001c66:	2302      	movs	r3, #2
 8001c68:	e002      	b.n	8001c70 <HAL_GPIO_DeInit+0xd4>
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <HAL_GPIO_DeInit+0xd4>
 8001c6e:	2300      	movs	r3, #0
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	f002 0203 	and.w	r2, r2, #3
 8001c76:	0092      	lsls	r2, r2, #2
 8001c78:	4093      	lsls	r3, r2
 8001c7a:	68ba      	ldr	r2, [r7, #8]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d132      	bne.n	8001ce6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001c80:	4b4a      	ldr	r3, [pc, #296]	; (8001dac <HAL_GPIO_DeInit+0x210>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	43db      	mvns	r3, r3
 8001c88:	4948      	ldr	r1, [pc, #288]	; (8001dac <HAL_GPIO_DeInit+0x210>)
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001c8e:	4b47      	ldr	r3, [pc, #284]	; (8001dac <HAL_GPIO_DeInit+0x210>)
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	43db      	mvns	r3, r3
 8001c96:	4945      	ldr	r1, [pc, #276]	; (8001dac <HAL_GPIO_DeInit+0x210>)
 8001c98:	4013      	ands	r3, r2
 8001c9a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001c9c:	4b43      	ldr	r3, [pc, #268]	; (8001dac <HAL_GPIO_DeInit+0x210>)
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	4941      	ldr	r1, [pc, #260]	; (8001dac <HAL_GPIO_DeInit+0x210>)
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001caa:	4b40      	ldr	r3, [pc, #256]	; (8001dac <HAL_GPIO_DeInit+0x210>)
 8001cac:	68da      	ldr	r2, [r3, #12]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	493e      	ldr	r1, [pc, #248]	; (8001dac <HAL_GPIO_DeInit+0x210>)
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	220f      	movs	r2, #15
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8001cc8:	4a2d      	ldr	r2, [pc, #180]	; (8001d80 <HAL_GPIO_DeInit+0x1e4>)
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	089b      	lsrs	r3, r3, #2
 8001cce:	3302      	adds	r3, #2
 8001cd0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	43da      	mvns	r2, r3
 8001cd8:	4829      	ldr	r0, [pc, #164]	; (8001d80 <HAL_GPIO_DeInit+0x1e4>)
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	089b      	lsrs	r3, r3, #2
 8001cde:	400a      	ands	r2, r1
 8001ce0:	3302      	adds	r3, #2
 8001ce2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	2103      	movs	r1, #3
 8001cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	401a      	ands	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	08da      	lsrs	r2, r3, #3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3208      	adds	r2, #8
 8001d04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	220f      	movs	r2, #15
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43db      	mvns	r3, r3
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	08d2      	lsrs	r2, r2, #3
 8001d1c:	4019      	ands	r1, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3208      	adds	r2, #8
 8001d22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68da      	ldr	r2, [r3, #12]
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	2103      	movs	r1, #3
 8001d30:	fa01 f303 	lsl.w	r3, r1, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	401a      	ands	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	2101      	movs	r1, #1
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	fa01 f303 	lsl.w	r3, r1, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	401a      	ands	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	2103      	movs	r1, #3
 8001d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	401a      	ands	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	2b0f      	cmp	r3, #15
 8001d70:	f67f af22 	bls.w	8001bb8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001d74:	bf00      	nop
 8001d76:	371c      	adds	r7, #28
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	40013800 	.word	0x40013800
 8001d84:	40020000 	.word	0x40020000
 8001d88:	40020400 	.word	0x40020400
 8001d8c:	40020800 	.word	0x40020800
 8001d90:	40020c00 	.word	0x40020c00
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40021400 	.word	0x40021400
 8001d9c:	40021800 	.word	0x40021800
 8001da0:	40021c00 	.word	0x40021c00
 8001da4:	40022000 	.word	0x40022000
 8001da8:	40022400 	.word	0x40022400
 8001dac:	40013c00 	.word	0x40013c00

08001db0 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db8:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8001dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbc:	4a0a      	ldr	r2, [pc, #40]	; (8001de8 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8001dbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc2:	6453      	str	r3, [r2, #68]	; 0x44
 8001dc4:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8001dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMC, (uint32_t)ConfigFastModePlus);
 8001dd0:	4b06      	ldr	r3, [pc, #24]	; (8001dec <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	4905      	ldr	r1, [pc, #20]	; (8001dec <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	604b      	str	r3, [r1, #4]
}
 8001ddc:	bf00      	nop
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	40023800 	.word	0x40023800
 8001dec:	40013800 	.word	0x40013800

08001df0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001dfa:	4b23      	ldr	r3, [pc, #140]	; (8001e88 <HAL_PWREx_EnableOverDrive+0x98>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	4a22      	ldr	r2, [pc, #136]	; (8001e88 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e04:	6413      	str	r3, [r2, #64]	; 0x40
 8001e06:	4b20      	ldr	r3, [pc, #128]	; (8001e88 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0e:	603b      	str	r3, [r7, #0]
 8001e10:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001e12:	4b1e      	ldr	r3, [pc, #120]	; (8001e8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a1d      	ldr	r2, [pc, #116]	; (8001e8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e1c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e1e:	f7ff fbb1 	bl	8001584 <HAL_GetTick>
 8001e22:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e24:	e009      	b.n	8001e3a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e26:	f7ff fbad 	bl	8001584 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e34:	d901      	bls.n	8001e3a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e022      	b.n	8001e80 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e3a:	4b14      	ldr	r3, [pc, #80]	; (8001e8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e46:	d1ee      	bne.n	8001e26 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001e48:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a0f      	ldr	r2, [pc, #60]	; (8001e8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e52:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e54:	f7ff fb96 	bl	8001584 <HAL_GetTick>
 8001e58:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e5a:	e009      	b.n	8001e70 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e5c:	f7ff fb92 	bl	8001584 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e6a:	d901      	bls.n	8001e70 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e007      	b.n	8001e80 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e70:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e7c:	d1ee      	bne.n	8001e5c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40007000 	.word	0x40007000

08001e90 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af02      	add	r7, sp, #8
 8001e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001e98:	f7ff fb74 	bl	8001584 <HAL_GetTick>
 8001e9c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d101      	bne.n	8001ea8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e067      	b.n	8001f78 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d10b      	bne.n	8001ecc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7fe fce9 	bl	8000894 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8001ec2:	f241 3188 	movw	r1, #5000	; 0x1388
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 fae8 	bl	800249c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	021a      	lsls	r2, r3, #8
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eea:	9300      	str	r3, [sp, #0]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	2120      	movs	r1, #32
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 fae0 	bl	80024b8 <QSPI_WaitFlagStateUntilTimeout>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8001efc:	7afb      	ldrb	r3, [r7, #11]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d135      	bne.n	8001f6e <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4b1d      	ldr	r3, [pc, #116]	; (8001f80 <HAL_QSPI_Init+0xf0>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6852      	ldr	r2, [r2, #4]
 8001f10:	0611      	lsls	r1, r2, #24
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	68d2      	ldr	r2, [r2, #12]
 8001f16:	4311      	orrs	r1, r2
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	69d2      	ldr	r2, [r2, #28]
 8001f1c:	4311      	orrs	r1, r2
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6a12      	ldr	r2, [r2, #32]
 8001f22:	4311      	orrs	r1, r2
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	6812      	ldr	r2, [r2, #0]
 8001f28:	430b      	orrs	r3, r1
 8001f2a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <HAL_QSPI_Init+0xf4>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6912      	ldr	r2, [r2, #16]
 8001f3a:	0411      	lsls	r1, r2, #16
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	6952      	ldr	r2, [r2, #20]
 8001f40:	4311      	orrs	r1, r2
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	6992      	ldr	r2, [r2, #24]
 8001f46:	4311      	orrs	r1, r2
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	6812      	ldr	r2, [r2, #0]
 8001f4c:	430b      	orrs	r3, r1
 8001f4e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f042 0201 	orr.w	r2, r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8001f76:	7afb      	ldrb	r3, [r7, #11]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	00ffff2f 	.word	0x00ffff2f
 8001f84:	ffe0f8fe 	.word	0xffe0f8fe

08001f88 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e016      	b.n	8001fc8 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f022 0201 	bic.w	r2, r2, #1
 8001fa8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7fe fcf8 	bl	80009a0 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b088      	sub	sp, #32
 8001fd4:	af02      	add	r7, sp, #8
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001fdc:	f7ff fad2 	bl	8001584 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d101      	bne.n	8001ff2 <HAL_QSPI_Command+0x22>
 8001fee:	2302      	movs	r3, #2
 8001ff0:	e048      	b.n	8002084 <HAL_QSPI_Command+0xb4>
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b01      	cmp	r3, #1
 8002004:	d137      	bne.n	8002076 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2202      	movs	r2, #2
 8002010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	2200      	movs	r2, #0
 800201c:	2120      	movs	r1, #32
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 fa4a 	bl	80024b8 <QSPI_WaitFlagStateUntilTimeout>
 8002024:	4603      	mov	r3, r0
 8002026:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8002028:	7dfb      	ldrb	r3, [r7, #23]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d125      	bne.n	800207a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800202e:	2200      	movs	r2, #0
 8002030:	68b9      	ldr	r1, [r7, #8]
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f000 fa77 	bl	8002526 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203c:	2b00      	cmp	r3, #0
 800203e:	d115      	bne.n	800206c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	2201      	movs	r2, #1
 8002048:	2102      	movs	r1, #2
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 fa34 	bl	80024b8 <QSPI_WaitFlagStateUntilTimeout>
 8002050:	4603      	mov	r3, r0
 8002052:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8002054:	7dfb      	ldrb	r3, [r7, #23]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10f      	bne.n	800207a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2202      	movs	r2, #2
 8002060:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800206a:	e006      	b.n	800207a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002074:	e001      	b.n	800207a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8002076:	2302      	movs	r3, #2
 8002078:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8002082:	7dfb      	ldrb	r3, [r7, #23]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08a      	sub	sp, #40	; 0x28
 8002090:	af02      	add	r7, sp, #8
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002098:	2300      	movs	r3, #0
 800209a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800209c:	f7ff fa72 	bl	8001584 <HAL_GetTick>
 80020a0:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	3320      	adds	r3, #32
 80020a8:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d101      	bne.n	80020ba <HAL_QSPI_Transmit+0x2e>
 80020b6:	2302      	movs	r3, #2
 80020b8:	e076      	b.n	80021a8 <HAL_QSPI_Transmit+0x11c>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d165      	bne.n	800219a <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d056      	beq.n	8002188 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2212      	movs	r2, #18
 80020de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	1c5a      	adds	r2, r3, #1
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	1c5a      	adds	r2, r3, #1
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	68ba      	ldr	r2, [r7, #8]
 80020fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	695a      	ldr	r2, [r3, #20]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800210e:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8002110:	e01b      	b.n	800214a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	2201      	movs	r2, #1
 800211a:	2104      	movs	r1, #4
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f000 f9cb 	bl	80024b8 <QSPI_WaitFlagStateUntilTimeout>
 8002122:	4603      	mov	r3, r0
 8002124:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8002126:	7ffb      	ldrb	r3, [r7, #31]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d113      	bne.n	8002154 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002130:	781a      	ldrb	r2, [r3, #0]
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	1c5a      	adds	r2, r3, #1
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002144:	1e5a      	subs	r2, r3, #1
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1df      	bne.n	8002112 <HAL_QSPI_Transmit+0x86>
 8002152:	e000      	b.n	8002156 <HAL_QSPI_Transmit+0xca>
          break;
 8002154:	bf00      	nop
      }

      if (status == HAL_OK)
 8002156:	7ffb      	ldrb	r3, [r7, #31]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d110      	bne.n	800217e <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	2201      	movs	r2, #1
 8002164:	2102      	movs	r1, #2
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	f000 f9a6 	bl	80024b8 <QSPI_WaitFlagStateUntilTimeout>
 800216c:	4603      	mov	r3, r0
 800216e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8002170:	7ffb      	ldrb	r3, [r7, #31]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d103      	bne.n	800217e <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2202      	movs	r2, #2
 800217c:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002186:	e00a      	b.n	800219e <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218c:	f043 0208 	orr.w	r2, r3, #8
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	77fb      	strb	r3, [r7, #31]
 8002198:	e001      	b.n	800219e <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800219a:	2302      	movs	r3, #2
 800219c:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80021a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3720      	adds	r7, #32
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08a      	sub	sp, #40	; 0x28
 80021b4:	af02      	add	r7, sp, #8
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021bc:	2300      	movs	r3, #0
 80021be:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80021c0:	f7ff f9e0 	bl	8001584 <HAL_GetTick>
 80021c4:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	3320      	adds	r3, #32
 80021d4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d101      	bne.n	80021e6 <HAL_QSPI_Receive+0x36>
 80021e2:	2302      	movs	r3, #2
 80021e4:	e07d      	b.n	80022e2 <HAL_QSPI_Receive+0x132>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d16c      	bne.n	80022d4 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d05d      	beq.n	80022c2 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2222      	movs	r2, #34	; 0x22
 800220a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	1c5a      	adds	r2, r3, #1
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	1c5a      	adds	r2, r3, #1
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	68ba      	ldr	r2, [r7, #8]
 800222a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800223e:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8002248:	e01c      	b.n	8002284 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	2201      	movs	r2, #1
 8002252:	2106      	movs	r1, #6
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f000 f92f 	bl	80024b8 <QSPI_WaitFlagStateUntilTimeout>
 800225a:	4603      	mov	r3, r0
 800225c:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800225e:	7ffb      	ldrb	r3, [r7, #31]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d114      	bne.n	800228e <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	7812      	ldrb	r2, [r2, #0]
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002274:	1c5a      	adds	r2, r3, #1
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227e:	1e5a      	subs	r2, r3, #1
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1de      	bne.n	800224a <HAL_QSPI_Receive+0x9a>
 800228c:	e000      	b.n	8002290 <HAL_QSPI_Receive+0xe0>
          break;
 800228e:	bf00      	nop
      }

      if (status == HAL_OK)
 8002290:	7ffb      	ldrb	r3, [r7, #31]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d110      	bne.n	80022b8 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	2201      	movs	r2, #1
 800229e:	2102      	movs	r1, #2
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f000 f909 	bl	80024b8 <QSPI_WaitFlagStateUntilTimeout>
 80022a6:	4603      	mov	r3, r0
 80022a8:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80022aa:	7ffb      	ldrb	r3, [r7, #31]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d103      	bne.n	80022b8 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2202      	movs	r2, #2
 80022b6:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80022c0:	e00a      	b.n	80022d8 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c6:	f043 0208 	orr.w	r2, r3, #8
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	77fb      	strb	r3, [r7, #31]
 80022d2:	e001      	b.n	80022d8 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 80022d4:	2302      	movs	r3, #2
 80022d6:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80022e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3720      	adds	r7, #32
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b088      	sub	sp, #32
 80022ee:	af02      	add	r7, sp, #8
 80022f0:	60f8      	str	r0, [r7, #12]
 80022f2:	60b9      	str	r1, [r7, #8]
 80022f4:	607a      	str	r2, [r7, #4]
 80022f6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80022f8:	f7ff f944 	bl	8001584 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b01      	cmp	r3, #1
 8002308:	d101      	bne.n	800230e <HAL_QSPI_AutoPolling+0x24>
 800230a:	2302      	movs	r3, #2
 800230c:	e060      	b.n	80023d0 <HAL_QSPI_AutoPolling+0xe6>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b01      	cmp	r3, #1
 8002320:	d14f      	bne.n	80023c2 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2242      	movs	r2, #66	; 0x42
 800232c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	2200      	movs	r2, #0
 8002338:	2120      	movs	r1, #32
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f000 f8bc 	bl	80024b8 <QSPI_WaitFlagStateUntilTimeout>
 8002340:	4603      	mov	r3, r0
 8002342:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8002344:	7dfb      	ldrb	r3, [r7, #23]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d13d      	bne.n	80023c6 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6812      	ldr	r2, [r2, #0]
 8002352:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6852      	ldr	r2, [r2, #4]
 800235c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	6892      	ldr	r2, [r2, #8]
 8002366:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	431a      	orrs	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002380:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68da      	ldr	r2, [r3, #12]
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800238a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800238e:	68b9      	ldr	r1, [r7, #8]
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f000 f8c8 	bl	8002526 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	2201      	movs	r2, #1
 800239e:	2108      	movs	r1, #8
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f000 f889 	bl	80024b8 <QSPI_WaitFlagStateUntilTimeout>
 80023a6:	4603      	mov	r3, r0
 80023a8:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80023aa:	7dfb      	ldrb	r3, [r7, #23]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10a      	bne.n	80023c6 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2208      	movs	r2, #8
 80023b6:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80023c0:	e001      	b.n	80023c6 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80023c2:	2302      	movs	r3, #2
 80023c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80023ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <HAL_QSPI_MemoryMapped>:
  * @param  cfg : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b088      	sub	sp, #32
 80023dc:	af02      	add	r7, sp, #8
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80023e4:	f7ff f8ce 	bl	8001584 <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d101      	bne.n	80023fa <HAL_QSPI_MemoryMapped+0x22>
 80023f6:	2302      	movs	r3, #2
 80023f8:	e04c      	b.n	8002494 <HAL_QSPI_MemoryMapped+0xbc>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b01      	cmp	r3, #1
 800240c:	d13b      	bne.n	8002486 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2282      	movs	r2, #130	; 0x82
 8002418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	2200      	movs	r2, #0
 8002426:	2120      	movs	r1, #32
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f000 f845 	bl	80024b8 <QSPI_WaitFlagStateUntilTimeout>
 800242e:	4603      	mov	r3, r0
 8002430:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8002432:	7dfb      	ldrb	r3, [r7, #23]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d128      	bne.n	800248a <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f023 0108 	bic.w	r1, r3, #8
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	430a      	orrs	r2, r1
 800244c:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b08      	cmp	r3, #8
 8002454:	d110      	bne.n	8002478 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6812      	ldr	r2, [r2, #0]
 800245e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2210      	movs	r2, #16
 8002466:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002476:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8002478:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800247c:	68b9      	ldr	r1, [r7, #8]
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 f851 	bl	8002526 <QSPI_Config>
 8002484:	e001      	b.n	800248a <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 8002486:	2302      	movs	r3, #2
 8002488:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8002492:	7dfb      	ldrb	r3, [r7, #23]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	649a      	str	r2, [r3, #72]	; 0x48
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	603b      	str	r3, [r7, #0]
 80024c4:	4613      	mov	r3, r2
 80024c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80024c8:	e01a      	b.n	8002500 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d0:	d016      	beq.n	8002500 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024d2:	f7ff f857 	bl	8001584 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d302      	bcc.n	80024e8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10b      	bne.n	8002500 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2204      	movs	r2, #4
 80024ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f4:	f043 0201 	orr.w	r2, r3, #1
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e00e      	b.n	800251e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689a      	ldr	r2, [r3, #8]
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	4013      	ands	r3, r2
 800250a:	2b00      	cmp	r3, #0
 800250c:	bf14      	ite	ne
 800250e:	2301      	movne	r3, #1
 8002510:	2300      	moveq	r3, #0
 8002512:	b2db      	uxtb	r3, r3
 8002514:	461a      	mov	r2, r3
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	429a      	cmp	r2, r3
 800251a:	d1d6      	bne.n	80024ca <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8002526:	b480      	push	{r7}
 8002528:	b085      	sub	sp, #20
 800252a:	af00      	add	r7, sp, #0
 800252c:	60f8      	str	r0, [r7, #12]
 800252e:	60b9      	str	r1, [r7, #8]
 8002530:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002536:	2b00      	cmp	r3, #0
 8002538:	d009      	beq.n	800254e <QSPI_Config+0x28>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002540:	d005      	beq.n	800254e <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	3a01      	subs	r2, #1
 800254c:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 80b9 	beq.w	80026ca <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d05f      	beq.n	8002620 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	6892      	ldr	r2, [r2, #8]
 8002568:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d031      	beq.n	80025d6 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	431a      	orrs	r2, r3
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002580:	431a      	orrs	r2, r3
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	431a      	orrs	r2, r3
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	049b      	lsls	r3, r3, #18
 800258e:	431a      	orrs	r2, r3
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	431a      	orrs	r2, r3
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	431a      	orrs	r2, r3
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	431a      	orrs	r2, r3
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	431a      	orrs	r2, r3
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	431a      	orrs	r2, r3
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	ea42 0103 	orr.w	r1, r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	430a      	orrs	r2, r1
 80025be:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80025c6:	f000 812e 	beq.w	8002826 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	6852      	ldr	r2, [r2, #4]
 80025d2:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80025d4:	e127      	b.n	8002826 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	431a      	orrs	r2, r3
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e4:	431a      	orrs	r2, r3
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	431a      	orrs	r2, r3
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	049b      	lsls	r3, r3, #18
 80025f2:	431a      	orrs	r2, r3
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	431a      	orrs	r2, r3
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	431a      	orrs	r2, r3
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	431a      	orrs	r2, r3
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	431a      	orrs	r2, r3
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	ea42 0103 	orr.w	r1, r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	430a      	orrs	r2, r1
 800261c:	615a      	str	r2, [r3, #20]
}
 800261e:	e102      	b.n	8002826 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d02e      	beq.n	8002686 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002630:	431a      	orrs	r2, r3
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002636:	431a      	orrs	r2, r3
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263c:	431a      	orrs	r2, r3
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	049b      	lsls	r3, r3, #18
 8002644:	431a      	orrs	r2, r3
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	431a      	orrs	r2, r3
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	431a      	orrs	r2, r3
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	431a      	orrs	r2, r3
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	431a      	orrs	r2, r3
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	ea42 0103 	orr.w	r1, r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	430a      	orrs	r2, r1
 800266e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002676:	f000 80d6 	beq.w	8002826 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	6852      	ldr	r2, [r2, #4]
 8002682:	619a      	str	r2, [r3, #24]
}
 8002684:	e0cf      	b.n	8002826 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	431a      	orrs	r2, r3
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002694:	431a      	orrs	r2, r3
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269a:	431a      	orrs	r2, r3
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	049b      	lsls	r3, r3, #18
 80026a2:	431a      	orrs	r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	431a      	orrs	r2, r3
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	431a      	orrs	r2, r3
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	431a      	orrs	r2, r3
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	ea42 0103 	orr.w	r1, r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	615a      	str	r2, [r3, #20]
}
 80026c8:	e0ad      	b.n	8002826 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d058      	beq.n	8002784 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	6892      	ldr	r2, [r2, #8]
 80026da:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d02d      	beq.n	8002740 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ec:	431a      	orrs	r2, r3
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f2:	431a      	orrs	r2, r3
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	431a      	orrs	r2, r3
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	049b      	lsls	r3, r3, #18
 8002700:	431a      	orrs	r2, r3
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	431a      	orrs	r2, r3
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	431a      	orrs	r2, r3
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	431a      	orrs	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	69db      	ldr	r3, [r3, #28]
 8002718:	431a      	orrs	r2, r3
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	ea42 0103 	orr.w	r1, r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	430a      	orrs	r2, r1
 800272a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002732:	d078      	beq.n	8002826 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68ba      	ldr	r2, [r7, #8]
 800273a:	6852      	ldr	r2, [r2, #4]
 800273c:	619a      	str	r2, [r3, #24]
}
 800273e:	e072      	b.n	8002826 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002748:	431a      	orrs	r2, r3
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800274e:	431a      	orrs	r2, r3
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	431a      	orrs	r2, r3
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	049b      	lsls	r3, r3, #18
 800275c:	431a      	orrs	r2, r3
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	431a      	orrs	r2, r3
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	431a      	orrs	r2, r3
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	431a      	orrs	r2, r3
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	ea42 0103 	orr.w	r1, r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	430a      	orrs	r2, r1
 8002780:	615a      	str	r2, [r3, #20]
}
 8002782:	e050      	b.n	8002826 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	69db      	ldr	r3, [r3, #28]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d02a      	beq.n	80027e2 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002794:	431a      	orrs	r2, r3
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800279a:	431a      	orrs	r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	431a      	orrs	r2, r3
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	049b      	lsls	r3, r3, #18
 80027a8:	431a      	orrs	r2, r3
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	431a      	orrs	r2, r3
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	431a      	orrs	r2, r3
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	431a      	orrs	r2, r3
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	ea42 0103 	orr.w	r1, r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80027d4:	d027      	beq.n	8002826 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68ba      	ldr	r2, [r7, #8]
 80027dc:	6852      	ldr	r2, [r2, #4]
 80027de:	619a      	str	r2, [r3, #24]
}
 80027e0:	e021      	b.n	8002826 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d01d      	beq.n	8002826 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	431a      	orrs	r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f8:	431a      	orrs	r2, r3
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fe:	431a      	orrs	r2, r3
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	049b      	lsls	r3, r3, #18
 8002806:	431a      	orrs	r2, r3
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	431a      	orrs	r2, r3
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	431a      	orrs	r2, r3
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	ea42 0103 	orr.w	r1, r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	430a      	orrs	r2, r1
 8002824:	615a      	str	r2, [r3, #20]
}
 8002826:	bf00      	nop
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
	...

08002834 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800283c:	2300      	movs	r3, #0
 800283e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e29b      	b.n	8002d82 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 8087 	beq.w	8002966 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002858:	4b96      	ldr	r3, [pc, #600]	; (8002ab4 <HAL_RCC_OscConfig+0x280>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 030c 	and.w	r3, r3, #12
 8002860:	2b04      	cmp	r3, #4
 8002862:	d00c      	beq.n	800287e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002864:	4b93      	ldr	r3, [pc, #588]	; (8002ab4 <HAL_RCC_OscConfig+0x280>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 030c 	and.w	r3, r3, #12
 800286c:	2b08      	cmp	r3, #8
 800286e:	d112      	bne.n	8002896 <HAL_RCC_OscConfig+0x62>
 8002870:	4b90      	ldr	r3, [pc, #576]	; (8002ab4 <HAL_RCC_OscConfig+0x280>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002878:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800287c:	d10b      	bne.n	8002896 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800287e:	4b8d      	ldr	r3, [pc, #564]	; (8002ab4 <HAL_RCC_OscConfig+0x280>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d06c      	beq.n	8002964 <HAL_RCC_OscConfig+0x130>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d168      	bne.n	8002964 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e275      	b.n	8002d82 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800289e:	d106      	bne.n	80028ae <HAL_RCC_OscConfig+0x7a>
 80028a0:	4b84      	ldr	r3, [pc, #528]	; (8002ab4 <HAL_RCC_OscConfig+0x280>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a83      	ldr	r2, [pc, #524]	; (8002ab4 <HAL_RCC_OscConfig+0x280>)
 80028a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028aa:	6013      	str	r3, [r2, #0]
 80028ac:	e02e      	b.n	800290c <HAL_RCC_OscConfig+0xd8>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10c      	bne.n	80028d0 <HAL_RCC_OscConfig+0x9c>
 80028b6:	4b7f      	ldr	r3, [pc, #508]	; (8002ab4 <HAL_RCC_OscConfig+0x280>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a7e      	ldr	r2, [pc, #504]	; (8002ab4 <HAL_RCC_OscConfig+0x280>)
 80028bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	4b7c      	ldr	r3, [pc, #496]	; (8002ab4 <HAL_RCC_OscConfig+0x280>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a7b      	ldr	r2, [pc, #492]	; (8002ab4 <HAL_RCC_OscConfig+0x280>)
 80028c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	e01d      	b.n	800290c <HAL_RCC_OscConfig+0xd8>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028d8:	d10c      	bne.n	80028f4 <HAL_RCC_OscConfig+0xc0>
 80028da:	4b76      	ldr	r3, [pc, #472]	; (8002ab4 <HAL_RCC_OscConfig+0x280>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a75      	ldr	r2, [pc, #468]	; (8002ab4 <HAL_RCC_OscConfig+0x280>)
 80028e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	4b73      	ldr	r3, [pc, #460]	; (8002ab4 <HAL_RCC_OscConfig+0x280>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a72      	ldr	r2, [pc, #456]	; (8002ab4 <HAL_RCC_OscConfig+0x280>)
 80028ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	e00b      	b.n	800290c <HAL_RCC_OscConfig+0xd8>
 80028f4:	4b6f      	ldr	r3, [pc, #444]	; (8002ab4 <HAL_RCC_OscConfig+0x280>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a6e      	ldr	r2, [pc, #440]	; (8002ab4 <HAL_RCC_OscConfig+0x280>)
 80028fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028fe:	6013      	str	r3, [r2, #0]
 8002900:	4b6c      	ldr	r3, [pc, #432]	; (8002ab4 <HAL_RCC_OscConfig+0x280>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a6b      	ldr	r2, [pc, #428]	; (8002ab4 <HAL_RCC_OscConfig+0x280>)
 8002906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800290a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d013      	beq.n	800293c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002914:	f7fe fe36 	bl	8001584 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800291c:	f7fe fe32 	bl	8001584 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b64      	cmp	r3, #100	; 0x64
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e229      	b.n	8002d82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800292e:	4b61      	ldr	r3, [pc, #388]	; (8002ab4 <HAL_RCC_OscConfig+0x280>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f0      	beq.n	800291c <HAL_RCC_OscConfig+0xe8>
 800293a:	e014      	b.n	8002966 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293c:	f7fe fe22 	bl	8001584 <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002944:	f7fe fe1e 	bl	8001584 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b64      	cmp	r3, #100	; 0x64
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e215      	b.n	8002d82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002956:	4b57      	ldr	r3, [pc, #348]	; (8002ab4 <HAL_RCC_OscConfig+0x280>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f0      	bne.n	8002944 <HAL_RCC_OscConfig+0x110>
 8002962:	e000      	b.n	8002966 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002964:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d069      	beq.n	8002a46 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002972:	4b50      	ldr	r3, [pc, #320]	; (8002ab4 <HAL_RCC_OscConfig+0x280>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 030c 	and.w	r3, r3, #12
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00b      	beq.n	8002996 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800297e:	4b4d      	ldr	r3, [pc, #308]	; (8002ab4 <HAL_RCC_OscConfig+0x280>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 030c 	and.w	r3, r3, #12
 8002986:	2b08      	cmp	r3, #8
 8002988:	d11c      	bne.n	80029c4 <HAL_RCC_OscConfig+0x190>
 800298a:	4b4a      	ldr	r3, [pc, #296]	; (8002ab4 <HAL_RCC_OscConfig+0x280>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d116      	bne.n	80029c4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002996:	4b47      	ldr	r3, [pc, #284]	; (8002ab4 <HAL_RCC_OscConfig+0x280>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d005      	beq.n	80029ae <HAL_RCC_OscConfig+0x17a>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d001      	beq.n	80029ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e1e9      	b.n	8002d82 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ae:	4b41      	ldr	r3, [pc, #260]	; (8002ab4 <HAL_RCC_OscConfig+0x280>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	493d      	ldr	r1, [pc, #244]	; (8002ab4 <HAL_RCC_OscConfig+0x280>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c2:	e040      	b.n	8002a46 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d023      	beq.n	8002a14 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029cc:	4b39      	ldr	r3, [pc, #228]	; (8002ab4 <HAL_RCC_OscConfig+0x280>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a38      	ldr	r2, [pc, #224]	; (8002ab4 <HAL_RCC_OscConfig+0x280>)
 80029d2:	f043 0301 	orr.w	r3, r3, #1
 80029d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d8:	f7fe fdd4 	bl	8001584 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029e0:	f7fe fdd0 	bl	8001584 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e1c7      	b.n	8002d82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f2:	4b30      	ldr	r3, [pc, #192]	; (8002ab4 <HAL_RCC_OscConfig+0x280>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d0f0      	beq.n	80029e0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029fe:	4b2d      	ldr	r3, [pc, #180]	; (8002ab4 <HAL_RCC_OscConfig+0x280>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	4929      	ldr	r1, [pc, #164]	; (8002ab4 <HAL_RCC_OscConfig+0x280>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	600b      	str	r3, [r1, #0]
 8002a12:	e018      	b.n	8002a46 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a14:	4b27      	ldr	r3, [pc, #156]	; (8002ab4 <HAL_RCC_OscConfig+0x280>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a26      	ldr	r2, [pc, #152]	; (8002ab4 <HAL_RCC_OscConfig+0x280>)
 8002a1a:	f023 0301 	bic.w	r3, r3, #1
 8002a1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a20:	f7fe fdb0 	bl	8001584 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a28:	f7fe fdac 	bl	8001584 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e1a3      	b.n	8002d82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a3a:	4b1e      	ldr	r3, [pc, #120]	; (8002ab4 <HAL_RCC_OscConfig+0x280>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f0      	bne.n	8002a28 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d038      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d019      	beq.n	8002a8e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a5a:	4b16      	ldr	r3, [pc, #88]	; (8002ab4 <HAL_RCC_OscConfig+0x280>)
 8002a5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a5e:	4a15      	ldr	r2, [pc, #84]	; (8002ab4 <HAL_RCC_OscConfig+0x280>)
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a66:	f7fe fd8d 	bl	8001584 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a6e:	f7fe fd89 	bl	8001584 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e180      	b.n	8002d82 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a80:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <HAL_RCC_OscConfig+0x280>)
 8002a82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0f0      	beq.n	8002a6e <HAL_RCC_OscConfig+0x23a>
 8002a8c:	e01a      	b.n	8002ac4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a8e:	4b09      	ldr	r3, [pc, #36]	; (8002ab4 <HAL_RCC_OscConfig+0x280>)
 8002a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a92:	4a08      	ldr	r2, [pc, #32]	; (8002ab4 <HAL_RCC_OscConfig+0x280>)
 8002a94:	f023 0301 	bic.w	r3, r3, #1
 8002a98:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9a:	f7fe fd73 	bl	8001584 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa0:	e00a      	b.n	8002ab8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aa2:	f7fe fd6f 	bl	8001584 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d903      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e166      	b.n	8002d82 <HAL_RCC_OscConfig+0x54e>
 8002ab4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab8:	4b92      	ldr	r3, [pc, #584]	; (8002d04 <HAL_RCC_OscConfig+0x4d0>)
 8002aba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1ee      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0304 	and.w	r3, r3, #4
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 80a4 	beq.w	8002c1a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ad2:	4b8c      	ldr	r3, [pc, #560]	; (8002d04 <HAL_RCC_OscConfig+0x4d0>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10d      	bne.n	8002afa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ade:	4b89      	ldr	r3, [pc, #548]	; (8002d04 <HAL_RCC_OscConfig+0x4d0>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	4a88      	ldr	r2, [pc, #544]	; (8002d04 <HAL_RCC_OscConfig+0x4d0>)
 8002ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aea:	4b86      	ldr	r3, [pc, #536]	; (8002d04 <HAL_RCC_OscConfig+0x4d0>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af2:	60bb      	str	r3, [r7, #8]
 8002af4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002af6:	2301      	movs	r3, #1
 8002af8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002afa:	4b83      	ldr	r3, [pc, #524]	; (8002d08 <HAL_RCC_OscConfig+0x4d4>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d118      	bne.n	8002b38 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002b06:	4b80      	ldr	r3, [pc, #512]	; (8002d08 <HAL_RCC_OscConfig+0x4d4>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a7f      	ldr	r2, [pc, #508]	; (8002d08 <HAL_RCC_OscConfig+0x4d4>)
 8002b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b12:	f7fe fd37 	bl	8001584 <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b1a:	f7fe fd33 	bl	8001584 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b64      	cmp	r3, #100	; 0x64
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e12a      	b.n	8002d82 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b2c:	4b76      	ldr	r3, [pc, #472]	; (8002d08 <HAL_RCC_OscConfig+0x4d4>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0f0      	beq.n	8002b1a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d106      	bne.n	8002b4e <HAL_RCC_OscConfig+0x31a>
 8002b40:	4b70      	ldr	r3, [pc, #448]	; (8002d04 <HAL_RCC_OscConfig+0x4d0>)
 8002b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b44:	4a6f      	ldr	r2, [pc, #444]	; (8002d04 <HAL_RCC_OscConfig+0x4d0>)
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b4c:	e02d      	b.n	8002baa <HAL_RCC_OscConfig+0x376>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10c      	bne.n	8002b70 <HAL_RCC_OscConfig+0x33c>
 8002b56:	4b6b      	ldr	r3, [pc, #428]	; (8002d04 <HAL_RCC_OscConfig+0x4d0>)
 8002b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5a:	4a6a      	ldr	r2, [pc, #424]	; (8002d04 <HAL_RCC_OscConfig+0x4d0>)
 8002b5c:	f023 0301 	bic.w	r3, r3, #1
 8002b60:	6713      	str	r3, [r2, #112]	; 0x70
 8002b62:	4b68      	ldr	r3, [pc, #416]	; (8002d04 <HAL_RCC_OscConfig+0x4d0>)
 8002b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b66:	4a67      	ldr	r2, [pc, #412]	; (8002d04 <HAL_RCC_OscConfig+0x4d0>)
 8002b68:	f023 0304 	bic.w	r3, r3, #4
 8002b6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b6e:	e01c      	b.n	8002baa <HAL_RCC_OscConfig+0x376>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	2b05      	cmp	r3, #5
 8002b76:	d10c      	bne.n	8002b92 <HAL_RCC_OscConfig+0x35e>
 8002b78:	4b62      	ldr	r3, [pc, #392]	; (8002d04 <HAL_RCC_OscConfig+0x4d0>)
 8002b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7c:	4a61      	ldr	r2, [pc, #388]	; (8002d04 <HAL_RCC_OscConfig+0x4d0>)
 8002b7e:	f043 0304 	orr.w	r3, r3, #4
 8002b82:	6713      	str	r3, [r2, #112]	; 0x70
 8002b84:	4b5f      	ldr	r3, [pc, #380]	; (8002d04 <HAL_RCC_OscConfig+0x4d0>)
 8002b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b88:	4a5e      	ldr	r2, [pc, #376]	; (8002d04 <HAL_RCC_OscConfig+0x4d0>)
 8002b8a:	f043 0301 	orr.w	r3, r3, #1
 8002b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b90:	e00b      	b.n	8002baa <HAL_RCC_OscConfig+0x376>
 8002b92:	4b5c      	ldr	r3, [pc, #368]	; (8002d04 <HAL_RCC_OscConfig+0x4d0>)
 8002b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b96:	4a5b      	ldr	r2, [pc, #364]	; (8002d04 <HAL_RCC_OscConfig+0x4d0>)
 8002b98:	f023 0301 	bic.w	r3, r3, #1
 8002b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b9e:	4b59      	ldr	r3, [pc, #356]	; (8002d04 <HAL_RCC_OscConfig+0x4d0>)
 8002ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba2:	4a58      	ldr	r2, [pc, #352]	; (8002d04 <HAL_RCC_OscConfig+0x4d0>)
 8002ba4:	f023 0304 	bic.w	r3, r3, #4
 8002ba8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d015      	beq.n	8002bde <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb2:	f7fe fce7 	bl	8001584 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb8:	e00a      	b.n	8002bd0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bba:	f7fe fce3 	bl	8001584 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e0d8      	b.n	8002d82 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd0:	4b4c      	ldr	r3, [pc, #304]	; (8002d04 <HAL_RCC_OscConfig+0x4d0>)
 8002bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0ee      	beq.n	8002bba <HAL_RCC_OscConfig+0x386>
 8002bdc:	e014      	b.n	8002c08 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bde:	f7fe fcd1 	bl	8001584 <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002be4:	e00a      	b.n	8002bfc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be6:	f7fe fccd 	bl	8001584 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e0c2      	b.n	8002d82 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bfc:	4b41      	ldr	r3, [pc, #260]	; (8002d04 <HAL_RCC_OscConfig+0x4d0>)
 8002bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1ee      	bne.n	8002be6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c08:	7dfb      	ldrb	r3, [r7, #23]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d105      	bne.n	8002c1a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c0e:	4b3d      	ldr	r3, [pc, #244]	; (8002d04 <HAL_RCC_OscConfig+0x4d0>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	4a3c      	ldr	r2, [pc, #240]	; (8002d04 <HAL_RCC_OscConfig+0x4d0>)
 8002c14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 80ae 	beq.w	8002d80 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c24:	4b37      	ldr	r3, [pc, #220]	; (8002d04 <HAL_RCC_OscConfig+0x4d0>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 030c 	and.w	r3, r3, #12
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	d06d      	beq.n	8002d0c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d14b      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c38:	4b32      	ldr	r3, [pc, #200]	; (8002d04 <HAL_RCC_OscConfig+0x4d0>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a31      	ldr	r2, [pc, #196]	; (8002d04 <HAL_RCC_OscConfig+0x4d0>)
 8002c3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c44:	f7fe fc9e 	bl	8001584 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c4c:	f7fe fc9a 	bl	8001584 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e091      	b.n	8002d82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c5e:	4b29      	ldr	r3, [pc, #164]	; (8002d04 <HAL_RCC_OscConfig+0x4d0>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f0      	bne.n	8002c4c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69da      	ldr	r2, [r3, #28]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	019b      	lsls	r3, r3, #6
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c80:	085b      	lsrs	r3, r3, #1
 8002c82:	3b01      	subs	r3, #1
 8002c84:	041b      	lsls	r3, r3, #16
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8c:	061b      	lsls	r3, r3, #24
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c94:	071b      	lsls	r3, r3, #28
 8002c96:	491b      	ldr	r1, [pc, #108]	; (8002d04 <HAL_RCC_OscConfig+0x4d0>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c9c:	4b19      	ldr	r3, [pc, #100]	; (8002d04 <HAL_RCC_OscConfig+0x4d0>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a18      	ldr	r2, [pc, #96]	; (8002d04 <HAL_RCC_OscConfig+0x4d0>)
 8002ca2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ca6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca8:	f7fe fc6c 	bl	8001584 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb0:	f7fe fc68 	bl	8001584 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e05f      	b.n	8002d82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc2:	4b10      	ldr	r3, [pc, #64]	; (8002d04 <HAL_RCC_OscConfig+0x4d0>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0f0      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x47c>
 8002cce:	e057      	b.n	8002d80 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd0:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <HAL_RCC_OscConfig+0x4d0>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a0b      	ldr	r2, [pc, #44]	; (8002d04 <HAL_RCC_OscConfig+0x4d0>)
 8002cd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cdc:	f7fe fc52 	bl	8001584 <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce4:	f7fe fc4e 	bl	8001584 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e045      	b.n	8002d82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cf6:	4b03      	ldr	r3, [pc, #12]	; (8002d04 <HAL_RCC_OscConfig+0x4d0>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1f0      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x4b0>
 8002d02:	e03d      	b.n	8002d80 <HAL_RCC_OscConfig+0x54c>
 8002d04:	40023800 	.word	0x40023800
 8002d08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002d0c:	4b1f      	ldr	r3, [pc, #124]	; (8002d8c <HAL_RCC_OscConfig+0x558>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d030      	beq.n	8002d7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d129      	bne.n	8002d7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d122      	bne.n	8002d7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d42:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d119      	bne.n	8002d7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d52:	085b      	lsrs	r3, r3, #1
 8002d54:	3b01      	subs	r3, #1
 8002d56:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d10f      	bne.n	8002d7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d66:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d107      	bne.n	8002d7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d001      	beq.n	8002d80 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e000      	b.n	8002d82 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3718      	adds	r7, #24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40023800 	.word	0x40023800

08002d90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e0d0      	b.n	8002f4a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002da8:	4b6a      	ldr	r3, [pc, #424]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 030f 	and.w	r3, r3, #15
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d910      	bls.n	8002dd8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db6:	4b67      	ldr	r3, [pc, #412]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f023 020f 	bic.w	r2, r3, #15
 8002dbe:	4965      	ldr	r1, [pc, #404]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc6:	4b63      	ldr	r3, [pc, #396]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d001      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e0b8      	b.n	8002f4a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d020      	beq.n	8002e26 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d005      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002df0:	4b59      	ldr	r3, [pc, #356]	; (8002f58 <HAL_RCC_ClockConfig+0x1c8>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	4a58      	ldr	r2, [pc, #352]	; (8002f58 <HAL_RCC_ClockConfig+0x1c8>)
 8002df6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dfa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0308 	and.w	r3, r3, #8
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d005      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e08:	4b53      	ldr	r3, [pc, #332]	; (8002f58 <HAL_RCC_ClockConfig+0x1c8>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	4a52      	ldr	r2, [pc, #328]	; (8002f58 <HAL_RCC_ClockConfig+0x1c8>)
 8002e0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e12:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e14:	4b50      	ldr	r3, [pc, #320]	; (8002f58 <HAL_RCC_ClockConfig+0x1c8>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	494d      	ldr	r1, [pc, #308]	; (8002f58 <HAL_RCC_ClockConfig+0x1c8>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d040      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d107      	bne.n	8002e4a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3a:	4b47      	ldr	r3, [pc, #284]	; (8002f58 <HAL_RCC_ClockConfig+0x1c8>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d115      	bne.n	8002e72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e07f      	b.n	8002f4a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d107      	bne.n	8002e62 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e52:	4b41      	ldr	r3, [pc, #260]	; (8002f58 <HAL_RCC_ClockConfig+0x1c8>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d109      	bne.n	8002e72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e073      	b.n	8002f4a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e62:	4b3d      	ldr	r3, [pc, #244]	; (8002f58 <HAL_RCC_ClockConfig+0x1c8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e06b      	b.n	8002f4a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e72:	4b39      	ldr	r3, [pc, #228]	; (8002f58 <HAL_RCC_ClockConfig+0x1c8>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f023 0203 	bic.w	r2, r3, #3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	4936      	ldr	r1, [pc, #216]	; (8002f58 <HAL_RCC_ClockConfig+0x1c8>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e84:	f7fe fb7e 	bl	8001584 <HAL_GetTick>
 8002e88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e8a:	e00a      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e8c:	f7fe fb7a 	bl	8001584 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e053      	b.n	8002f4a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea2:	4b2d      	ldr	r3, [pc, #180]	; (8002f58 <HAL_RCC_ClockConfig+0x1c8>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 020c 	and.w	r2, r3, #12
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d1eb      	bne.n	8002e8c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002eb4:	4b27      	ldr	r3, [pc, #156]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 030f 	and.w	r3, r3, #15
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d210      	bcs.n	8002ee4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ec2:	4b24      	ldr	r3, [pc, #144]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f023 020f 	bic.w	r2, r3, #15
 8002eca:	4922      	ldr	r1, [pc, #136]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed2:	4b20      	ldr	r3, [pc, #128]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d001      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e032      	b.n	8002f4a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d008      	beq.n	8002f02 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ef0:	4b19      	ldr	r3, [pc, #100]	; (8002f58 <HAL_RCC_ClockConfig+0x1c8>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	4916      	ldr	r1, [pc, #88]	; (8002f58 <HAL_RCC_ClockConfig+0x1c8>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0308 	and.w	r3, r3, #8
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d009      	beq.n	8002f22 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f0e:	4b12      	ldr	r3, [pc, #72]	; (8002f58 <HAL_RCC_ClockConfig+0x1c8>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	490e      	ldr	r1, [pc, #56]	; (8002f58 <HAL_RCC_ClockConfig+0x1c8>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f22:	f000 f821 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 8002f26:	4601      	mov	r1, r0
 8002f28:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <HAL_RCC_ClockConfig+0x1c8>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	091b      	lsrs	r3, r3, #4
 8002f2e:	f003 030f 	and.w	r3, r3, #15
 8002f32:	4a0a      	ldr	r2, [pc, #40]	; (8002f5c <HAL_RCC_ClockConfig+0x1cc>)
 8002f34:	5cd3      	ldrb	r3, [r2, r3]
 8002f36:	fa21 f303 	lsr.w	r3, r1, r3
 8002f3a:	4a09      	ldr	r2, [pc, #36]	; (8002f60 <HAL_RCC_ClockConfig+0x1d0>)
 8002f3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f3e:	4b09      	ldr	r3, [pc, #36]	; (8002f64 <HAL_RCC_ClockConfig+0x1d4>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7fe fada 	bl	80014fc <HAL_InitTick>

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40023c00 	.word	0x40023c00
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	08005080 	.word	0x08005080
 8002f60:	20000000 	.word	0x20000000
 8002f64:	20000004 	.word	0x20000004

08002f68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	607b      	str	r3, [r7, #4]
 8002f72:	2300      	movs	r3, #0
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	2300      	movs	r3, #0
 8002f78:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f7e:	4b50      	ldr	r3, [pc, #320]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x158>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 030c 	and.w	r3, r3, #12
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	d007      	beq.n	8002f9a <HAL_RCC_GetSysClockFreq+0x32>
 8002f8a:	2b08      	cmp	r3, #8
 8002f8c:	d008      	beq.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x38>
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f040 808d 	bne.w	80030ae <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f94:	4b4b      	ldr	r3, [pc, #300]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002f96:	60bb      	str	r3, [r7, #8]
      break;
 8002f98:	e08c      	b.n	80030b4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f9a:	4b4b      	ldr	r3, [pc, #300]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f9c:	60bb      	str	r3, [r7, #8]
      break;
 8002f9e:	e089      	b.n	80030b4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fa0:	4b47      	ldr	r3, [pc, #284]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x158>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fa8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002faa:	4b45      	ldr	r3, [pc, #276]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x158>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d023      	beq.n	8002ffe <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fb6:	4b42      	ldr	r3, [pc, #264]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x158>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	099b      	lsrs	r3, r3, #6
 8002fbc:	f04f 0400 	mov.w	r4, #0
 8002fc0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002fc4:	f04f 0200 	mov.w	r2, #0
 8002fc8:	ea03 0501 	and.w	r5, r3, r1
 8002fcc:	ea04 0602 	and.w	r6, r4, r2
 8002fd0:	4a3d      	ldr	r2, [pc, #244]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002fd2:	fb02 f106 	mul.w	r1, r2, r6
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	fb02 f205 	mul.w	r2, r2, r5
 8002fdc:	440a      	add	r2, r1
 8002fde:	493a      	ldr	r1, [pc, #232]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002fe0:	fba5 0101 	umull	r0, r1, r5, r1
 8002fe4:	1853      	adds	r3, r2, r1
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f04f 0400 	mov.w	r4, #0
 8002fee:	461a      	mov	r2, r3
 8002ff0:	4623      	mov	r3, r4
 8002ff2:	f7fd f921 	bl	8000238 <__aeabi_uldivmod>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	460c      	mov	r4, r1
 8002ffa:	60fb      	str	r3, [r7, #12]
 8002ffc:	e049      	b.n	8003092 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ffe:	4b30      	ldr	r3, [pc, #192]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	099b      	lsrs	r3, r3, #6
 8003004:	f04f 0400 	mov.w	r4, #0
 8003008:	f240 11ff 	movw	r1, #511	; 0x1ff
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	ea03 0501 	and.w	r5, r3, r1
 8003014:	ea04 0602 	and.w	r6, r4, r2
 8003018:	4629      	mov	r1, r5
 800301a:	4632      	mov	r2, r6
 800301c:	f04f 0300 	mov.w	r3, #0
 8003020:	f04f 0400 	mov.w	r4, #0
 8003024:	0154      	lsls	r4, r2, #5
 8003026:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800302a:	014b      	lsls	r3, r1, #5
 800302c:	4619      	mov	r1, r3
 800302e:	4622      	mov	r2, r4
 8003030:	1b49      	subs	r1, r1, r5
 8003032:	eb62 0206 	sbc.w	r2, r2, r6
 8003036:	f04f 0300 	mov.w	r3, #0
 800303a:	f04f 0400 	mov.w	r4, #0
 800303e:	0194      	lsls	r4, r2, #6
 8003040:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003044:	018b      	lsls	r3, r1, #6
 8003046:	1a5b      	subs	r3, r3, r1
 8003048:	eb64 0402 	sbc.w	r4, r4, r2
 800304c:	f04f 0100 	mov.w	r1, #0
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	00e2      	lsls	r2, r4, #3
 8003056:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800305a:	00d9      	lsls	r1, r3, #3
 800305c:	460b      	mov	r3, r1
 800305e:	4614      	mov	r4, r2
 8003060:	195b      	adds	r3, r3, r5
 8003062:	eb44 0406 	adc.w	r4, r4, r6
 8003066:	f04f 0100 	mov.w	r1, #0
 800306a:	f04f 0200 	mov.w	r2, #0
 800306e:	02a2      	lsls	r2, r4, #10
 8003070:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003074:	0299      	lsls	r1, r3, #10
 8003076:	460b      	mov	r3, r1
 8003078:	4614      	mov	r4, r2
 800307a:	4618      	mov	r0, r3
 800307c:	4621      	mov	r1, r4
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f04f 0400 	mov.w	r4, #0
 8003084:	461a      	mov	r2, r3
 8003086:	4623      	mov	r3, r4
 8003088:	f7fd f8d6 	bl	8000238 <__aeabi_uldivmod>
 800308c:	4603      	mov	r3, r0
 800308e:	460c      	mov	r4, r1
 8003090:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003092:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	0c1b      	lsrs	r3, r3, #16
 8003098:	f003 0303 	and.w	r3, r3, #3
 800309c:	3301      	adds	r3, #1
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030aa:	60bb      	str	r3, [r7, #8]
      break;
 80030ac:	e002      	b.n	80030b4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030ae:	4b05      	ldr	r3, [pc, #20]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80030b0:	60bb      	str	r3, [r7, #8]
      break;
 80030b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030b4:	68bb      	ldr	r3, [r7, #8]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3714      	adds	r7, #20
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030be:	bf00      	nop
 80030c0:	40023800 	.word	0x40023800
 80030c4:	00f42400 	.word	0x00f42400
 80030c8:	017d7840 	.word	0x017d7840

080030cc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030d0:	4b03      	ldr	r3, [pc, #12]	; (80030e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80030d2:	681b      	ldr	r3, [r3, #0]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	20000000 	.word	0x20000000

080030e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030e8:	f7ff fff0 	bl	80030cc <HAL_RCC_GetHCLKFreq>
 80030ec:	4601      	mov	r1, r0
 80030ee:	4b05      	ldr	r3, [pc, #20]	; (8003104 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	0a9b      	lsrs	r3, r3, #10
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	4a03      	ldr	r2, [pc, #12]	; (8003108 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030fa:	5cd3      	ldrb	r3, [r2, r3]
 80030fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003100:	4618      	mov	r0, r3
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40023800 	.word	0x40023800
 8003108:	08005090 	.word	0x08005090

0800310c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003110:	f7ff ffdc 	bl	80030cc <HAL_RCC_GetHCLKFreq>
 8003114:	4601      	mov	r1, r0
 8003116:	4b05      	ldr	r3, [pc, #20]	; (800312c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	0b5b      	lsrs	r3, r3, #13
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	4a03      	ldr	r2, [pc, #12]	; (8003130 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003122:	5cd3      	ldrb	r3, [r2, r3]
 8003124:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003128:	4618      	mov	r0, r3
 800312a:	bd80      	pop	{r7, pc}
 800312c:	40023800 	.word	0x40023800
 8003130:	08005090 	.word	0x08005090

08003134 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b088      	sub	sp, #32
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800313c:	2300      	movs	r3, #0
 800313e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003140:	2300      	movs	r3, #0
 8003142:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003144:	2300      	movs	r3, #0
 8003146:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003148:	2300      	movs	r3, #0
 800314a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800314c:	2300      	movs	r3, #0
 800314e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b00      	cmp	r3, #0
 800315a:	d012      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800315c:	4b69      	ldr	r3, [pc, #420]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	4a68      	ldr	r2, [pc, #416]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003162:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003166:	6093      	str	r3, [r2, #8]
 8003168:	4b66      	ldr	r3, [pc, #408]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003170:	4964      	ldr	r1, [pc, #400]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003172:	4313      	orrs	r3, r2
 8003174:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800317e:	2301      	movs	r3, #1
 8003180:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d017      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800318e:	4b5d      	ldr	r3, [pc, #372]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003190:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003194:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319c:	4959      	ldr	r1, [pc, #356]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031ac:	d101      	bne.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80031ae:	2301      	movs	r3, #1
 80031b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80031ba:	2301      	movs	r3, #1
 80031bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d017      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031ca:	4b4e      	ldr	r3, [pc, #312]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	494a      	ldr	r1, [pc, #296]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031e8:	d101      	bne.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80031ea:	2301      	movs	r3, #1
 80031ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80031f6:	2301      	movs	r3, #1
 80031f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003206:	2301      	movs	r3, #1
 8003208:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0320 	and.w	r3, r3, #32
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 808b 	beq.w	800332e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003218:	4b3a      	ldr	r3, [pc, #232]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800321a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321c:	4a39      	ldr	r2, [pc, #228]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800321e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003222:	6413      	str	r3, [r2, #64]	; 0x40
 8003224:	4b37      	ldr	r3, [pc, #220]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800322c:	60bb      	str	r3, [r7, #8]
 800322e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003230:	4b35      	ldr	r3, [pc, #212]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a34      	ldr	r2, [pc, #208]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800323a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800323c:	f7fe f9a2 	bl	8001584 <HAL_GetTick>
 8003240:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003242:	e008      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003244:	f7fe f99e 	bl	8001584 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b64      	cmp	r3, #100	; 0x64
 8003250:	d901      	bls.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e38d      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003256:	4b2c      	ldr	r3, [pc, #176]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0f0      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003262:	4b28      	ldr	r3, [pc, #160]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800326a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d035      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	429a      	cmp	r2, r3
 800327e:	d02e      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003280:	4b20      	ldr	r3, [pc, #128]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003284:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003288:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800328a:	4b1e      	ldr	r3, [pc, #120]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800328c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328e:	4a1d      	ldr	r2, [pc, #116]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003294:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003296:	4b1b      	ldr	r3, [pc, #108]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329a:	4a1a      	ldr	r2, [pc, #104]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800329c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80032a2:	4a18      	ldr	r2, [pc, #96]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80032a8:	4b16      	ldr	r3, [pc, #88]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d114      	bne.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b4:	f7fe f966 	bl	8001584 <HAL_GetTick>
 80032b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ba:	e00a      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032bc:	f7fe f962 	bl	8001584 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e34f      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d2:	4b0c      	ldr	r3, [pc, #48]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d0ee      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032ea:	d111      	bne.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80032ec:	4b05      	ldr	r3, [pc, #20]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032f8:	4b04      	ldr	r3, [pc, #16]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80032fa:	400b      	ands	r3, r1
 80032fc:	4901      	ldr	r1, [pc, #4]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	608b      	str	r3, [r1, #8]
 8003302:	e00b      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003304:	40023800 	.word	0x40023800
 8003308:	40007000 	.word	0x40007000
 800330c:	0ffffcff 	.word	0x0ffffcff
 8003310:	4bb3      	ldr	r3, [pc, #716]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	4ab2      	ldr	r2, [pc, #712]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003316:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800331a:	6093      	str	r3, [r2, #8]
 800331c:	4bb0      	ldr	r3, [pc, #704]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800331e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003328:	49ad      	ldr	r1, [pc, #692]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800332a:	4313      	orrs	r3, r2
 800332c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0310 	and.w	r3, r3, #16
 8003336:	2b00      	cmp	r3, #0
 8003338:	d010      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800333a:	4ba9      	ldr	r3, [pc, #676]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800333c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003340:	4aa7      	ldr	r2, [pc, #668]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003342:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003346:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800334a:	4ba5      	ldr	r3, [pc, #660]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800334c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003354:	49a2      	ldr	r1, [pc, #648]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003356:	4313      	orrs	r3, r2
 8003358:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00a      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003368:	4b9d      	ldr	r3, [pc, #628]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800336a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800336e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003376:	499a      	ldr	r1, [pc, #616]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003378:	4313      	orrs	r3, r2
 800337a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00a      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800338a:	4b95      	ldr	r3, [pc, #596]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800338c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003390:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003398:	4991      	ldr	r1, [pc, #580]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800339a:	4313      	orrs	r3, r2
 800339c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00a      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033ac:	4b8c      	ldr	r3, [pc, #560]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033ba:	4989      	ldr	r1, [pc, #548]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00a      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80033ce:	4b84      	ldr	r3, [pc, #528]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033dc:	4980      	ldr	r1, [pc, #512]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00a      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033f0:	4b7b      	ldr	r3, [pc, #492]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f6:	f023 0203 	bic.w	r2, r3, #3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fe:	4978      	ldr	r1, [pc, #480]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003400:	4313      	orrs	r3, r2
 8003402:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00a      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003412:	4b73      	ldr	r3, [pc, #460]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003418:	f023 020c 	bic.w	r2, r3, #12
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003420:	496f      	ldr	r1, [pc, #444]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003422:	4313      	orrs	r3, r2
 8003424:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00a      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003434:	4b6a      	ldr	r3, [pc, #424]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003442:	4967      	ldr	r1, [pc, #412]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003444:	4313      	orrs	r3, r2
 8003446:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00a      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003456:	4b62      	ldr	r3, [pc, #392]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003464:	495e      	ldr	r1, [pc, #376]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003466:	4313      	orrs	r3, r2
 8003468:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00a      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003478:	4b59      	ldr	r3, [pc, #356]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800347a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003486:	4956      	ldr	r1, [pc, #344]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003488:	4313      	orrs	r3, r2
 800348a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00a      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800349a:	4b51      	ldr	r3, [pc, #324]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800349c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a8:	494d      	ldr	r1, [pc, #308]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00a      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80034bc:	4b48      	ldr	r3, [pc, #288]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ca:	4945      	ldr	r1, [pc, #276]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00a      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80034de:	4b40      	ldr	r3, [pc, #256]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ec:	493c      	ldr	r1, [pc, #240]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00a      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003500:	4b37      	ldr	r3, [pc, #220]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003506:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800350e:	4934      	ldr	r1, [pc, #208]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003510:	4313      	orrs	r3, r2
 8003512:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d011      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003522:	4b2f      	ldr	r3, [pc, #188]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003528:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003530:	492b      	ldr	r1, [pc, #172]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003532:	4313      	orrs	r3, r2
 8003534:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800353c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003540:	d101      	bne.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003542:	2301      	movs	r3, #1
 8003544:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003552:	2301      	movs	r3, #1
 8003554:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003562:	4b1f      	ldr	r3, [pc, #124]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003568:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003570:	491b      	ldr	r1, [pc, #108]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003572:	4313      	orrs	r3, r2
 8003574:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00b      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003584:	4b16      	ldr	r3, [pc, #88]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003594:	4912      	ldr	r1, [pc, #72]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003596:	4313      	orrs	r3, r2
 8003598:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00b      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80035a8:	4b0d      	ldr	r3, [pc, #52]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ae:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035b8:	4909      	ldr	r1, [pc, #36]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00f      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80035cc:	4b04      	ldr	r3, [pc, #16]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035d2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035dc:	e002      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80035de:	bf00      	nop
 80035e0:	40023800 	.word	0x40023800
 80035e4:	4985      	ldr	r1, [pc, #532]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00b      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80035f8:	4b80      	ldr	r3, [pc, #512]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80035fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035fe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003608:	497c      	ldr	r1, [pc, #496]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800360a:	4313      	orrs	r3, r2
 800360c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d005      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800361e:	f040 80d6 	bne.w	80037ce <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003622:	4b76      	ldr	r3, [pc, #472]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a75      	ldr	r2, [pc, #468]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003628:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800362c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800362e:	f7fd ffa9 	bl	8001584 <HAL_GetTick>
 8003632:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003634:	e008      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003636:	f7fd ffa5 	bl	8001584 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b64      	cmp	r3, #100	; 0x64
 8003642:	d901      	bls.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e194      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003648:	4b6c      	ldr	r3, [pc, #432]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1f0      	bne.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b00      	cmp	r3, #0
 800365e:	d021      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003664:	2b00      	cmp	r3, #0
 8003666:	d11d      	bne.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003668:	4b64      	ldr	r3, [pc, #400]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800366a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800366e:	0c1b      	lsrs	r3, r3, #16
 8003670:	f003 0303 	and.w	r3, r3, #3
 8003674:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003676:	4b61      	ldr	r3, [pc, #388]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003678:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800367c:	0e1b      	lsrs	r3, r3, #24
 800367e:	f003 030f 	and.w	r3, r3, #15
 8003682:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	019a      	lsls	r2, r3, #6
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	041b      	lsls	r3, r3, #16
 800368e:	431a      	orrs	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	061b      	lsls	r3, r3, #24
 8003694:	431a      	orrs	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	071b      	lsls	r3, r3, #28
 800369c:	4957      	ldr	r1, [pc, #348]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d004      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x586>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036b8:	d00a      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d02e      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036ce:	d129      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80036d0:	4b4a      	ldr	r3, [pc, #296]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80036d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036d6:	0c1b      	lsrs	r3, r3, #16
 80036d8:	f003 0303 	and.w	r3, r3, #3
 80036dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80036de:	4b47      	ldr	r3, [pc, #284]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80036e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036e4:	0f1b      	lsrs	r3, r3, #28
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	019a      	lsls	r2, r3, #6
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	041b      	lsls	r3, r3, #16
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	061b      	lsls	r3, r3, #24
 80036fe:	431a      	orrs	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	071b      	lsls	r3, r3, #28
 8003704:	493d      	ldr	r1, [pc, #244]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003706:	4313      	orrs	r3, r2
 8003708:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800370c:	4b3b      	ldr	r3, [pc, #236]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800370e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003712:	f023 021f 	bic.w	r2, r3, #31
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371a:	3b01      	subs	r3, #1
 800371c:	4937      	ldr	r1, [pc, #220]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800371e:	4313      	orrs	r3, r2
 8003720:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d01d      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003730:	4b32      	ldr	r3, [pc, #200]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003732:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003736:	0e1b      	lsrs	r3, r3, #24
 8003738:	f003 030f 	and.w	r3, r3, #15
 800373c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800373e:	4b2f      	ldr	r3, [pc, #188]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003740:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003744:	0f1b      	lsrs	r3, r3, #28
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	019a      	lsls	r2, r3, #6
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	041b      	lsls	r3, r3, #16
 8003758:	431a      	orrs	r2, r3
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	061b      	lsls	r3, r3, #24
 800375e:	431a      	orrs	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	071b      	lsls	r3, r3, #28
 8003764:	4925      	ldr	r1, [pc, #148]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003766:	4313      	orrs	r3, r2
 8003768:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d011      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	019a      	lsls	r2, r3, #6
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	041b      	lsls	r3, r3, #16
 8003784:	431a      	orrs	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	061b      	lsls	r3, r3, #24
 800378c:	431a      	orrs	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	071b      	lsls	r3, r3, #28
 8003794:	4919      	ldr	r1, [pc, #100]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003796:	4313      	orrs	r3, r2
 8003798:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800379c:	4b17      	ldr	r3, [pc, #92]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a16      	ldr	r2, [pc, #88]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80037a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037a8:	f7fd feec 	bl	8001584 <HAL_GetTick>
 80037ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037ae:	e008      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80037b0:	f7fd fee8 	bl	8001584 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b64      	cmp	r3, #100	; 0x64
 80037bc:	d901      	bls.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e0d7      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037c2:	4b0e      	ldr	r3, [pc, #56]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0f0      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	f040 80cd 	bne.w	8003970 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80037d6:	4b09      	ldr	r3, [pc, #36]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a08      	ldr	r2, [pc, #32]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80037dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037e2:	f7fd fecf 	bl	8001584 <HAL_GetTick>
 80037e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80037e8:	e00a      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80037ea:	f7fd fecb 	bl	8001584 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b64      	cmp	r3, #100	; 0x64
 80037f6:	d903      	bls.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e0ba      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80037fc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003800:	4b5e      	ldr	r3, [pc, #376]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800380c:	d0ed      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381e:	2b00      	cmp	r3, #0
 8003820:	d009      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800382a:	2b00      	cmp	r3, #0
 800382c:	d02e      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	2b00      	cmp	r3, #0
 8003834:	d12a      	bne.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003836:	4b51      	ldr	r3, [pc, #324]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383c:	0c1b      	lsrs	r3, r3, #16
 800383e:	f003 0303 	and.w	r3, r3, #3
 8003842:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003844:	4b4d      	ldr	r3, [pc, #308]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384a:	0f1b      	lsrs	r3, r3, #28
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	019a      	lsls	r2, r3, #6
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	041b      	lsls	r3, r3, #16
 800385c:	431a      	orrs	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	061b      	lsls	r3, r3, #24
 8003864:	431a      	orrs	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	071b      	lsls	r3, r3, #28
 800386a:	4944      	ldr	r1, [pc, #272]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800386c:	4313      	orrs	r3, r2
 800386e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003872:	4b42      	ldr	r3, [pc, #264]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003874:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003878:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003880:	3b01      	subs	r3, #1
 8003882:	021b      	lsls	r3, r3, #8
 8003884:	493d      	ldr	r1, [pc, #244]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003886:	4313      	orrs	r3, r2
 8003888:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d022      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800389c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038a0:	d11d      	bne.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80038a2:	4b36      	ldr	r3, [pc, #216]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80038a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a8:	0e1b      	lsrs	r3, r3, #24
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80038b0:	4b32      	ldr	r3, [pc, #200]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80038b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b6:	0f1b      	lsrs	r3, r3, #28
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	019a      	lsls	r2, r3, #6
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	041b      	lsls	r3, r3, #16
 80038ca:	431a      	orrs	r2, r3
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	061b      	lsls	r3, r3, #24
 80038d0:	431a      	orrs	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	071b      	lsls	r3, r3, #28
 80038d6:	4929      	ldr	r1, [pc, #164]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d028      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80038ea:	4b24      	ldr	r3, [pc, #144]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80038ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f0:	0e1b      	lsrs	r3, r3, #24
 80038f2:	f003 030f 	and.w	r3, r3, #15
 80038f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80038f8:	4b20      	ldr	r3, [pc, #128]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80038fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fe:	0c1b      	lsrs	r3, r3, #16
 8003900:	f003 0303 	and.w	r3, r3, #3
 8003904:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	019a      	lsls	r2, r3, #6
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	041b      	lsls	r3, r3, #16
 8003910:	431a      	orrs	r2, r3
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	061b      	lsls	r3, r3, #24
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	071b      	lsls	r3, r3, #28
 800391e:	4917      	ldr	r1, [pc, #92]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003920:	4313      	orrs	r3, r2
 8003922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003926:	4b15      	ldr	r3, [pc, #84]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003928:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800392c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003934:	4911      	ldr	r1, [pc, #68]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003936:	4313      	orrs	r3, r2
 8003938:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800393c:	4b0f      	ldr	r3, [pc, #60]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a0e      	ldr	r2, [pc, #56]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003946:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003948:	f7fd fe1c 	bl	8001584 <HAL_GetTick>
 800394c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800394e:	e008      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003950:	f7fd fe18 	bl	8001584 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b64      	cmp	r3, #100	; 0x64
 800395c:	d901      	bls.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e007      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003962:	4b06      	ldr	r3, [pc, #24]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800396a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800396e:	d1ef      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3720      	adds	r7, #32
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	40023800 	.word	0x40023800

08003980 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e040      	b.n	8003a14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003996:	2b00      	cmp	r3, #0
 8003998:	d106      	bne.n	80039a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7fd fd28 	bl	80013f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2224      	movs	r2, #36	; 0x24
 80039ac:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f022 0201 	bic.w	r2, r2, #1
 80039bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 fa22 	bl	8003e08 <UART_SetConfig>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d101      	bne.n	80039ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e022      	b.n	8003a14 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d002      	beq.n	80039dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 fcc0 	bl	800435c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689a      	ldr	r2, [r3, #8]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 0201 	orr.w	r2, r2, #1
 8003a0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 fd47 	bl	80044a0 <UART_CheckIdleState>
 8003a12:	4603      	mov	r3, r0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3708      	adds	r7, #8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b08a      	sub	sp, #40	; 0x28
 8003a20:	af02      	add	r7, sp, #8
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	603b      	str	r3, [r7, #0]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a30:	2b20      	cmp	r3, #32
 8003a32:	d17f      	bne.n	8003b34 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d002      	beq.n	8003a40 <HAL_UART_Transmit+0x24>
 8003a3a:	88fb      	ldrh	r3, [r7, #6]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d101      	bne.n	8003a44 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e078      	b.n	8003b36 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d101      	bne.n	8003a52 <HAL_UART_Transmit+0x36>
 8003a4e:	2302      	movs	r3, #2
 8003a50:	e071      	b.n	8003b36 <HAL_UART_Transmit+0x11a>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2221      	movs	r2, #33	; 0x21
 8003a64:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003a66:	f7fd fd8d 	bl	8001584 <HAL_GetTick>
 8003a6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	88fa      	ldrh	r2, [r7, #6]
 8003a70:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	88fa      	ldrh	r2, [r7, #6]
 8003a78:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a84:	d108      	bne.n	8003a98 <HAL_UART_Transmit+0x7c>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d104      	bne.n	8003a98 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	61bb      	str	r3, [r7, #24]
 8003a96:	e003      	b.n	8003aa0 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003aa8:	e02c      	b.n	8003b04 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	2180      	movs	r1, #128	; 0x80
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	f000 fd38 	bl	800452a <UART_WaitOnFlagUntilTimeout>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e038      	b.n	8003b36 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10b      	bne.n	8003ae2 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	881b      	ldrh	r3, [r3, #0]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ad8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	3302      	adds	r3, #2
 8003ade:	61bb      	str	r3, [r7, #24]
 8003ae0:	e007      	b.n	8003af2 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	781a      	ldrb	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	3301      	adds	r3, #1
 8003af0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	3b01      	subs	r3, #1
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1cc      	bne.n	8003aaa <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	2200      	movs	r2, #0
 8003b18:	2140      	movs	r1, #64	; 0x40
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 fd05 	bl	800452a <UART_WaitOnFlagUntilTimeout>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e005      	b.n	8003b36 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003b30:	2300      	movs	r3, #0
 8003b32:	e000      	b.n	8003b36 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8003b34:	2302      	movs	r3, #2
  }
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3720      	adds	r7, #32
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
	...

08003b40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b088      	sub	sp, #32
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003b60:	69fa      	ldr	r2, [r7, #28]
 8003b62:	f640 030f 	movw	r3, #2063	; 0x80f
 8003b66:	4013      	ands	r3, r2
 8003b68:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d113      	bne.n	8003b98 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	f003 0320 	and.w	r3, r3, #32
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00e      	beq.n	8003b98 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	f003 0320 	and.w	r3, r3, #32
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d009      	beq.n	8003b98 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 8114 	beq.w	8003db6 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	4798      	blx	r3
      }
      return;
 8003b96:	e10e      	b.n	8003db6 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f000 80d6 	beq.w	8003d4c <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d105      	bne.n	8003bb6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f000 80cb 	beq.w	8003d4c <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00e      	beq.n	8003bde <HAL_UART_IRQHandler+0x9e>
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d009      	beq.n	8003bde <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bd6:	f043 0201 	orr.w	r2, r3, #1
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00e      	beq.n	8003c06 <HAL_UART_IRQHandler+0xc6>
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d009      	beq.n	8003c06 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bfe:	f043 0204 	orr.w	r2, r3, #4
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00e      	beq.n	8003c2e <HAL_UART_IRQHandler+0xee>
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d009      	beq.n	8003c2e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2204      	movs	r2, #4
 8003c20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c26:	f043 0202 	orr.w	r2, r3, #2
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	f003 0308 	and.w	r3, r3, #8
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d013      	beq.n	8003c60 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	f003 0320 	and.w	r3, r3, #32
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d104      	bne.n	8003c4c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d009      	beq.n	8003c60 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2208      	movs	r2, #8
 8003c52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c58:	f043 0208 	orr.w	r2, r3, #8
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00f      	beq.n	8003c8a <HAL_UART_IRQHandler+0x14a>
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00a      	beq.n	8003c8a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c82:	f043 0220 	orr.w	r2, r3, #32
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f000 8093 	beq.w	8003dba <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	f003 0320 	and.w	r3, r3, #32
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00c      	beq.n	8003cb8 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	f003 0320 	and.w	r3, r3, #32
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d007      	beq.n	8003cb8 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cbc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc8:	2b40      	cmp	r3, #64	; 0x40
 8003cca:	d004      	beq.n	8003cd6 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d031      	beq.n	8003d3a <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 fca2 	bl	8004620 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce6:	2b40      	cmp	r3, #64	; 0x40
 8003ce8:	d123      	bne.n	8003d32 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cf8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d013      	beq.n	8003d2a <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d06:	4a30      	ldr	r2, [pc, #192]	; (8003dc8 <HAL_UART_IRQHandler+0x288>)
 8003d08:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7fd fd77 	bl	8001802 <HAL_DMA_Abort_IT>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d016      	beq.n	8003d48 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003d24:	4610      	mov	r0, r2
 8003d26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d28:	e00e      	b.n	8003d48 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f858 	bl	8003de0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d30:	e00a      	b.n	8003d48 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f854 	bl	8003de0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d38:	e006      	b.n	8003d48 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 f850 	bl	8003de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003d46:	e038      	b.n	8003dba <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d48:	bf00      	nop
    return;
 8003d4a:	e036      	b.n	8003dba <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00d      	beq.n	8003d72 <HAL_UART_IRQHandler+0x232>
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d008      	beq.n	8003d72 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003d68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f842 	bl	8003df4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d70:	e026      	b.n	8003dc0 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00d      	beq.n	8003d98 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d008      	beq.n	8003d98 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d017      	beq.n	8003dbe <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	4798      	blx	r3
    }
    return;
 8003d96:	e012      	b.n	8003dbe <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00e      	beq.n	8003dc0 <HAL_UART_IRQHandler+0x280>
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d009      	beq.n	8003dc0 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 fc6d 	bl	800468c <UART_EndTransmit_IT>
    return;
 8003db2:	bf00      	nop
 8003db4:	e004      	b.n	8003dc0 <HAL_UART_IRQHandler+0x280>
      return;
 8003db6:	bf00      	nop
 8003db8:	e002      	b.n	8003dc0 <HAL_UART_IRQHandler+0x280>
    return;
 8003dba:	bf00      	nop
 8003dbc:	e000      	b.n	8003dc0 <HAL_UART_IRQHandler+0x280>
    return;
 8003dbe:	bf00      	nop
  }

}
 8003dc0:	3720      	adds	r7, #32
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	08004661 	.word	0x08004661

08003dcc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b088      	sub	sp, #32
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e14:	2300      	movs	r3, #0
 8003e16:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	431a      	orrs	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	69db      	ldr	r3, [r3, #28]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	4bb1      	ldr	r3, [pc, #708]	; (80040fc <UART_SetConfig+0x2f4>)
 8003e38:	4013      	ands	r3, r2
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	6812      	ldr	r2, [r2, #0]
 8003e3e:	6939      	ldr	r1, [r7, #16]
 8003e40:	430b      	orrs	r3, r1
 8003e42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a9f      	ldr	r2, [pc, #636]	; (8004100 <UART_SetConfig+0x2f8>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d121      	bne.n	8003ecc <UART_SetConfig+0xc4>
 8003e88:	4b9e      	ldr	r3, [pc, #632]	; (8004104 <UART_SetConfig+0x2fc>)
 8003e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8e:	f003 0303 	and.w	r3, r3, #3
 8003e92:	2b03      	cmp	r3, #3
 8003e94:	d816      	bhi.n	8003ec4 <UART_SetConfig+0xbc>
 8003e96:	a201      	add	r2, pc, #4	; (adr r2, 8003e9c <UART_SetConfig+0x94>)
 8003e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9c:	08003ead 	.word	0x08003ead
 8003ea0:	08003eb9 	.word	0x08003eb9
 8003ea4:	08003eb3 	.word	0x08003eb3
 8003ea8:	08003ebf 	.word	0x08003ebf
 8003eac:	2301      	movs	r3, #1
 8003eae:	77fb      	strb	r3, [r7, #31]
 8003eb0:	e151      	b.n	8004156 <UART_SetConfig+0x34e>
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	77fb      	strb	r3, [r7, #31]
 8003eb6:	e14e      	b.n	8004156 <UART_SetConfig+0x34e>
 8003eb8:	2304      	movs	r3, #4
 8003eba:	77fb      	strb	r3, [r7, #31]
 8003ebc:	e14b      	b.n	8004156 <UART_SetConfig+0x34e>
 8003ebe:	2308      	movs	r3, #8
 8003ec0:	77fb      	strb	r3, [r7, #31]
 8003ec2:	e148      	b.n	8004156 <UART_SetConfig+0x34e>
 8003ec4:	2310      	movs	r3, #16
 8003ec6:	77fb      	strb	r3, [r7, #31]
 8003ec8:	bf00      	nop
 8003eca:	e144      	b.n	8004156 <UART_SetConfig+0x34e>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a8d      	ldr	r2, [pc, #564]	; (8004108 <UART_SetConfig+0x300>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d134      	bne.n	8003f40 <UART_SetConfig+0x138>
 8003ed6:	4b8b      	ldr	r3, [pc, #556]	; (8004104 <UART_SetConfig+0x2fc>)
 8003ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003edc:	f003 030c 	and.w	r3, r3, #12
 8003ee0:	2b0c      	cmp	r3, #12
 8003ee2:	d829      	bhi.n	8003f38 <UART_SetConfig+0x130>
 8003ee4:	a201      	add	r2, pc, #4	; (adr r2, 8003eec <UART_SetConfig+0xe4>)
 8003ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eea:	bf00      	nop
 8003eec:	08003f21 	.word	0x08003f21
 8003ef0:	08003f39 	.word	0x08003f39
 8003ef4:	08003f39 	.word	0x08003f39
 8003ef8:	08003f39 	.word	0x08003f39
 8003efc:	08003f2d 	.word	0x08003f2d
 8003f00:	08003f39 	.word	0x08003f39
 8003f04:	08003f39 	.word	0x08003f39
 8003f08:	08003f39 	.word	0x08003f39
 8003f0c:	08003f27 	.word	0x08003f27
 8003f10:	08003f39 	.word	0x08003f39
 8003f14:	08003f39 	.word	0x08003f39
 8003f18:	08003f39 	.word	0x08003f39
 8003f1c:	08003f33 	.word	0x08003f33
 8003f20:	2300      	movs	r3, #0
 8003f22:	77fb      	strb	r3, [r7, #31]
 8003f24:	e117      	b.n	8004156 <UART_SetConfig+0x34e>
 8003f26:	2302      	movs	r3, #2
 8003f28:	77fb      	strb	r3, [r7, #31]
 8003f2a:	e114      	b.n	8004156 <UART_SetConfig+0x34e>
 8003f2c:	2304      	movs	r3, #4
 8003f2e:	77fb      	strb	r3, [r7, #31]
 8003f30:	e111      	b.n	8004156 <UART_SetConfig+0x34e>
 8003f32:	2308      	movs	r3, #8
 8003f34:	77fb      	strb	r3, [r7, #31]
 8003f36:	e10e      	b.n	8004156 <UART_SetConfig+0x34e>
 8003f38:	2310      	movs	r3, #16
 8003f3a:	77fb      	strb	r3, [r7, #31]
 8003f3c:	bf00      	nop
 8003f3e:	e10a      	b.n	8004156 <UART_SetConfig+0x34e>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a71      	ldr	r2, [pc, #452]	; (800410c <UART_SetConfig+0x304>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d120      	bne.n	8003f8c <UART_SetConfig+0x184>
 8003f4a:	4b6e      	ldr	r3, [pc, #440]	; (8004104 <UART_SetConfig+0x2fc>)
 8003f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f50:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f54:	2b10      	cmp	r3, #16
 8003f56:	d00f      	beq.n	8003f78 <UART_SetConfig+0x170>
 8003f58:	2b10      	cmp	r3, #16
 8003f5a:	d802      	bhi.n	8003f62 <UART_SetConfig+0x15a>
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d005      	beq.n	8003f6c <UART_SetConfig+0x164>
 8003f60:	e010      	b.n	8003f84 <UART_SetConfig+0x17c>
 8003f62:	2b20      	cmp	r3, #32
 8003f64:	d005      	beq.n	8003f72 <UART_SetConfig+0x16a>
 8003f66:	2b30      	cmp	r3, #48	; 0x30
 8003f68:	d009      	beq.n	8003f7e <UART_SetConfig+0x176>
 8003f6a:	e00b      	b.n	8003f84 <UART_SetConfig+0x17c>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	77fb      	strb	r3, [r7, #31]
 8003f70:	e0f1      	b.n	8004156 <UART_SetConfig+0x34e>
 8003f72:	2302      	movs	r3, #2
 8003f74:	77fb      	strb	r3, [r7, #31]
 8003f76:	e0ee      	b.n	8004156 <UART_SetConfig+0x34e>
 8003f78:	2304      	movs	r3, #4
 8003f7a:	77fb      	strb	r3, [r7, #31]
 8003f7c:	e0eb      	b.n	8004156 <UART_SetConfig+0x34e>
 8003f7e:	2308      	movs	r3, #8
 8003f80:	77fb      	strb	r3, [r7, #31]
 8003f82:	e0e8      	b.n	8004156 <UART_SetConfig+0x34e>
 8003f84:	2310      	movs	r3, #16
 8003f86:	77fb      	strb	r3, [r7, #31]
 8003f88:	bf00      	nop
 8003f8a:	e0e4      	b.n	8004156 <UART_SetConfig+0x34e>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a5f      	ldr	r2, [pc, #380]	; (8004110 <UART_SetConfig+0x308>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d120      	bne.n	8003fd8 <UART_SetConfig+0x1d0>
 8003f96:	4b5b      	ldr	r3, [pc, #364]	; (8004104 <UART_SetConfig+0x2fc>)
 8003f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003fa0:	2b40      	cmp	r3, #64	; 0x40
 8003fa2:	d00f      	beq.n	8003fc4 <UART_SetConfig+0x1bc>
 8003fa4:	2b40      	cmp	r3, #64	; 0x40
 8003fa6:	d802      	bhi.n	8003fae <UART_SetConfig+0x1a6>
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d005      	beq.n	8003fb8 <UART_SetConfig+0x1b0>
 8003fac:	e010      	b.n	8003fd0 <UART_SetConfig+0x1c8>
 8003fae:	2b80      	cmp	r3, #128	; 0x80
 8003fb0:	d005      	beq.n	8003fbe <UART_SetConfig+0x1b6>
 8003fb2:	2bc0      	cmp	r3, #192	; 0xc0
 8003fb4:	d009      	beq.n	8003fca <UART_SetConfig+0x1c2>
 8003fb6:	e00b      	b.n	8003fd0 <UART_SetConfig+0x1c8>
 8003fb8:	2300      	movs	r3, #0
 8003fba:	77fb      	strb	r3, [r7, #31]
 8003fbc:	e0cb      	b.n	8004156 <UART_SetConfig+0x34e>
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	77fb      	strb	r3, [r7, #31]
 8003fc2:	e0c8      	b.n	8004156 <UART_SetConfig+0x34e>
 8003fc4:	2304      	movs	r3, #4
 8003fc6:	77fb      	strb	r3, [r7, #31]
 8003fc8:	e0c5      	b.n	8004156 <UART_SetConfig+0x34e>
 8003fca:	2308      	movs	r3, #8
 8003fcc:	77fb      	strb	r3, [r7, #31]
 8003fce:	e0c2      	b.n	8004156 <UART_SetConfig+0x34e>
 8003fd0:	2310      	movs	r3, #16
 8003fd2:	77fb      	strb	r3, [r7, #31]
 8003fd4:	bf00      	nop
 8003fd6:	e0be      	b.n	8004156 <UART_SetConfig+0x34e>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a4d      	ldr	r2, [pc, #308]	; (8004114 <UART_SetConfig+0x30c>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d124      	bne.n	800402c <UART_SetConfig+0x224>
 8003fe2:	4b48      	ldr	r3, [pc, #288]	; (8004104 <UART_SetConfig+0x2fc>)
 8003fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ff0:	d012      	beq.n	8004018 <UART_SetConfig+0x210>
 8003ff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ff6:	d802      	bhi.n	8003ffe <UART_SetConfig+0x1f6>
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d007      	beq.n	800400c <UART_SetConfig+0x204>
 8003ffc:	e012      	b.n	8004024 <UART_SetConfig+0x21c>
 8003ffe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004002:	d006      	beq.n	8004012 <UART_SetConfig+0x20a>
 8004004:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004008:	d009      	beq.n	800401e <UART_SetConfig+0x216>
 800400a:	e00b      	b.n	8004024 <UART_SetConfig+0x21c>
 800400c:	2300      	movs	r3, #0
 800400e:	77fb      	strb	r3, [r7, #31]
 8004010:	e0a1      	b.n	8004156 <UART_SetConfig+0x34e>
 8004012:	2302      	movs	r3, #2
 8004014:	77fb      	strb	r3, [r7, #31]
 8004016:	e09e      	b.n	8004156 <UART_SetConfig+0x34e>
 8004018:	2304      	movs	r3, #4
 800401a:	77fb      	strb	r3, [r7, #31]
 800401c:	e09b      	b.n	8004156 <UART_SetConfig+0x34e>
 800401e:	2308      	movs	r3, #8
 8004020:	77fb      	strb	r3, [r7, #31]
 8004022:	e098      	b.n	8004156 <UART_SetConfig+0x34e>
 8004024:	2310      	movs	r3, #16
 8004026:	77fb      	strb	r3, [r7, #31]
 8004028:	bf00      	nop
 800402a:	e094      	b.n	8004156 <UART_SetConfig+0x34e>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a39      	ldr	r2, [pc, #228]	; (8004118 <UART_SetConfig+0x310>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d124      	bne.n	8004080 <UART_SetConfig+0x278>
 8004036:	4b33      	ldr	r3, [pc, #204]	; (8004104 <UART_SetConfig+0x2fc>)
 8004038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004040:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004044:	d012      	beq.n	800406c <UART_SetConfig+0x264>
 8004046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800404a:	d802      	bhi.n	8004052 <UART_SetConfig+0x24a>
 800404c:	2b00      	cmp	r3, #0
 800404e:	d007      	beq.n	8004060 <UART_SetConfig+0x258>
 8004050:	e012      	b.n	8004078 <UART_SetConfig+0x270>
 8004052:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004056:	d006      	beq.n	8004066 <UART_SetConfig+0x25e>
 8004058:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800405c:	d009      	beq.n	8004072 <UART_SetConfig+0x26a>
 800405e:	e00b      	b.n	8004078 <UART_SetConfig+0x270>
 8004060:	2301      	movs	r3, #1
 8004062:	77fb      	strb	r3, [r7, #31]
 8004064:	e077      	b.n	8004156 <UART_SetConfig+0x34e>
 8004066:	2302      	movs	r3, #2
 8004068:	77fb      	strb	r3, [r7, #31]
 800406a:	e074      	b.n	8004156 <UART_SetConfig+0x34e>
 800406c:	2304      	movs	r3, #4
 800406e:	77fb      	strb	r3, [r7, #31]
 8004070:	e071      	b.n	8004156 <UART_SetConfig+0x34e>
 8004072:	2308      	movs	r3, #8
 8004074:	77fb      	strb	r3, [r7, #31]
 8004076:	e06e      	b.n	8004156 <UART_SetConfig+0x34e>
 8004078:	2310      	movs	r3, #16
 800407a:	77fb      	strb	r3, [r7, #31]
 800407c:	bf00      	nop
 800407e:	e06a      	b.n	8004156 <UART_SetConfig+0x34e>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a25      	ldr	r2, [pc, #148]	; (800411c <UART_SetConfig+0x314>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d124      	bne.n	80040d4 <UART_SetConfig+0x2cc>
 800408a:	4b1e      	ldr	r3, [pc, #120]	; (8004104 <UART_SetConfig+0x2fc>)
 800408c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004090:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004094:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004098:	d012      	beq.n	80040c0 <UART_SetConfig+0x2b8>
 800409a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800409e:	d802      	bhi.n	80040a6 <UART_SetConfig+0x29e>
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d007      	beq.n	80040b4 <UART_SetConfig+0x2ac>
 80040a4:	e012      	b.n	80040cc <UART_SetConfig+0x2c4>
 80040a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040aa:	d006      	beq.n	80040ba <UART_SetConfig+0x2b2>
 80040ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040b0:	d009      	beq.n	80040c6 <UART_SetConfig+0x2be>
 80040b2:	e00b      	b.n	80040cc <UART_SetConfig+0x2c4>
 80040b4:	2300      	movs	r3, #0
 80040b6:	77fb      	strb	r3, [r7, #31]
 80040b8:	e04d      	b.n	8004156 <UART_SetConfig+0x34e>
 80040ba:	2302      	movs	r3, #2
 80040bc:	77fb      	strb	r3, [r7, #31]
 80040be:	e04a      	b.n	8004156 <UART_SetConfig+0x34e>
 80040c0:	2304      	movs	r3, #4
 80040c2:	77fb      	strb	r3, [r7, #31]
 80040c4:	e047      	b.n	8004156 <UART_SetConfig+0x34e>
 80040c6:	2308      	movs	r3, #8
 80040c8:	77fb      	strb	r3, [r7, #31]
 80040ca:	e044      	b.n	8004156 <UART_SetConfig+0x34e>
 80040cc:	2310      	movs	r3, #16
 80040ce:	77fb      	strb	r3, [r7, #31]
 80040d0:	bf00      	nop
 80040d2:	e040      	b.n	8004156 <UART_SetConfig+0x34e>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a11      	ldr	r2, [pc, #68]	; (8004120 <UART_SetConfig+0x318>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d139      	bne.n	8004152 <UART_SetConfig+0x34a>
 80040de:	4b09      	ldr	r3, [pc, #36]	; (8004104 <UART_SetConfig+0x2fc>)
 80040e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80040e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040ec:	d027      	beq.n	800413e <UART_SetConfig+0x336>
 80040ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040f2:	d817      	bhi.n	8004124 <UART_SetConfig+0x31c>
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d01c      	beq.n	8004132 <UART_SetConfig+0x32a>
 80040f8:	e027      	b.n	800414a <UART_SetConfig+0x342>
 80040fa:	bf00      	nop
 80040fc:	efff69f3 	.word	0xefff69f3
 8004100:	40011000 	.word	0x40011000
 8004104:	40023800 	.word	0x40023800
 8004108:	40004400 	.word	0x40004400
 800410c:	40004800 	.word	0x40004800
 8004110:	40004c00 	.word	0x40004c00
 8004114:	40005000 	.word	0x40005000
 8004118:	40011400 	.word	0x40011400
 800411c:	40007800 	.word	0x40007800
 8004120:	40007c00 	.word	0x40007c00
 8004124:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004128:	d006      	beq.n	8004138 <UART_SetConfig+0x330>
 800412a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800412e:	d009      	beq.n	8004144 <UART_SetConfig+0x33c>
 8004130:	e00b      	b.n	800414a <UART_SetConfig+0x342>
 8004132:	2300      	movs	r3, #0
 8004134:	77fb      	strb	r3, [r7, #31]
 8004136:	e00e      	b.n	8004156 <UART_SetConfig+0x34e>
 8004138:	2302      	movs	r3, #2
 800413a:	77fb      	strb	r3, [r7, #31]
 800413c:	e00b      	b.n	8004156 <UART_SetConfig+0x34e>
 800413e:	2304      	movs	r3, #4
 8004140:	77fb      	strb	r3, [r7, #31]
 8004142:	e008      	b.n	8004156 <UART_SetConfig+0x34e>
 8004144:	2308      	movs	r3, #8
 8004146:	77fb      	strb	r3, [r7, #31]
 8004148:	e005      	b.n	8004156 <UART_SetConfig+0x34e>
 800414a:	2310      	movs	r3, #16
 800414c:	77fb      	strb	r3, [r7, #31]
 800414e:	bf00      	nop
 8004150:	e001      	b.n	8004156 <UART_SetConfig+0x34e>
 8004152:	2310      	movs	r3, #16
 8004154:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800415e:	d17f      	bne.n	8004260 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8004160:	7ffb      	ldrb	r3, [r7, #31]
 8004162:	2b08      	cmp	r3, #8
 8004164:	d85c      	bhi.n	8004220 <UART_SetConfig+0x418>
 8004166:	a201      	add	r2, pc, #4	; (adr r2, 800416c <UART_SetConfig+0x364>)
 8004168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416c:	08004191 	.word	0x08004191
 8004170:	080041b1 	.word	0x080041b1
 8004174:	080041d1 	.word	0x080041d1
 8004178:	08004221 	.word	0x08004221
 800417c:	080041e9 	.word	0x080041e9
 8004180:	08004221 	.word	0x08004221
 8004184:	08004221 	.word	0x08004221
 8004188:	08004221 	.word	0x08004221
 800418c:	08004209 	.word	0x08004209
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004190:	f7fe ffa8 	bl	80030e4 <HAL_RCC_GetPCLK1Freq>
 8004194:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	005a      	lsls	r2, r3, #1
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	085b      	lsrs	r3, r3, #1
 80041a0:	441a      	add	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	61bb      	str	r3, [r7, #24]
        break;
 80041ae:	e03a      	b.n	8004226 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041b0:	f7fe ffac 	bl	800310c <HAL_RCC_GetPCLK2Freq>
 80041b4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	005a      	lsls	r2, r3, #1
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	085b      	lsrs	r3, r3, #1
 80041c0:	441a      	add	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	61bb      	str	r3, [r7, #24]
        break;
 80041ce:	e02a      	b.n	8004226 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	085a      	lsrs	r2, r3, #1
 80041d6:	4b5f      	ldr	r3, [pc, #380]	; (8004354 <UART_SetConfig+0x54c>)
 80041d8:	4413      	add	r3, r2
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6852      	ldr	r2, [r2, #4]
 80041de:	fbb3 f3f2 	udiv	r3, r3, r2
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	61bb      	str	r3, [r7, #24]
        break;
 80041e6:	e01e      	b.n	8004226 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041e8:	f7fe febe 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 80041ec:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	005a      	lsls	r2, r3, #1
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	085b      	lsrs	r3, r3, #1
 80041f8:	441a      	add	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004202:	b29b      	uxth	r3, r3
 8004204:	61bb      	str	r3, [r7, #24]
        break;
 8004206:	e00e      	b.n	8004226 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	085b      	lsrs	r3, r3, #1
 800420e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	fbb2 f3f3 	udiv	r3, r2, r3
 800421a:	b29b      	uxth	r3, r3
 800421c:	61bb      	str	r3, [r7, #24]
        break;
 800421e:	e002      	b.n	8004226 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	75fb      	strb	r3, [r7, #23]
        break;
 8004224:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	2b0f      	cmp	r3, #15
 800422a:	d916      	bls.n	800425a <UART_SetConfig+0x452>
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004232:	d212      	bcs.n	800425a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	b29b      	uxth	r3, r3
 8004238:	f023 030f 	bic.w	r3, r3, #15
 800423c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	085b      	lsrs	r3, r3, #1
 8004242:	b29b      	uxth	r3, r3
 8004244:	f003 0307 	and.w	r3, r3, #7
 8004248:	b29a      	uxth	r2, r3
 800424a:	897b      	ldrh	r3, [r7, #10]
 800424c:	4313      	orrs	r3, r2
 800424e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	897a      	ldrh	r2, [r7, #10]
 8004256:	60da      	str	r2, [r3, #12]
 8004258:	e070      	b.n	800433c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	75fb      	strb	r3, [r7, #23]
 800425e:	e06d      	b.n	800433c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8004260:	7ffb      	ldrb	r3, [r7, #31]
 8004262:	2b08      	cmp	r3, #8
 8004264:	d859      	bhi.n	800431a <UART_SetConfig+0x512>
 8004266:	a201      	add	r2, pc, #4	; (adr r2, 800426c <UART_SetConfig+0x464>)
 8004268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426c:	08004291 	.word	0x08004291
 8004270:	080042af 	.word	0x080042af
 8004274:	080042cd 	.word	0x080042cd
 8004278:	0800431b 	.word	0x0800431b
 800427c:	080042e5 	.word	0x080042e5
 8004280:	0800431b 	.word	0x0800431b
 8004284:	0800431b 	.word	0x0800431b
 8004288:	0800431b 	.word	0x0800431b
 800428c:	08004303 	.word	0x08004303
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004290:	f7fe ff28 	bl	80030e4 <HAL_RCC_GetPCLK1Freq>
 8004294:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	085a      	lsrs	r2, r3, #1
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	441a      	add	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	61bb      	str	r3, [r7, #24]
        break;
 80042ac:	e038      	b.n	8004320 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042ae:	f7fe ff2d 	bl	800310c <HAL_RCC_GetPCLK2Freq>
 80042b2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	085a      	lsrs	r2, r3, #1
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	441a      	add	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	61bb      	str	r3, [r7, #24]
        break;
 80042ca:	e029      	b.n	8004320 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	085a      	lsrs	r2, r3, #1
 80042d2:	4b21      	ldr	r3, [pc, #132]	; (8004358 <UART_SetConfig+0x550>)
 80042d4:	4413      	add	r3, r2
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	6852      	ldr	r2, [r2, #4]
 80042da:	fbb3 f3f2 	udiv	r3, r3, r2
 80042de:	b29b      	uxth	r3, r3
 80042e0:	61bb      	str	r3, [r7, #24]
        break;
 80042e2:	e01d      	b.n	8004320 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042e4:	f7fe fe40 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 80042e8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	085a      	lsrs	r2, r3, #1
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	441a      	add	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	61bb      	str	r3, [r7, #24]
        break;
 8004300:	e00e      	b.n	8004320 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	085b      	lsrs	r3, r3, #1
 8004308:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	fbb2 f3f3 	udiv	r3, r2, r3
 8004314:	b29b      	uxth	r3, r3
 8004316:	61bb      	str	r3, [r7, #24]
        break;
 8004318:	e002      	b.n	8004320 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	75fb      	strb	r3, [r7, #23]
        break;
 800431e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	2b0f      	cmp	r3, #15
 8004324:	d908      	bls.n	8004338 <UART_SetConfig+0x530>
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800432c:	d204      	bcs.n	8004338 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	69ba      	ldr	r2, [r7, #24]
 8004334:	60da      	str	r2, [r3, #12]
 8004336:	e001      	b.n	800433c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004348:	7dfb      	ldrb	r3, [r7, #23]
}
 800434a:	4618      	mov	r0, r3
 800434c:	3720      	adds	r7, #32
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	01e84800 	.word	0x01e84800
 8004358:	00f42400 	.word	0x00f42400

0800435c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00a      	beq.n	8004386 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00a      	beq.n	80043ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	f003 0308 	and.w	r3, r3, #8
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f0:	f003 0310 	and.w	r3, r3, #16
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00a      	beq.n	800440e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004412:	f003 0320 	and.w	r3, r3, #32
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004438:	2b00      	cmp	r3, #0
 800443a:	d01a      	beq.n	8004472 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800445a:	d10a      	bne.n	8004472 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	605a      	str	r2, [r3, #4]
  }
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af02      	add	r7, sp, #8
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80044ae:	f7fd f869 	bl	8001584 <HAL_GetTick>
 80044b2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0308 	and.w	r3, r3, #8
 80044be:	2b08      	cmp	r3, #8
 80044c0:	d10e      	bne.n	80044e0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 f82a 	bl	800452a <UART_WaitOnFlagUntilTimeout>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e020      	b.n	8004522 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0304 	and.w	r3, r3, #4
 80044ea:	2b04      	cmp	r3, #4
 80044ec:	d10e      	bne.n	800450c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 f814 	bl	800452a <UART_WaitOnFlagUntilTimeout>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d001      	beq.n	800450c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e00a      	b.n	8004522 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2220      	movs	r2, #32
 8004510:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2220      	movs	r2, #32
 8004516:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b084      	sub	sp, #16
 800452e:	af00      	add	r7, sp, #0
 8004530:	60f8      	str	r0, [r7, #12]
 8004532:	60b9      	str	r1, [r7, #8]
 8004534:	603b      	str	r3, [r7, #0]
 8004536:	4613      	mov	r3, r2
 8004538:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800453a:	e05d      	b.n	80045f8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004542:	d059      	beq.n	80045f8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004544:	f7fd f81e 	bl	8001584 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	429a      	cmp	r2, r3
 8004552:	d302      	bcc.n	800455a <UART_WaitOnFlagUntilTimeout+0x30>
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d11b      	bne.n	8004592 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004568:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	689a      	ldr	r2, [r3, #8]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 0201 	bic.w	r2, r2, #1
 8004578:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2220      	movs	r2, #32
 800457e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2220      	movs	r2, #32
 8004584:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e042      	b.n	8004618 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	2b00      	cmp	r3, #0
 800459e:	d02b      	beq.n	80045f8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045ae:	d123      	bne.n	80045f8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045b8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80045c8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 0201 	bic.w	r2, r2, #1
 80045d8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2220      	movs	r2, #32
 80045de:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2220      	movs	r2, #32
 80045e4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2220      	movs	r2, #32
 80045ea:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e00f      	b.n	8004618 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	69da      	ldr	r2, [r3, #28]
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	4013      	ands	r3, r2
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	429a      	cmp	r2, r3
 8004606:	bf0c      	ite	eq
 8004608:	2301      	moveq	r3, #1
 800460a:	2300      	movne	r3, #0
 800460c:	b2db      	uxtb	r3, r3
 800460e:	461a      	mov	r2, r3
 8004610:	79fb      	ldrb	r3, [r7, #7]
 8004612:	429a      	cmp	r2, r3
 8004614:	d092      	beq.n	800453c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004636:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689a      	ldr	r2, [r3, #8]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0201 	bic.w	r2, r2, #1
 8004646:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2220      	movs	r2, #32
 800464c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f7ff fbae 	bl	8003de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004684:	bf00      	nop
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046a2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2220      	movs	r2, #32
 80046a8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f7ff fb8b 	bl	8003dcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046b6:	bf00      	nop
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
	...

080046c0 <__errno>:
 80046c0:	4b01      	ldr	r3, [pc, #4]	; (80046c8 <__errno+0x8>)
 80046c2:	6818      	ldr	r0, [r3, #0]
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	2000000c 	.word	0x2000000c

080046cc <__libc_init_array>:
 80046cc:	b570      	push	{r4, r5, r6, lr}
 80046ce:	4e0d      	ldr	r6, [pc, #52]	; (8004704 <__libc_init_array+0x38>)
 80046d0:	4c0d      	ldr	r4, [pc, #52]	; (8004708 <__libc_init_array+0x3c>)
 80046d2:	1ba4      	subs	r4, r4, r6
 80046d4:	10a4      	asrs	r4, r4, #2
 80046d6:	2500      	movs	r5, #0
 80046d8:	42a5      	cmp	r5, r4
 80046da:	d109      	bne.n	80046f0 <__libc_init_array+0x24>
 80046dc:	4e0b      	ldr	r6, [pc, #44]	; (800470c <__libc_init_array+0x40>)
 80046de:	4c0c      	ldr	r4, [pc, #48]	; (8004710 <__libc_init_array+0x44>)
 80046e0:	f000 fc98 	bl	8005014 <_init>
 80046e4:	1ba4      	subs	r4, r4, r6
 80046e6:	10a4      	asrs	r4, r4, #2
 80046e8:	2500      	movs	r5, #0
 80046ea:	42a5      	cmp	r5, r4
 80046ec:	d105      	bne.n	80046fa <__libc_init_array+0x2e>
 80046ee:	bd70      	pop	{r4, r5, r6, pc}
 80046f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046f4:	4798      	blx	r3
 80046f6:	3501      	adds	r5, #1
 80046f8:	e7ee      	b.n	80046d8 <__libc_init_array+0xc>
 80046fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046fe:	4798      	blx	r3
 8004700:	3501      	adds	r5, #1
 8004702:	e7f2      	b.n	80046ea <__libc_init_array+0x1e>
 8004704:	08005104 	.word	0x08005104
 8004708:	08005104 	.word	0x08005104
 800470c:	08005104 	.word	0x08005104
 8004710:	08005108 	.word	0x08005108

08004714 <memcmp>:
 8004714:	b530      	push	{r4, r5, lr}
 8004716:	2400      	movs	r4, #0
 8004718:	42a2      	cmp	r2, r4
 800471a:	d101      	bne.n	8004720 <memcmp+0xc>
 800471c:	2000      	movs	r0, #0
 800471e:	e007      	b.n	8004730 <memcmp+0x1c>
 8004720:	5d03      	ldrb	r3, [r0, r4]
 8004722:	3401      	adds	r4, #1
 8004724:	190d      	adds	r5, r1, r4
 8004726:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800472a:	42ab      	cmp	r3, r5
 800472c:	d0f4      	beq.n	8004718 <memcmp+0x4>
 800472e:	1b58      	subs	r0, r3, r5
 8004730:	bd30      	pop	{r4, r5, pc}

08004732 <memset>:
 8004732:	4402      	add	r2, r0
 8004734:	4603      	mov	r3, r0
 8004736:	4293      	cmp	r3, r2
 8004738:	d100      	bne.n	800473c <memset+0xa>
 800473a:	4770      	bx	lr
 800473c:	f803 1b01 	strb.w	r1, [r3], #1
 8004740:	e7f9      	b.n	8004736 <memset+0x4>
	...

08004744 <_puts_r>:
 8004744:	b570      	push	{r4, r5, r6, lr}
 8004746:	460e      	mov	r6, r1
 8004748:	4605      	mov	r5, r0
 800474a:	b118      	cbz	r0, 8004754 <_puts_r+0x10>
 800474c:	6983      	ldr	r3, [r0, #24]
 800474e:	b90b      	cbnz	r3, 8004754 <_puts_r+0x10>
 8004750:	f000 fa0c 	bl	8004b6c <__sinit>
 8004754:	69ab      	ldr	r3, [r5, #24]
 8004756:	68ac      	ldr	r4, [r5, #8]
 8004758:	b913      	cbnz	r3, 8004760 <_puts_r+0x1c>
 800475a:	4628      	mov	r0, r5
 800475c:	f000 fa06 	bl	8004b6c <__sinit>
 8004760:	4b23      	ldr	r3, [pc, #140]	; (80047f0 <_puts_r+0xac>)
 8004762:	429c      	cmp	r4, r3
 8004764:	d117      	bne.n	8004796 <_puts_r+0x52>
 8004766:	686c      	ldr	r4, [r5, #4]
 8004768:	89a3      	ldrh	r3, [r4, #12]
 800476a:	071b      	lsls	r3, r3, #28
 800476c:	d51d      	bpl.n	80047aa <_puts_r+0x66>
 800476e:	6923      	ldr	r3, [r4, #16]
 8004770:	b1db      	cbz	r3, 80047aa <_puts_r+0x66>
 8004772:	3e01      	subs	r6, #1
 8004774:	68a3      	ldr	r3, [r4, #8]
 8004776:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800477a:	3b01      	subs	r3, #1
 800477c:	60a3      	str	r3, [r4, #8]
 800477e:	b9e9      	cbnz	r1, 80047bc <_puts_r+0x78>
 8004780:	2b00      	cmp	r3, #0
 8004782:	da2e      	bge.n	80047e2 <_puts_r+0x9e>
 8004784:	4622      	mov	r2, r4
 8004786:	210a      	movs	r1, #10
 8004788:	4628      	mov	r0, r5
 800478a:	f000 f83f 	bl	800480c <__swbuf_r>
 800478e:	3001      	adds	r0, #1
 8004790:	d011      	beq.n	80047b6 <_puts_r+0x72>
 8004792:	200a      	movs	r0, #10
 8004794:	e011      	b.n	80047ba <_puts_r+0x76>
 8004796:	4b17      	ldr	r3, [pc, #92]	; (80047f4 <_puts_r+0xb0>)
 8004798:	429c      	cmp	r4, r3
 800479a:	d101      	bne.n	80047a0 <_puts_r+0x5c>
 800479c:	68ac      	ldr	r4, [r5, #8]
 800479e:	e7e3      	b.n	8004768 <_puts_r+0x24>
 80047a0:	4b15      	ldr	r3, [pc, #84]	; (80047f8 <_puts_r+0xb4>)
 80047a2:	429c      	cmp	r4, r3
 80047a4:	bf08      	it	eq
 80047a6:	68ec      	ldreq	r4, [r5, #12]
 80047a8:	e7de      	b.n	8004768 <_puts_r+0x24>
 80047aa:	4621      	mov	r1, r4
 80047ac:	4628      	mov	r0, r5
 80047ae:	f000 f87f 	bl	80048b0 <__swsetup_r>
 80047b2:	2800      	cmp	r0, #0
 80047b4:	d0dd      	beq.n	8004772 <_puts_r+0x2e>
 80047b6:	f04f 30ff 	mov.w	r0, #4294967295
 80047ba:	bd70      	pop	{r4, r5, r6, pc}
 80047bc:	2b00      	cmp	r3, #0
 80047be:	da04      	bge.n	80047ca <_puts_r+0x86>
 80047c0:	69a2      	ldr	r2, [r4, #24]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	dc06      	bgt.n	80047d4 <_puts_r+0x90>
 80047c6:	290a      	cmp	r1, #10
 80047c8:	d004      	beq.n	80047d4 <_puts_r+0x90>
 80047ca:	6823      	ldr	r3, [r4, #0]
 80047cc:	1c5a      	adds	r2, r3, #1
 80047ce:	6022      	str	r2, [r4, #0]
 80047d0:	7019      	strb	r1, [r3, #0]
 80047d2:	e7cf      	b.n	8004774 <_puts_r+0x30>
 80047d4:	4622      	mov	r2, r4
 80047d6:	4628      	mov	r0, r5
 80047d8:	f000 f818 	bl	800480c <__swbuf_r>
 80047dc:	3001      	adds	r0, #1
 80047de:	d1c9      	bne.n	8004774 <_puts_r+0x30>
 80047e0:	e7e9      	b.n	80047b6 <_puts_r+0x72>
 80047e2:	6823      	ldr	r3, [r4, #0]
 80047e4:	200a      	movs	r0, #10
 80047e6:	1c5a      	adds	r2, r3, #1
 80047e8:	6022      	str	r2, [r4, #0]
 80047ea:	7018      	strb	r0, [r3, #0]
 80047ec:	e7e5      	b.n	80047ba <_puts_r+0x76>
 80047ee:	bf00      	nop
 80047f0:	080050bc 	.word	0x080050bc
 80047f4:	080050dc 	.word	0x080050dc
 80047f8:	0800509c 	.word	0x0800509c

080047fc <puts>:
 80047fc:	4b02      	ldr	r3, [pc, #8]	; (8004808 <puts+0xc>)
 80047fe:	4601      	mov	r1, r0
 8004800:	6818      	ldr	r0, [r3, #0]
 8004802:	f7ff bf9f 	b.w	8004744 <_puts_r>
 8004806:	bf00      	nop
 8004808:	2000000c 	.word	0x2000000c

0800480c <__swbuf_r>:
 800480c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800480e:	460e      	mov	r6, r1
 8004810:	4614      	mov	r4, r2
 8004812:	4605      	mov	r5, r0
 8004814:	b118      	cbz	r0, 800481e <__swbuf_r+0x12>
 8004816:	6983      	ldr	r3, [r0, #24]
 8004818:	b90b      	cbnz	r3, 800481e <__swbuf_r+0x12>
 800481a:	f000 f9a7 	bl	8004b6c <__sinit>
 800481e:	4b21      	ldr	r3, [pc, #132]	; (80048a4 <__swbuf_r+0x98>)
 8004820:	429c      	cmp	r4, r3
 8004822:	d12a      	bne.n	800487a <__swbuf_r+0x6e>
 8004824:	686c      	ldr	r4, [r5, #4]
 8004826:	69a3      	ldr	r3, [r4, #24]
 8004828:	60a3      	str	r3, [r4, #8]
 800482a:	89a3      	ldrh	r3, [r4, #12]
 800482c:	071a      	lsls	r2, r3, #28
 800482e:	d52e      	bpl.n	800488e <__swbuf_r+0x82>
 8004830:	6923      	ldr	r3, [r4, #16]
 8004832:	b363      	cbz	r3, 800488e <__swbuf_r+0x82>
 8004834:	6923      	ldr	r3, [r4, #16]
 8004836:	6820      	ldr	r0, [r4, #0]
 8004838:	1ac0      	subs	r0, r0, r3
 800483a:	6963      	ldr	r3, [r4, #20]
 800483c:	b2f6      	uxtb	r6, r6
 800483e:	4283      	cmp	r3, r0
 8004840:	4637      	mov	r7, r6
 8004842:	dc04      	bgt.n	800484e <__swbuf_r+0x42>
 8004844:	4621      	mov	r1, r4
 8004846:	4628      	mov	r0, r5
 8004848:	f000 f926 	bl	8004a98 <_fflush_r>
 800484c:	bb28      	cbnz	r0, 800489a <__swbuf_r+0x8e>
 800484e:	68a3      	ldr	r3, [r4, #8]
 8004850:	3b01      	subs	r3, #1
 8004852:	60a3      	str	r3, [r4, #8]
 8004854:	6823      	ldr	r3, [r4, #0]
 8004856:	1c5a      	adds	r2, r3, #1
 8004858:	6022      	str	r2, [r4, #0]
 800485a:	701e      	strb	r6, [r3, #0]
 800485c:	6963      	ldr	r3, [r4, #20]
 800485e:	3001      	adds	r0, #1
 8004860:	4283      	cmp	r3, r0
 8004862:	d004      	beq.n	800486e <__swbuf_r+0x62>
 8004864:	89a3      	ldrh	r3, [r4, #12]
 8004866:	07db      	lsls	r3, r3, #31
 8004868:	d519      	bpl.n	800489e <__swbuf_r+0x92>
 800486a:	2e0a      	cmp	r6, #10
 800486c:	d117      	bne.n	800489e <__swbuf_r+0x92>
 800486e:	4621      	mov	r1, r4
 8004870:	4628      	mov	r0, r5
 8004872:	f000 f911 	bl	8004a98 <_fflush_r>
 8004876:	b190      	cbz	r0, 800489e <__swbuf_r+0x92>
 8004878:	e00f      	b.n	800489a <__swbuf_r+0x8e>
 800487a:	4b0b      	ldr	r3, [pc, #44]	; (80048a8 <__swbuf_r+0x9c>)
 800487c:	429c      	cmp	r4, r3
 800487e:	d101      	bne.n	8004884 <__swbuf_r+0x78>
 8004880:	68ac      	ldr	r4, [r5, #8]
 8004882:	e7d0      	b.n	8004826 <__swbuf_r+0x1a>
 8004884:	4b09      	ldr	r3, [pc, #36]	; (80048ac <__swbuf_r+0xa0>)
 8004886:	429c      	cmp	r4, r3
 8004888:	bf08      	it	eq
 800488a:	68ec      	ldreq	r4, [r5, #12]
 800488c:	e7cb      	b.n	8004826 <__swbuf_r+0x1a>
 800488e:	4621      	mov	r1, r4
 8004890:	4628      	mov	r0, r5
 8004892:	f000 f80d 	bl	80048b0 <__swsetup_r>
 8004896:	2800      	cmp	r0, #0
 8004898:	d0cc      	beq.n	8004834 <__swbuf_r+0x28>
 800489a:	f04f 37ff 	mov.w	r7, #4294967295
 800489e:	4638      	mov	r0, r7
 80048a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048a2:	bf00      	nop
 80048a4:	080050bc 	.word	0x080050bc
 80048a8:	080050dc 	.word	0x080050dc
 80048ac:	0800509c 	.word	0x0800509c

080048b0 <__swsetup_r>:
 80048b0:	4b32      	ldr	r3, [pc, #200]	; (800497c <__swsetup_r+0xcc>)
 80048b2:	b570      	push	{r4, r5, r6, lr}
 80048b4:	681d      	ldr	r5, [r3, #0]
 80048b6:	4606      	mov	r6, r0
 80048b8:	460c      	mov	r4, r1
 80048ba:	b125      	cbz	r5, 80048c6 <__swsetup_r+0x16>
 80048bc:	69ab      	ldr	r3, [r5, #24]
 80048be:	b913      	cbnz	r3, 80048c6 <__swsetup_r+0x16>
 80048c0:	4628      	mov	r0, r5
 80048c2:	f000 f953 	bl	8004b6c <__sinit>
 80048c6:	4b2e      	ldr	r3, [pc, #184]	; (8004980 <__swsetup_r+0xd0>)
 80048c8:	429c      	cmp	r4, r3
 80048ca:	d10f      	bne.n	80048ec <__swsetup_r+0x3c>
 80048cc:	686c      	ldr	r4, [r5, #4]
 80048ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	0715      	lsls	r5, r2, #28
 80048d6:	d42c      	bmi.n	8004932 <__swsetup_r+0x82>
 80048d8:	06d0      	lsls	r0, r2, #27
 80048da:	d411      	bmi.n	8004900 <__swsetup_r+0x50>
 80048dc:	2209      	movs	r2, #9
 80048de:	6032      	str	r2, [r6, #0]
 80048e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048e4:	81a3      	strh	r3, [r4, #12]
 80048e6:	f04f 30ff 	mov.w	r0, #4294967295
 80048ea:	e03e      	b.n	800496a <__swsetup_r+0xba>
 80048ec:	4b25      	ldr	r3, [pc, #148]	; (8004984 <__swsetup_r+0xd4>)
 80048ee:	429c      	cmp	r4, r3
 80048f0:	d101      	bne.n	80048f6 <__swsetup_r+0x46>
 80048f2:	68ac      	ldr	r4, [r5, #8]
 80048f4:	e7eb      	b.n	80048ce <__swsetup_r+0x1e>
 80048f6:	4b24      	ldr	r3, [pc, #144]	; (8004988 <__swsetup_r+0xd8>)
 80048f8:	429c      	cmp	r4, r3
 80048fa:	bf08      	it	eq
 80048fc:	68ec      	ldreq	r4, [r5, #12]
 80048fe:	e7e6      	b.n	80048ce <__swsetup_r+0x1e>
 8004900:	0751      	lsls	r1, r2, #29
 8004902:	d512      	bpl.n	800492a <__swsetup_r+0x7a>
 8004904:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004906:	b141      	cbz	r1, 800491a <__swsetup_r+0x6a>
 8004908:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800490c:	4299      	cmp	r1, r3
 800490e:	d002      	beq.n	8004916 <__swsetup_r+0x66>
 8004910:	4630      	mov	r0, r6
 8004912:	f000 fa19 	bl	8004d48 <_free_r>
 8004916:	2300      	movs	r3, #0
 8004918:	6363      	str	r3, [r4, #52]	; 0x34
 800491a:	89a3      	ldrh	r3, [r4, #12]
 800491c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004920:	81a3      	strh	r3, [r4, #12]
 8004922:	2300      	movs	r3, #0
 8004924:	6063      	str	r3, [r4, #4]
 8004926:	6923      	ldr	r3, [r4, #16]
 8004928:	6023      	str	r3, [r4, #0]
 800492a:	89a3      	ldrh	r3, [r4, #12]
 800492c:	f043 0308 	orr.w	r3, r3, #8
 8004930:	81a3      	strh	r3, [r4, #12]
 8004932:	6923      	ldr	r3, [r4, #16]
 8004934:	b94b      	cbnz	r3, 800494a <__swsetup_r+0x9a>
 8004936:	89a3      	ldrh	r3, [r4, #12]
 8004938:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800493c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004940:	d003      	beq.n	800494a <__swsetup_r+0x9a>
 8004942:	4621      	mov	r1, r4
 8004944:	4630      	mov	r0, r6
 8004946:	f000 f9bf 	bl	8004cc8 <__smakebuf_r>
 800494a:	89a2      	ldrh	r2, [r4, #12]
 800494c:	f012 0301 	ands.w	r3, r2, #1
 8004950:	d00c      	beq.n	800496c <__swsetup_r+0xbc>
 8004952:	2300      	movs	r3, #0
 8004954:	60a3      	str	r3, [r4, #8]
 8004956:	6963      	ldr	r3, [r4, #20]
 8004958:	425b      	negs	r3, r3
 800495a:	61a3      	str	r3, [r4, #24]
 800495c:	6923      	ldr	r3, [r4, #16]
 800495e:	b953      	cbnz	r3, 8004976 <__swsetup_r+0xc6>
 8004960:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004964:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004968:	d1ba      	bne.n	80048e0 <__swsetup_r+0x30>
 800496a:	bd70      	pop	{r4, r5, r6, pc}
 800496c:	0792      	lsls	r2, r2, #30
 800496e:	bf58      	it	pl
 8004970:	6963      	ldrpl	r3, [r4, #20]
 8004972:	60a3      	str	r3, [r4, #8]
 8004974:	e7f2      	b.n	800495c <__swsetup_r+0xac>
 8004976:	2000      	movs	r0, #0
 8004978:	e7f7      	b.n	800496a <__swsetup_r+0xba>
 800497a:	bf00      	nop
 800497c:	2000000c 	.word	0x2000000c
 8004980:	080050bc 	.word	0x080050bc
 8004984:	080050dc 	.word	0x080050dc
 8004988:	0800509c 	.word	0x0800509c

0800498c <__sflush_r>:
 800498c:	898a      	ldrh	r2, [r1, #12]
 800498e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004992:	4605      	mov	r5, r0
 8004994:	0710      	lsls	r0, r2, #28
 8004996:	460c      	mov	r4, r1
 8004998:	d458      	bmi.n	8004a4c <__sflush_r+0xc0>
 800499a:	684b      	ldr	r3, [r1, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	dc05      	bgt.n	80049ac <__sflush_r+0x20>
 80049a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	dc02      	bgt.n	80049ac <__sflush_r+0x20>
 80049a6:	2000      	movs	r0, #0
 80049a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049ae:	2e00      	cmp	r6, #0
 80049b0:	d0f9      	beq.n	80049a6 <__sflush_r+0x1a>
 80049b2:	2300      	movs	r3, #0
 80049b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80049b8:	682f      	ldr	r7, [r5, #0]
 80049ba:	6a21      	ldr	r1, [r4, #32]
 80049bc:	602b      	str	r3, [r5, #0]
 80049be:	d032      	beq.n	8004a26 <__sflush_r+0x9a>
 80049c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80049c2:	89a3      	ldrh	r3, [r4, #12]
 80049c4:	075a      	lsls	r2, r3, #29
 80049c6:	d505      	bpl.n	80049d4 <__sflush_r+0x48>
 80049c8:	6863      	ldr	r3, [r4, #4]
 80049ca:	1ac0      	subs	r0, r0, r3
 80049cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80049ce:	b10b      	cbz	r3, 80049d4 <__sflush_r+0x48>
 80049d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049d2:	1ac0      	subs	r0, r0, r3
 80049d4:	2300      	movs	r3, #0
 80049d6:	4602      	mov	r2, r0
 80049d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049da:	6a21      	ldr	r1, [r4, #32]
 80049dc:	4628      	mov	r0, r5
 80049de:	47b0      	blx	r6
 80049e0:	1c43      	adds	r3, r0, #1
 80049e2:	89a3      	ldrh	r3, [r4, #12]
 80049e4:	d106      	bne.n	80049f4 <__sflush_r+0x68>
 80049e6:	6829      	ldr	r1, [r5, #0]
 80049e8:	291d      	cmp	r1, #29
 80049ea:	d848      	bhi.n	8004a7e <__sflush_r+0xf2>
 80049ec:	4a29      	ldr	r2, [pc, #164]	; (8004a94 <__sflush_r+0x108>)
 80049ee:	40ca      	lsrs	r2, r1
 80049f0:	07d6      	lsls	r6, r2, #31
 80049f2:	d544      	bpl.n	8004a7e <__sflush_r+0xf2>
 80049f4:	2200      	movs	r2, #0
 80049f6:	6062      	str	r2, [r4, #4]
 80049f8:	04d9      	lsls	r1, r3, #19
 80049fa:	6922      	ldr	r2, [r4, #16]
 80049fc:	6022      	str	r2, [r4, #0]
 80049fe:	d504      	bpl.n	8004a0a <__sflush_r+0x7e>
 8004a00:	1c42      	adds	r2, r0, #1
 8004a02:	d101      	bne.n	8004a08 <__sflush_r+0x7c>
 8004a04:	682b      	ldr	r3, [r5, #0]
 8004a06:	b903      	cbnz	r3, 8004a0a <__sflush_r+0x7e>
 8004a08:	6560      	str	r0, [r4, #84]	; 0x54
 8004a0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a0c:	602f      	str	r7, [r5, #0]
 8004a0e:	2900      	cmp	r1, #0
 8004a10:	d0c9      	beq.n	80049a6 <__sflush_r+0x1a>
 8004a12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a16:	4299      	cmp	r1, r3
 8004a18:	d002      	beq.n	8004a20 <__sflush_r+0x94>
 8004a1a:	4628      	mov	r0, r5
 8004a1c:	f000 f994 	bl	8004d48 <_free_r>
 8004a20:	2000      	movs	r0, #0
 8004a22:	6360      	str	r0, [r4, #52]	; 0x34
 8004a24:	e7c0      	b.n	80049a8 <__sflush_r+0x1c>
 8004a26:	2301      	movs	r3, #1
 8004a28:	4628      	mov	r0, r5
 8004a2a:	47b0      	blx	r6
 8004a2c:	1c41      	adds	r1, r0, #1
 8004a2e:	d1c8      	bne.n	80049c2 <__sflush_r+0x36>
 8004a30:	682b      	ldr	r3, [r5, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d0c5      	beq.n	80049c2 <__sflush_r+0x36>
 8004a36:	2b1d      	cmp	r3, #29
 8004a38:	d001      	beq.n	8004a3e <__sflush_r+0xb2>
 8004a3a:	2b16      	cmp	r3, #22
 8004a3c:	d101      	bne.n	8004a42 <__sflush_r+0xb6>
 8004a3e:	602f      	str	r7, [r5, #0]
 8004a40:	e7b1      	b.n	80049a6 <__sflush_r+0x1a>
 8004a42:	89a3      	ldrh	r3, [r4, #12]
 8004a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a48:	81a3      	strh	r3, [r4, #12]
 8004a4a:	e7ad      	b.n	80049a8 <__sflush_r+0x1c>
 8004a4c:	690f      	ldr	r7, [r1, #16]
 8004a4e:	2f00      	cmp	r7, #0
 8004a50:	d0a9      	beq.n	80049a6 <__sflush_r+0x1a>
 8004a52:	0793      	lsls	r3, r2, #30
 8004a54:	680e      	ldr	r6, [r1, #0]
 8004a56:	bf08      	it	eq
 8004a58:	694b      	ldreq	r3, [r1, #20]
 8004a5a:	600f      	str	r7, [r1, #0]
 8004a5c:	bf18      	it	ne
 8004a5e:	2300      	movne	r3, #0
 8004a60:	eba6 0807 	sub.w	r8, r6, r7
 8004a64:	608b      	str	r3, [r1, #8]
 8004a66:	f1b8 0f00 	cmp.w	r8, #0
 8004a6a:	dd9c      	ble.n	80049a6 <__sflush_r+0x1a>
 8004a6c:	4643      	mov	r3, r8
 8004a6e:	463a      	mov	r2, r7
 8004a70:	6a21      	ldr	r1, [r4, #32]
 8004a72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004a74:	4628      	mov	r0, r5
 8004a76:	47b0      	blx	r6
 8004a78:	2800      	cmp	r0, #0
 8004a7a:	dc06      	bgt.n	8004a8a <__sflush_r+0xfe>
 8004a7c:	89a3      	ldrh	r3, [r4, #12]
 8004a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a82:	81a3      	strh	r3, [r4, #12]
 8004a84:	f04f 30ff 	mov.w	r0, #4294967295
 8004a88:	e78e      	b.n	80049a8 <__sflush_r+0x1c>
 8004a8a:	4407      	add	r7, r0
 8004a8c:	eba8 0800 	sub.w	r8, r8, r0
 8004a90:	e7e9      	b.n	8004a66 <__sflush_r+0xda>
 8004a92:	bf00      	nop
 8004a94:	20400001 	.word	0x20400001

08004a98 <_fflush_r>:
 8004a98:	b538      	push	{r3, r4, r5, lr}
 8004a9a:	690b      	ldr	r3, [r1, #16]
 8004a9c:	4605      	mov	r5, r0
 8004a9e:	460c      	mov	r4, r1
 8004aa0:	b1db      	cbz	r3, 8004ada <_fflush_r+0x42>
 8004aa2:	b118      	cbz	r0, 8004aac <_fflush_r+0x14>
 8004aa4:	6983      	ldr	r3, [r0, #24]
 8004aa6:	b90b      	cbnz	r3, 8004aac <_fflush_r+0x14>
 8004aa8:	f000 f860 	bl	8004b6c <__sinit>
 8004aac:	4b0c      	ldr	r3, [pc, #48]	; (8004ae0 <_fflush_r+0x48>)
 8004aae:	429c      	cmp	r4, r3
 8004ab0:	d109      	bne.n	8004ac6 <_fflush_r+0x2e>
 8004ab2:	686c      	ldr	r4, [r5, #4]
 8004ab4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ab8:	b17b      	cbz	r3, 8004ada <_fflush_r+0x42>
 8004aba:	4621      	mov	r1, r4
 8004abc:	4628      	mov	r0, r5
 8004abe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ac2:	f7ff bf63 	b.w	800498c <__sflush_r>
 8004ac6:	4b07      	ldr	r3, [pc, #28]	; (8004ae4 <_fflush_r+0x4c>)
 8004ac8:	429c      	cmp	r4, r3
 8004aca:	d101      	bne.n	8004ad0 <_fflush_r+0x38>
 8004acc:	68ac      	ldr	r4, [r5, #8]
 8004ace:	e7f1      	b.n	8004ab4 <_fflush_r+0x1c>
 8004ad0:	4b05      	ldr	r3, [pc, #20]	; (8004ae8 <_fflush_r+0x50>)
 8004ad2:	429c      	cmp	r4, r3
 8004ad4:	bf08      	it	eq
 8004ad6:	68ec      	ldreq	r4, [r5, #12]
 8004ad8:	e7ec      	b.n	8004ab4 <_fflush_r+0x1c>
 8004ada:	2000      	movs	r0, #0
 8004adc:	bd38      	pop	{r3, r4, r5, pc}
 8004ade:	bf00      	nop
 8004ae0:	080050bc 	.word	0x080050bc
 8004ae4:	080050dc 	.word	0x080050dc
 8004ae8:	0800509c 	.word	0x0800509c

08004aec <std>:
 8004aec:	2300      	movs	r3, #0
 8004aee:	b510      	push	{r4, lr}
 8004af0:	4604      	mov	r4, r0
 8004af2:	e9c0 3300 	strd	r3, r3, [r0]
 8004af6:	6083      	str	r3, [r0, #8]
 8004af8:	8181      	strh	r1, [r0, #12]
 8004afa:	6643      	str	r3, [r0, #100]	; 0x64
 8004afc:	81c2      	strh	r2, [r0, #14]
 8004afe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b02:	6183      	str	r3, [r0, #24]
 8004b04:	4619      	mov	r1, r3
 8004b06:	2208      	movs	r2, #8
 8004b08:	305c      	adds	r0, #92	; 0x5c
 8004b0a:	f7ff fe12 	bl	8004732 <memset>
 8004b0e:	4b05      	ldr	r3, [pc, #20]	; (8004b24 <std+0x38>)
 8004b10:	6263      	str	r3, [r4, #36]	; 0x24
 8004b12:	4b05      	ldr	r3, [pc, #20]	; (8004b28 <std+0x3c>)
 8004b14:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b16:	4b05      	ldr	r3, [pc, #20]	; (8004b2c <std+0x40>)
 8004b18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b1a:	4b05      	ldr	r3, [pc, #20]	; (8004b30 <std+0x44>)
 8004b1c:	6224      	str	r4, [r4, #32]
 8004b1e:	6323      	str	r3, [r4, #48]	; 0x30
 8004b20:	bd10      	pop	{r4, pc}
 8004b22:	bf00      	nop
 8004b24:	08004eb9 	.word	0x08004eb9
 8004b28:	08004edb 	.word	0x08004edb
 8004b2c:	08004f13 	.word	0x08004f13
 8004b30:	08004f37 	.word	0x08004f37

08004b34 <_cleanup_r>:
 8004b34:	4901      	ldr	r1, [pc, #4]	; (8004b3c <_cleanup_r+0x8>)
 8004b36:	f000 b885 	b.w	8004c44 <_fwalk_reent>
 8004b3a:	bf00      	nop
 8004b3c:	08004a99 	.word	0x08004a99

08004b40 <__sfmoreglue>:
 8004b40:	b570      	push	{r4, r5, r6, lr}
 8004b42:	1e4a      	subs	r2, r1, #1
 8004b44:	2568      	movs	r5, #104	; 0x68
 8004b46:	4355      	muls	r5, r2
 8004b48:	460e      	mov	r6, r1
 8004b4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004b4e:	f000 f949 	bl	8004de4 <_malloc_r>
 8004b52:	4604      	mov	r4, r0
 8004b54:	b140      	cbz	r0, 8004b68 <__sfmoreglue+0x28>
 8004b56:	2100      	movs	r1, #0
 8004b58:	e9c0 1600 	strd	r1, r6, [r0]
 8004b5c:	300c      	adds	r0, #12
 8004b5e:	60a0      	str	r0, [r4, #8]
 8004b60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004b64:	f7ff fde5 	bl	8004732 <memset>
 8004b68:	4620      	mov	r0, r4
 8004b6a:	bd70      	pop	{r4, r5, r6, pc}

08004b6c <__sinit>:
 8004b6c:	6983      	ldr	r3, [r0, #24]
 8004b6e:	b510      	push	{r4, lr}
 8004b70:	4604      	mov	r4, r0
 8004b72:	bb33      	cbnz	r3, 8004bc2 <__sinit+0x56>
 8004b74:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004b78:	6503      	str	r3, [r0, #80]	; 0x50
 8004b7a:	4b12      	ldr	r3, [pc, #72]	; (8004bc4 <__sinit+0x58>)
 8004b7c:	4a12      	ldr	r2, [pc, #72]	; (8004bc8 <__sinit+0x5c>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6282      	str	r2, [r0, #40]	; 0x28
 8004b82:	4298      	cmp	r0, r3
 8004b84:	bf04      	itt	eq
 8004b86:	2301      	moveq	r3, #1
 8004b88:	6183      	streq	r3, [r0, #24]
 8004b8a:	f000 f81f 	bl	8004bcc <__sfp>
 8004b8e:	6060      	str	r0, [r4, #4]
 8004b90:	4620      	mov	r0, r4
 8004b92:	f000 f81b 	bl	8004bcc <__sfp>
 8004b96:	60a0      	str	r0, [r4, #8]
 8004b98:	4620      	mov	r0, r4
 8004b9a:	f000 f817 	bl	8004bcc <__sfp>
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	60e0      	str	r0, [r4, #12]
 8004ba2:	2104      	movs	r1, #4
 8004ba4:	6860      	ldr	r0, [r4, #4]
 8004ba6:	f7ff ffa1 	bl	8004aec <std>
 8004baa:	2201      	movs	r2, #1
 8004bac:	2109      	movs	r1, #9
 8004bae:	68a0      	ldr	r0, [r4, #8]
 8004bb0:	f7ff ff9c 	bl	8004aec <std>
 8004bb4:	2202      	movs	r2, #2
 8004bb6:	2112      	movs	r1, #18
 8004bb8:	68e0      	ldr	r0, [r4, #12]
 8004bba:	f7ff ff97 	bl	8004aec <std>
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	61a3      	str	r3, [r4, #24]
 8004bc2:	bd10      	pop	{r4, pc}
 8004bc4:	08005098 	.word	0x08005098
 8004bc8:	08004b35 	.word	0x08004b35

08004bcc <__sfp>:
 8004bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bce:	4b1b      	ldr	r3, [pc, #108]	; (8004c3c <__sfp+0x70>)
 8004bd0:	681e      	ldr	r6, [r3, #0]
 8004bd2:	69b3      	ldr	r3, [r6, #24]
 8004bd4:	4607      	mov	r7, r0
 8004bd6:	b913      	cbnz	r3, 8004bde <__sfp+0x12>
 8004bd8:	4630      	mov	r0, r6
 8004bda:	f7ff ffc7 	bl	8004b6c <__sinit>
 8004bde:	3648      	adds	r6, #72	; 0x48
 8004be0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004be4:	3b01      	subs	r3, #1
 8004be6:	d503      	bpl.n	8004bf0 <__sfp+0x24>
 8004be8:	6833      	ldr	r3, [r6, #0]
 8004bea:	b133      	cbz	r3, 8004bfa <__sfp+0x2e>
 8004bec:	6836      	ldr	r6, [r6, #0]
 8004bee:	e7f7      	b.n	8004be0 <__sfp+0x14>
 8004bf0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004bf4:	b16d      	cbz	r5, 8004c12 <__sfp+0x46>
 8004bf6:	3468      	adds	r4, #104	; 0x68
 8004bf8:	e7f4      	b.n	8004be4 <__sfp+0x18>
 8004bfa:	2104      	movs	r1, #4
 8004bfc:	4638      	mov	r0, r7
 8004bfe:	f7ff ff9f 	bl	8004b40 <__sfmoreglue>
 8004c02:	6030      	str	r0, [r6, #0]
 8004c04:	2800      	cmp	r0, #0
 8004c06:	d1f1      	bne.n	8004bec <__sfp+0x20>
 8004c08:	230c      	movs	r3, #12
 8004c0a:	603b      	str	r3, [r7, #0]
 8004c0c:	4604      	mov	r4, r0
 8004c0e:	4620      	mov	r0, r4
 8004c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c12:	4b0b      	ldr	r3, [pc, #44]	; (8004c40 <__sfp+0x74>)
 8004c14:	6665      	str	r5, [r4, #100]	; 0x64
 8004c16:	e9c4 5500 	strd	r5, r5, [r4]
 8004c1a:	60a5      	str	r5, [r4, #8]
 8004c1c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004c20:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004c24:	2208      	movs	r2, #8
 8004c26:	4629      	mov	r1, r5
 8004c28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004c2c:	f7ff fd81 	bl	8004732 <memset>
 8004c30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004c34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004c38:	e7e9      	b.n	8004c0e <__sfp+0x42>
 8004c3a:	bf00      	nop
 8004c3c:	08005098 	.word	0x08005098
 8004c40:	ffff0001 	.word	0xffff0001

08004c44 <_fwalk_reent>:
 8004c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c48:	4680      	mov	r8, r0
 8004c4a:	4689      	mov	r9, r1
 8004c4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004c50:	2600      	movs	r6, #0
 8004c52:	b914      	cbnz	r4, 8004c5a <_fwalk_reent+0x16>
 8004c54:	4630      	mov	r0, r6
 8004c56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c5a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004c5e:	3f01      	subs	r7, #1
 8004c60:	d501      	bpl.n	8004c66 <_fwalk_reent+0x22>
 8004c62:	6824      	ldr	r4, [r4, #0]
 8004c64:	e7f5      	b.n	8004c52 <_fwalk_reent+0xe>
 8004c66:	89ab      	ldrh	r3, [r5, #12]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d907      	bls.n	8004c7c <_fwalk_reent+0x38>
 8004c6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c70:	3301      	adds	r3, #1
 8004c72:	d003      	beq.n	8004c7c <_fwalk_reent+0x38>
 8004c74:	4629      	mov	r1, r5
 8004c76:	4640      	mov	r0, r8
 8004c78:	47c8      	blx	r9
 8004c7a:	4306      	orrs	r6, r0
 8004c7c:	3568      	adds	r5, #104	; 0x68
 8004c7e:	e7ee      	b.n	8004c5e <_fwalk_reent+0x1a>

08004c80 <__swhatbuf_r>:
 8004c80:	b570      	push	{r4, r5, r6, lr}
 8004c82:	460e      	mov	r6, r1
 8004c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c88:	2900      	cmp	r1, #0
 8004c8a:	b096      	sub	sp, #88	; 0x58
 8004c8c:	4614      	mov	r4, r2
 8004c8e:	461d      	mov	r5, r3
 8004c90:	da07      	bge.n	8004ca2 <__swhatbuf_r+0x22>
 8004c92:	2300      	movs	r3, #0
 8004c94:	602b      	str	r3, [r5, #0]
 8004c96:	89b3      	ldrh	r3, [r6, #12]
 8004c98:	061a      	lsls	r2, r3, #24
 8004c9a:	d410      	bmi.n	8004cbe <__swhatbuf_r+0x3e>
 8004c9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ca0:	e00e      	b.n	8004cc0 <__swhatbuf_r+0x40>
 8004ca2:	466a      	mov	r2, sp
 8004ca4:	f000 f96e 	bl	8004f84 <_fstat_r>
 8004ca8:	2800      	cmp	r0, #0
 8004caa:	dbf2      	blt.n	8004c92 <__swhatbuf_r+0x12>
 8004cac:	9a01      	ldr	r2, [sp, #4]
 8004cae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004cb2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004cb6:	425a      	negs	r2, r3
 8004cb8:	415a      	adcs	r2, r3
 8004cba:	602a      	str	r2, [r5, #0]
 8004cbc:	e7ee      	b.n	8004c9c <__swhatbuf_r+0x1c>
 8004cbe:	2340      	movs	r3, #64	; 0x40
 8004cc0:	2000      	movs	r0, #0
 8004cc2:	6023      	str	r3, [r4, #0]
 8004cc4:	b016      	add	sp, #88	; 0x58
 8004cc6:	bd70      	pop	{r4, r5, r6, pc}

08004cc8 <__smakebuf_r>:
 8004cc8:	898b      	ldrh	r3, [r1, #12]
 8004cca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ccc:	079d      	lsls	r5, r3, #30
 8004cce:	4606      	mov	r6, r0
 8004cd0:	460c      	mov	r4, r1
 8004cd2:	d507      	bpl.n	8004ce4 <__smakebuf_r+0x1c>
 8004cd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004cd8:	6023      	str	r3, [r4, #0]
 8004cda:	6123      	str	r3, [r4, #16]
 8004cdc:	2301      	movs	r3, #1
 8004cde:	6163      	str	r3, [r4, #20]
 8004ce0:	b002      	add	sp, #8
 8004ce2:	bd70      	pop	{r4, r5, r6, pc}
 8004ce4:	ab01      	add	r3, sp, #4
 8004ce6:	466a      	mov	r2, sp
 8004ce8:	f7ff ffca 	bl	8004c80 <__swhatbuf_r>
 8004cec:	9900      	ldr	r1, [sp, #0]
 8004cee:	4605      	mov	r5, r0
 8004cf0:	4630      	mov	r0, r6
 8004cf2:	f000 f877 	bl	8004de4 <_malloc_r>
 8004cf6:	b948      	cbnz	r0, 8004d0c <__smakebuf_r+0x44>
 8004cf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cfc:	059a      	lsls	r2, r3, #22
 8004cfe:	d4ef      	bmi.n	8004ce0 <__smakebuf_r+0x18>
 8004d00:	f023 0303 	bic.w	r3, r3, #3
 8004d04:	f043 0302 	orr.w	r3, r3, #2
 8004d08:	81a3      	strh	r3, [r4, #12]
 8004d0a:	e7e3      	b.n	8004cd4 <__smakebuf_r+0xc>
 8004d0c:	4b0d      	ldr	r3, [pc, #52]	; (8004d44 <__smakebuf_r+0x7c>)
 8004d0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004d10:	89a3      	ldrh	r3, [r4, #12]
 8004d12:	6020      	str	r0, [r4, #0]
 8004d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d18:	81a3      	strh	r3, [r4, #12]
 8004d1a:	9b00      	ldr	r3, [sp, #0]
 8004d1c:	6163      	str	r3, [r4, #20]
 8004d1e:	9b01      	ldr	r3, [sp, #4]
 8004d20:	6120      	str	r0, [r4, #16]
 8004d22:	b15b      	cbz	r3, 8004d3c <__smakebuf_r+0x74>
 8004d24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d28:	4630      	mov	r0, r6
 8004d2a:	f000 f93d 	bl	8004fa8 <_isatty_r>
 8004d2e:	b128      	cbz	r0, 8004d3c <__smakebuf_r+0x74>
 8004d30:	89a3      	ldrh	r3, [r4, #12]
 8004d32:	f023 0303 	bic.w	r3, r3, #3
 8004d36:	f043 0301 	orr.w	r3, r3, #1
 8004d3a:	81a3      	strh	r3, [r4, #12]
 8004d3c:	89a3      	ldrh	r3, [r4, #12]
 8004d3e:	431d      	orrs	r5, r3
 8004d40:	81a5      	strh	r5, [r4, #12]
 8004d42:	e7cd      	b.n	8004ce0 <__smakebuf_r+0x18>
 8004d44:	08004b35 	.word	0x08004b35

08004d48 <_free_r>:
 8004d48:	b538      	push	{r3, r4, r5, lr}
 8004d4a:	4605      	mov	r5, r0
 8004d4c:	2900      	cmp	r1, #0
 8004d4e:	d045      	beq.n	8004ddc <_free_r+0x94>
 8004d50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d54:	1f0c      	subs	r4, r1, #4
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	bfb8      	it	lt
 8004d5a:	18e4      	addlt	r4, r4, r3
 8004d5c:	f000 f946 	bl	8004fec <__malloc_lock>
 8004d60:	4a1f      	ldr	r2, [pc, #124]	; (8004de0 <_free_r+0x98>)
 8004d62:	6813      	ldr	r3, [r2, #0]
 8004d64:	4610      	mov	r0, r2
 8004d66:	b933      	cbnz	r3, 8004d76 <_free_r+0x2e>
 8004d68:	6063      	str	r3, [r4, #4]
 8004d6a:	6014      	str	r4, [r2, #0]
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d72:	f000 b93c 	b.w	8004fee <__malloc_unlock>
 8004d76:	42a3      	cmp	r3, r4
 8004d78:	d90c      	bls.n	8004d94 <_free_r+0x4c>
 8004d7a:	6821      	ldr	r1, [r4, #0]
 8004d7c:	1862      	adds	r2, r4, r1
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	bf04      	itt	eq
 8004d82:	681a      	ldreq	r2, [r3, #0]
 8004d84:	685b      	ldreq	r3, [r3, #4]
 8004d86:	6063      	str	r3, [r4, #4]
 8004d88:	bf04      	itt	eq
 8004d8a:	1852      	addeq	r2, r2, r1
 8004d8c:	6022      	streq	r2, [r4, #0]
 8004d8e:	6004      	str	r4, [r0, #0]
 8004d90:	e7ec      	b.n	8004d6c <_free_r+0x24>
 8004d92:	4613      	mov	r3, r2
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	b10a      	cbz	r2, 8004d9c <_free_r+0x54>
 8004d98:	42a2      	cmp	r2, r4
 8004d9a:	d9fa      	bls.n	8004d92 <_free_r+0x4a>
 8004d9c:	6819      	ldr	r1, [r3, #0]
 8004d9e:	1858      	adds	r0, r3, r1
 8004da0:	42a0      	cmp	r0, r4
 8004da2:	d10b      	bne.n	8004dbc <_free_r+0x74>
 8004da4:	6820      	ldr	r0, [r4, #0]
 8004da6:	4401      	add	r1, r0
 8004da8:	1858      	adds	r0, r3, r1
 8004daa:	4282      	cmp	r2, r0
 8004dac:	6019      	str	r1, [r3, #0]
 8004dae:	d1dd      	bne.n	8004d6c <_free_r+0x24>
 8004db0:	6810      	ldr	r0, [r2, #0]
 8004db2:	6852      	ldr	r2, [r2, #4]
 8004db4:	605a      	str	r2, [r3, #4]
 8004db6:	4401      	add	r1, r0
 8004db8:	6019      	str	r1, [r3, #0]
 8004dba:	e7d7      	b.n	8004d6c <_free_r+0x24>
 8004dbc:	d902      	bls.n	8004dc4 <_free_r+0x7c>
 8004dbe:	230c      	movs	r3, #12
 8004dc0:	602b      	str	r3, [r5, #0]
 8004dc2:	e7d3      	b.n	8004d6c <_free_r+0x24>
 8004dc4:	6820      	ldr	r0, [r4, #0]
 8004dc6:	1821      	adds	r1, r4, r0
 8004dc8:	428a      	cmp	r2, r1
 8004dca:	bf04      	itt	eq
 8004dcc:	6811      	ldreq	r1, [r2, #0]
 8004dce:	6852      	ldreq	r2, [r2, #4]
 8004dd0:	6062      	str	r2, [r4, #4]
 8004dd2:	bf04      	itt	eq
 8004dd4:	1809      	addeq	r1, r1, r0
 8004dd6:	6021      	streq	r1, [r4, #0]
 8004dd8:	605c      	str	r4, [r3, #4]
 8004dda:	e7c7      	b.n	8004d6c <_free_r+0x24>
 8004ddc:	bd38      	pop	{r3, r4, r5, pc}
 8004dde:	bf00      	nop
 8004de0:	20000090 	.word	0x20000090

08004de4 <_malloc_r>:
 8004de4:	b570      	push	{r4, r5, r6, lr}
 8004de6:	1ccd      	adds	r5, r1, #3
 8004de8:	f025 0503 	bic.w	r5, r5, #3
 8004dec:	3508      	adds	r5, #8
 8004dee:	2d0c      	cmp	r5, #12
 8004df0:	bf38      	it	cc
 8004df2:	250c      	movcc	r5, #12
 8004df4:	2d00      	cmp	r5, #0
 8004df6:	4606      	mov	r6, r0
 8004df8:	db01      	blt.n	8004dfe <_malloc_r+0x1a>
 8004dfa:	42a9      	cmp	r1, r5
 8004dfc:	d903      	bls.n	8004e06 <_malloc_r+0x22>
 8004dfe:	230c      	movs	r3, #12
 8004e00:	6033      	str	r3, [r6, #0]
 8004e02:	2000      	movs	r0, #0
 8004e04:	bd70      	pop	{r4, r5, r6, pc}
 8004e06:	f000 f8f1 	bl	8004fec <__malloc_lock>
 8004e0a:	4a21      	ldr	r2, [pc, #132]	; (8004e90 <_malloc_r+0xac>)
 8004e0c:	6814      	ldr	r4, [r2, #0]
 8004e0e:	4621      	mov	r1, r4
 8004e10:	b991      	cbnz	r1, 8004e38 <_malloc_r+0x54>
 8004e12:	4c20      	ldr	r4, [pc, #128]	; (8004e94 <_malloc_r+0xb0>)
 8004e14:	6823      	ldr	r3, [r4, #0]
 8004e16:	b91b      	cbnz	r3, 8004e20 <_malloc_r+0x3c>
 8004e18:	4630      	mov	r0, r6
 8004e1a:	f000 f83d 	bl	8004e98 <_sbrk_r>
 8004e1e:	6020      	str	r0, [r4, #0]
 8004e20:	4629      	mov	r1, r5
 8004e22:	4630      	mov	r0, r6
 8004e24:	f000 f838 	bl	8004e98 <_sbrk_r>
 8004e28:	1c43      	adds	r3, r0, #1
 8004e2a:	d124      	bne.n	8004e76 <_malloc_r+0x92>
 8004e2c:	230c      	movs	r3, #12
 8004e2e:	6033      	str	r3, [r6, #0]
 8004e30:	4630      	mov	r0, r6
 8004e32:	f000 f8dc 	bl	8004fee <__malloc_unlock>
 8004e36:	e7e4      	b.n	8004e02 <_malloc_r+0x1e>
 8004e38:	680b      	ldr	r3, [r1, #0]
 8004e3a:	1b5b      	subs	r3, r3, r5
 8004e3c:	d418      	bmi.n	8004e70 <_malloc_r+0x8c>
 8004e3e:	2b0b      	cmp	r3, #11
 8004e40:	d90f      	bls.n	8004e62 <_malloc_r+0x7e>
 8004e42:	600b      	str	r3, [r1, #0]
 8004e44:	50cd      	str	r5, [r1, r3]
 8004e46:	18cc      	adds	r4, r1, r3
 8004e48:	4630      	mov	r0, r6
 8004e4a:	f000 f8d0 	bl	8004fee <__malloc_unlock>
 8004e4e:	f104 000b 	add.w	r0, r4, #11
 8004e52:	1d23      	adds	r3, r4, #4
 8004e54:	f020 0007 	bic.w	r0, r0, #7
 8004e58:	1ac3      	subs	r3, r0, r3
 8004e5a:	d0d3      	beq.n	8004e04 <_malloc_r+0x20>
 8004e5c:	425a      	negs	r2, r3
 8004e5e:	50e2      	str	r2, [r4, r3]
 8004e60:	e7d0      	b.n	8004e04 <_malloc_r+0x20>
 8004e62:	428c      	cmp	r4, r1
 8004e64:	684b      	ldr	r3, [r1, #4]
 8004e66:	bf16      	itet	ne
 8004e68:	6063      	strne	r3, [r4, #4]
 8004e6a:	6013      	streq	r3, [r2, #0]
 8004e6c:	460c      	movne	r4, r1
 8004e6e:	e7eb      	b.n	8004e48 <_malloc_r+0x64>
 8004e70:	460c      	mov	r4, r1
 8004e72:	6849      	ldr	r1, [r1, #4]
 8004e74:	e7cc      	b.n	8004e10 <_malloc_r+0x2c>
 8004e76:	1cc4      	adds	r4, r0, #3
 8004e78:	f024 0403 	bic.w	r4, r4, #3
 8004e7c:	42a0      	cmp	r0, r4
 8004e7e:	d005      	beq.n	8004e8c <_malloc_r+0xa8>
 8004e80:	1a21      	subs	r1, r4, r0
 8004e82:	4630      	mov	r0, r6
 8004e84:	f000 f808 	bl	8004e98 <_sbrk_r>
 8004e88:	3001      	adds	r0, #1
 8004e8a:	d0cf      	beq.n	8004e2c <_malloc_r+0x48>
 8004e8c:	6025      	str	r5, [r4, #0]
 8004e8e:	e7db      	b.n	8004e48 <_malloc_r+0x64>
 8004e90:	20000090 	.word	0x20000090
 8004e94:	20000094 	.word	0x20000094

08004e98 <_sbrk_r>:
 8004e98:	b538      	push	{r3, r4, r5, lr}
 8004e9a:	4c06      	ldr	r4, [pc, #24]	; (8004eb4 <_sbrk_r+0x1c>)
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	4605      	mov	r5, r0
 8004ea0:	4608      	mov	r0, r1
 8004ea2:	6023      	str	r3, [r4, #0]
 8004ea4:	f7fc fa1a 	bl	80012dc <_sbrk>
 8004ea8:	1c43      	adds	r3, r0, #1
 8004eaa:	d102      	bne.n	8004eb2 <_sbrk_r+0x1a>
 8004eac:	6823      	ldr	r3, [r4, #0]
 8004eae:	b103      	cbz	r3, 8004eb2 <_sbrk_r+0x1a>
 8004eb0:	602b      	str	r3, [r5, #0]
 8004eb2:	bd38      	pop	{r3, r4, r5, pc}
 8004eb4:	20000168 	.word	0x20000168

08004eb8 <__sread>:
 8004eb8:	b510      	push	{r4, lr}
 8004eba:	460c      	mov	r4, r1
 8004ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ec0:	f000 f896 	bl	8004ff0 <_read_r>
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	bfab      	itete	ge
 8004ec8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004eca:	89a3      	ldrhlt	r3, [r4, #12]
 8004ecc:	181b      	addge	r3, r3, r0
 8004ece:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004ed2:	bfac      	ite	ge
 8004ed4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004ed6:	81a3      	strhlt	r3, [r4, #12]
 8004ed8:	bd10      	pop	{r4, pc}

08004eda <__swrite>:
 8004eda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ede:	461f      	mov	r7, r3
 8004ee0:	898b      	ldrh	r3, [r1, #12]
 8004ee2:	05db      	lsls	r3, r3, #23
 8004ee4:	4605      	mov	r5, r0
 8004ee6:	460c      	mov	r4, r1
 8004ee8:	4616      	mov	r6, r2
 8004eea:	d505      	bpl.n	8004ef8 <__swrite+0x1e>
 8004eec:	2302      	movs	r3, #2
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ef4:	f000 f868 	bl	8004fc8 <_lseek_r>
 8004ef8:	89a3      	ldrh	r3, [r4, #12]
 8004efa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004efe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f02:	81a3      	strh	r3, [r4, #12]
 8004f04:	4632      	mov	r2, r6
 8004f06:	463b      	mov	r3, r7
 8004f08:	4628      	mov	r0, r5
 8004f0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f0e:	f000 b817 	b.w	8004f40 <_write_r>

08004f12 <__sseek>:
 8004f12:	b510      	push	{r4, lr}
 8004f14:	460c      	mov	r4, r1
 8004f16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f1a:	f000 f855 	bl	8004fc8 <_lseek_r>
 8004f1e:	1c43      	adds	r3, r0, #1
 8004f20:	89a3      	ldrh	r3, [r4, #12]
 8004f22:	bf15      	itete	ne
 8004f24:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f2e:	81a3      	strheq	r3, [r4, #12]
 8004f30:	bf18      	it	ne
 8004f32:	81a3      	strhne	r3, [r4, #12]
 8004f34:	bd10      	pop	{r4, pc}

08004f36 <__sclose>:
 8004f36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f3a:	f000 b813 	b.w	8004f64 <_close_r>
	...

08004f40 <_write_r>:
 8004f40:	b538      	push	{r3, r4, r5, lr}
 8004f42:	4c07      	ldr	r4, [pc, #28]	; (8004f60 <_write_r+0x20>)
 8004f44:	4605      	mov	r5, r0
 8004f46:	4608      	mov	r0, r1
 8004f48:	4611      	mov	r1, r2
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	6022      	str	r2, [r4, #0]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	f7fc f973 	bl	800123a <_write>
 8004f54:	1c43      	adds	r3, r0, #1
 8004f56:	d102      	bne.n	8004f5e <_write_r+0x1e>
 8004f58:	6823      	ldr	r3, [r4, #0]
 8004f5a:	b103      	cbz	r3, 8004f5e <_write_r+0x1e>
 8004f5c:	602b      	str	r3, [r5, #0]
 8004f5e:	bd38      	pop	{r3, r4, r5, pc}
 8004f60:	20000168 	.word	0x20000168

08004f64 <_close_r>:
 8004f64:	b538      	push	{r3, r4, r5, lr}
 8004f66:	4c06      	ldr	r4, [pc, #24]	; (8004f80 <_close_r+0x1c>)
 8004f68:	2300      	movs	r3, #0
 8004f6a:	4605      	mov	r5, r0
 8004f6c:	4608      	mov	r0, r1
 8004f6e:	6023      	str	r3, [r4, #0]
 8004f70:	f7fc f97f 	bl	8001272 <_close>
 8004f74:	1c43      	adds	r3, r0, #1
 8004f76:	d102      	bne.n	8004f7e <_close_r+0x1a>
 8004f78:	6823      	ldr	r3, [r4, #0]
 8004f7a:	b103      	cbz	r3, 8004f7e <_close_r+0x1a>
 8004f7c:	602b      	str	r3, [r5, #0]
 8004f7e:	bd38      	pop	{r3, r4, r5, pc}
 8004f80:	20000168 	.word	0x20000168

08004f84 <_fstat_r>:
 8004f84:	b538      	push	{r3, r4, r5, lr}
 8004f86:	4c07      	ldr	r4, [pc, #28]	; (8004fa4 <_fstat_r+0x20>)
 8004f88:	2300      	movs	r3, #0
 8004f8a:	4605      	mov	r5, r0
 8004f8c:	4608      	mov	r0, r1
 8004f8e:	4611      	mov	r1, r2
 8004f90:	6023      	str	r3, [r4, #0]
 8004f92:	f7fc f97a 	bl	800128a <_fstat>
 8004f96:	1c43      	adds	r3, r0, #1
 8004f98:	d102      	bne.n	8004fa0 <_fstat_r+0x1c>
 8004f9a:	6823      	ldr	r3, [r4, #0]
 8004f9c:	b103      	cbz	r3, 8004fa0 <_fstat_r+0x1c>
 8004f9e:	602b      	str	r3, [r5, #0]
 8004fa0:	bd38      	pop	{r3, r4, r5, pc}
 8004fa2:	bf00      	nop
 8004fa4:	20000168 	.word	0x20000168

08004fa8 <_isatty_r>:
 8004fa8:	b538      	push	{r3, r4, r5, lr}
 8004faa:	4c06      	ldr	r4, [pc, #24]	; (8004fc4 <_isatty_r+0x1c>)
 8004fac:	2300      	movs	r3, #0
 8004fae:	4605      	mov	r5, r0
 8004fb0:	4608      	mov	r0, r1
 8004fb2:	6023      	str	r3, [r4, #0]
 8004fb4:	f7fc f979 	bl	80012aa <_isatty>
 8004fb8:	1c43      	adds	r3, r0, #1
 8004fba:	d102      	bne.n	8004fc2 <_isatty_r+0x1a>
 8004fbc:	6823      	ldr	r3, [r4, #0]
 8004fbe:	b103      	cbz	r3, 8004fc2 <_isatty_r+0x1a>
 8004fc0:	602b      	str	r3, [r5, #0]
 8004fc2:	bd38      	pop	{r3, r4, r5, pc}
 8004fc4:	20000168 	.word	0x20000168

08004fc8 <_lseek_r>:
 8004fc8:	b538      	push	{r3, r4, r5, lr}
 8004fca:	4c07      	ldr	r4, [pc, #28]	; (8004fe8 <_lseek_r+0x20>)
 8004fcc:	4605      	mov	r5, r0
 8004fce:	4608      	mov	r0, r1
 8004fd0:	4611      	mov	r1, r2
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	6022      	str	r2, [r4, #0]
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	f7fc f972 	bl	80012c0 <_lseek>
 8004fdc:	1c43      	adds	r3, r0, #1
 8004fde:	d102      	bne.n	8004fe6 <_lseek_r+0x1e>
 8004fe0:	6823      	ldr	r3, [r4, #0]
 8004fe2:	b103      	cbz	r3, 8004fe6 <_lseek_r+0x1e>
 8004fe4:	602b      	str	r3, [r5, #0]
 8004fe6:	bd38      	pop	{r3, r4, r5, pc}
 8004fe8:	20000168 	.word	0x20000168

08004fec <__malloc_lock>:
 8004fec:	4770      	bx	lr

08004fee <__malloc_unlock>:
 8004fee:	4770      	bx	lr

08004ff0 <_read_r>:
 8004ff0:	b538      	push	{r3, r4, r5, lr}
 8004ff2:	4c07      	ldr	r4, [pc, #28]	; (8005010 <_read_r+0x20>)
 8004ff4:	4605      	mov	r5, r0
 8004ff6:	4608      	mov	r0, r1
 8004ff8:	4611      	mov	r1, r2
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	6022      	str	r2, [r4, #0]
 8004ffe:	461a      	mov	r2, r3
 8005000:	f7fc f8fe 	bl	8001200 <_read>
 8005004:	1c43      	adds	r3, r0, #1
 8005006:	d102      	bne.n	800500e <_read_r+0x1e>
 8005008:	6823      	ldr	r3, [r4, #0]
 800500a:	b103      	cbz	r3, 800500e <_read_r+0x1e>
 800500c:	602b      	str	r3, [r5, #0]
 800500e:	bd38      	pop	{r3, r4, r5, pc}
 8005010:	20000168 	.word	0x20000168

08005014 <_init>:
 8005014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005016:	bf00      	nop
 8005018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800501a:	bc08      	pop	{r3}
 800501c:	469e      	mov	lr, r3
 800501e:	4770      	bx	lr

08005020 <_fini>:
 8005020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005022:	bf00      	nop
 8005024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005026:	bc08      	pop	{r3}
 8005028:	469e      	mov	lr, r3
 800502a:	4770      	bx	lr
